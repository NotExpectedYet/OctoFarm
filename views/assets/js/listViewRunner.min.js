(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Calculation Functions
var Calculate = /*#__PURE__*/function () {
  function Calculate() {
    _classCallCheck(this, Calculate);
  }

  _createClass(Calculate, null, [{
    key: "randomString",
    // Generate a random string
    value: function randomString() {
      var random = Math.random().toString(36).substr(2, 5);
      return random;
    } // Apply tofixed if not null

  }, {
    key: "toFixed",
    value: function toFixed(amount, fractional) {
      if (typeof amount !== "undefined" && amount !== null) {
        return amount.toFixed(fractional);
      }

      return 0;
    } // Convert miliseconds to Days, Hours, Minutes

  }, {
    key: "generateTime",
    value: function generateTime(seconds) {
      var string = "";

      if (seconds === undefined || isNaN(seconds) || seconds === null) {
        string = "No Time Estimate";
      } else {
        var years = Math.floor(seconds / (360 * 365));
        var days = Math.floor(seconds / (3600 * 24));
        seconds -= days * 3600 * 24;
        var hrs = Math.floor(seconds / 3600);
        seconds -= hrs * 3600;
        var mnts = Math.floor(seconds / 60);
        seconds -= mnts * 60;
        seconds = Math.floor(seconds);
        string = "".concat(days, "d, ").concat(hrs, "h, ").concat(mnts, "m, ").concat(seconds, "s");

        if (mnts === 0) {
          if (string.includes("0m")) {
            string = string.replace(" 0m,", "");
          }
        }

        if (hrs === 0) {
          if (string.includes("0h")) {
            string = string.replace(" 0h,", "");
          }
        }

        if (days === 0) {
          if (string.includes("0d")) {
            string = string.replace("0d,", "");
          }
        }

        if (mnts === 0 && hrs === 0 && days === 0 && seconds === 0) {
          string = string.replace("0s", "Done");
        }
      }

      return string;
    } // Check if values are between another value.

  }, {
    key: "isBetween",
    value: function isBetween(n, a, b) {
      return (n - a) * (n - b) <= 0;
    }
  }, {
    key: "returnPrintCost",
    value: function returnPrintCost(costSettings, time) {
      if (typeof costSettings === "undefined") {
        // Attempt to update cost settings in history...
        return "No cost settings to calculate from";
      } // calculating electricity cost


      var powerConsumption = parseFloat(costSettings.powerConsumption);
      var costOfElectricity = parseFloat(costSettings.electricityCosts);
      var costPerHour = powerConsumption * costOfElectricity;
      var estimatedPrintTime = time / 3600; // h

      var electricityCost = costPerHour * estimatedPrintTime; // calculating printer cost

      var purchasePrice = parseFloat(costSettings.purchasePrice);
      var lifespan = parseFloat(costSettings.estimateLifespan);
      var depreciationPerHour = lifespan > 0 ? purchasePrice / lifespan : 0;
      var maintenancePerHour = parseFloat(costSettings.maintenanceCosts);
      var printerCost = (depreciationPerHour + maintenancePerHour) * estimatedPrintTime; // assembling string

      var estimatedCost = electricityCost + printerCost;
      return estimatedCost.toFixed(2);
    }
  }, {
    key: "bytes",
    value: function bytes(a, b) {
      var string = "";

      if (a === undefined || isNaN(a) || a === null) {
        return string = "No File Estimate";
      }

      if (a == 0) return "0 Bytes";
      var c = 1024;
      var d = b || 2;
      var e = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
      var f = Math.floor(Math.log(a) / Math.log(c));
      return "".concat(parseFloat((a / Math.pow(c, f)).toFixed(d)), " ").concat(e[f]);
    }
  }, {
    key: "dateClean",
    value: function dateClean(date) {
      date = new Date(date);
      var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
      var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
      return "".concat(days[date.getDay()], " ").concat(months[date.getMonth()], " ").concat(date.getFullYear(), " - ").concat(date.getHours(), ":").concat(date.getMinutes(), ":").concat(date.getSeconds());
    }
  }, {
    key: "generateCost",
    value: function generateCost(cost) {
      if (cost) {
        return cost.toFixed(2);
      } else {
        return 0;
      }
    }
  }]);

  return Calculate;
}();

exports["default"] = Calculate;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dragCheck = dragCheck;
exports.dragAndDropEnable = dragAndDropEnable;
exports.dragAndDropEnableMultiplePrinters = dragAndDropEnableMultiplePrinters;
exports.handleFiles = handleFiles;

var _fileManager = _interopRequireDefault(require("../modules/fileManager.js"));

var _ui = _interopRequireDefault(require("./ui.js"));

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var activeFile = false;

function dragCheck() {
  return _dragCheck.apply(this, arguments);
}

function _dragCheck() {
  _dragCheck = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", activeFile);

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _dragCheck.apply(this, arguments);
}

function dragAndDropEnable(element, printer) {
  var dropArea = document.getElementById(element.id); // Prevent default drag behaviors

  ["dragenter", "dragover", "dragleave", "drop"].forEach(function (eventName) {
    dropArea.addEventListener(eventName, preventDefaults, false);
    document.body.addEventListener(eventName, preventDefaults, false);
  }); // Highlight drop area when item is dragged over it

  ["dragenter", "dragover"].forEach(function (eventName) {
    dropArea.addEventListener(eventName, function (event) {
      activeFile = true;
      highlight(event, element);
    }, false);
  });
  ["dragleave", "drop"].forEach(function (eventName) {
    dropArea.addEventListener(eventName, function (event) {
      activeFile = false;
      unhighlight(event, element);
    }, false);
  });
  dropArea.addEventListener("drop", function (event) {
    handleDrop(event, printer);
  }, false);
}

function dragAndDropEnableMultiplePrinters(element, printers) {
  var dropArea = document.getElementById(element.id); // Prevent default drag behaviors

  ["dragenter", "dragover", "dragleave", "drop"].forEach(function (eventName) {
    dropArea.addEventListener(eventName, preventDefaults, false);
    document.body.addEventListener(eventName, preventDefaults, false);
  }); // Highlight drop area when item is dragged over it

  ["dragenter", "dragover"].forEach(function (eventName) {
    dropArea.addEventListener(eventName, function (event) {
      activeFile = true;
      highlight(event, element);
    }, false);
  });
  ["dragleave", "drop"].forEach(function (eventName) {
    dropArea.addEventListener(eventName, function (event) {
      activeFile = false;
      unhighlight(event, element);
    }, false);
  });
  dropArea.addEventListener("drop", function (event) {
    var selectedOnlyPrinters = printers.filter(function (p) {
      return !!p.isSelected;
    });
    handleMassDrop(event, selectedOnlyPrinters);
  }, false);
}

function preventDefaults(e) {
  e.preventDefault();
  e.stopPropagation();
}

function highlight(e, currentElement) {
  currentElement.classList.add("highlight");
}

function unhighlight(e, currentElement) {
  currentElement.classList.remove("highlight");
}

function handleDrop(e, currentPrinter, currentElement) {
  var dt = e.dataTransfer;
  var files = dt.files;
  handleFiles(files, [currentPrinter], currentElement);
}

function handleMassDrop(e, printers, currentElement) {
  var dt = e.dataTransfer;
  var files = dt.files;
  handleFiles(files, printers, currentElement);
}

function sendFilesToPrinter(singleFileOnly, printAfterUpload, uploadableFiles, printer) {
  _ui["default"].createAlert("warning", "".concat(_validate["default"].getName(printer), ": started upload"), 3000, "Clicked"); // Only single files can be sent to be printed immediately after upload


  if (printAfterUpload && singleFileOnly) {
    _fileManager["default"].handleFiles(uploadableFiles, printer, "print");
  } else {
    _fileManager["default"].handleFiles(uploadableFiles, printer);
  }
}

function handleFiles(uploadableFiles, printerArray) {
  if (!printerArray || printerArray.length === 0) {
    return;
  }

  var singleFileOnly = uploadableFiles.length === 1;

  if (singleFileOnly) {
    bootbox.confirm({
      message: "Would you like to print upon upload?",
      buttons: {
        confirm: {
          label: "Yes",
          className: "btn-success"
        },
        cancel: {
          label: "No",
          className: "btn-danger"
        }
      },
      callback: function callback(bootBoxConfirmed) {
        printerArray.forEach(function (printer) {
          sendFilesToPrinter(true, bootBoxConfirmed, uploadableFiles, printer);
        });
      }
    });
  } else {
    printerArray.forEach(function (printer) {
      sendFilesToPrinter(false, false, uploadableFiles, printer);
    });
  }
}

},{"../modules/fileManager.js":11,"./ui.js":4,"./validate.js":5}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = doubleClickFullScreen;

function doubleClickFullScreen(element) {
  if (element.type == "submit") {
    return;
  }

  element.requestFullscreen();

  if (document.fullscreenElement) {
    document.exitFullscreen();
  }
}

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var UI = /*#__PURE__*/function () {
  function UI() {
    _classCallCheck(this, UI);
  }

  _createClass(UI, null, [{
    key: "getColour",
    //Colour function
    value: function getColour(state) {
      if (state === "Operational") {
        return {
          name: "secondary",
          hex: "#262626",
          category: "Idle"
        };
      } else if (state === "Paused") {
        return {
          name: "warning",
          hex: "#583c0e",
          category: "Idle"
        };
      } else if (state === "Printing") {
        return {
          name: "warning",
          hex: "#583c0e",
          category: "Active"
        };
      } else if (state === "Pausing") {
        return {
          name: "warning",
          hex: "#583c0e",
          category: "Active"
        };
      } else if (state === "Cancelling") {
        return {
          name: "warning",
          hex: "#583c0e",
          category: "Active"
        };
      } else if (state === "Error") {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Idle"
        };
      } else if (state === "Offline") {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Offline"
        };
      } else if (state === "Searching...") {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Idle"
        };
      } else if (state === "Closed") {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Closed"
        };
      } else if (state === "Complete") {
        return {
          name: "success",
          hex: "#00330e",
          category: "Complete"
        };
      } else {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Offline"
        };
      }
    } //Create message

  }, {
    key: "createMessage",
    value: function createMessage(options, element) {
      var message = document.getElementById(element);
      var row = "\n      <div class=\"alert alert-".concat(options.type, " alert-dismissible fade show\" role=\"alert\">\n        ").concat(options.msg, "\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n    ");
      message.insertAdjacentHTML("beforeend", row);
    } //Create toast notification

  }, {
    key: "createAlert",
    value: function createAlert(type, message, delay, click) {
      if (click != undefined) {
        click = ["click"];
      } else {
        click = [];
      } //This needs a more elegant solution, I think noty is keeping the elements I remove with remove() from the DOM in memory somewhere...


      Noty.setMaxVisible(50);
      var alert = new Noty({
        type: type,
        theme: "bootstrap-v4",
        closeWith: click,
        timeout: delay,
        layout: "bottomRight",
        text: message
      });
      alert.show();
      return alert;
    }
  }, {
    key: "doesElementNeedUpdating",
    value: function doesElementNeedUpdating(value, element, meta) {
      //Quick check to see if the UI value differs, if so update.
      if (element) {
        if (JSON.stringify(value) !== JSON.stringify(element[meta])) {
          element[meta] = value;
        }
      }
    }
  }, {
    key: "clearSelect",
    value: function clearSelect(elementValue) {
      var inputBoxes = document.querySelectorAll("*[id^=" + elementValue + "]");
      inputBoxes.forEach(function (input) {
        input.value = "";
      });
    }
  }, {
    key: "addSelectListeners",
    value: function addSelectListeners(elementValue) {
      var inputBoxes = document.querySelectorAll("*[id^=" + elementValue + "]");
      inputBoxes.forEach(function (input) {
        input.addEventListener("focus", function (e) {
          if (input.value !== input.placeholder) {
            input.value = input.placeholder;
          }
        });
        input.addEventListener("focusout", function (e) {
          if (input.value !== input.placeholder) {
            input.placeholder = input.value;
          }
        });
      });
    }
  }]);

  return UI;
}();

exports["default"] = UI;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Validate = /*#__PURE__*/function () {
  function Validate() {
    _classCallCheck(this, Validate);
  }

  _createClass(Validate, null, [{
    key: "URL",
    //Check the validity of a URL
    value: function URL(u) {
      var elm;

      if (!elm) {
        elm = document.createElement('input');
        elm.setAttribute('type', 'url');
      }

      elm.value = u;
      return elm.validity.valid;
    }
  }, {
    key: "IP",
    value: function IP(ipaddress) {
      if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "JSON",
    value: function JSON(file) {
      if (/^[\],:{}\s]*$/.test(file.replace(/\\["\\\/bfnrtu]/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "getName",
    value: function getName(printer) {
      if (typeof printer.settingsAppearance != "undefined") {
        if (printer.settingsAppearance.name === "" || printer.settingsAppearance.name === null) {
          return printer.printerURL;
        } else {
          return printer.settingsAppearance.name;
        }
      } else {
        return printer.printerURL;
      }
    }
  }, {
    key: "stripHTML",
    value: function stripHTML(text) {
      var tmp = document.createElement("DIV");
      tmp.innerHTML = text;
      var res = tmp.textContent || tmp.innerText || '';
      res.replace("\u200B", ''); // zero width space

      res = res.trim();
      return res;
    }
  }]);

  return Validate;
}();

exports["default"] = Validate;

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.printerQuickConnected = printerQuickConnected;
exports.printerQuickDisconnected = printerQuickDisconnected;
exports.checkQuickConnectState = checkQuickConnectState;

var _powerButton = _interopRequireDefault(require("../powerButton.js"));

var _ui = _interopRequireDefault(require("../../functions/ui"));

var _octoprint = _interopRequireDefault(require("../../octoprint"));

var _octofarm = _interopRequireDefault(require("../../octofarm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function printerControlBtn(id) {
  return "\n    <button  \n         title=\"Control Your Printer\"\n         id=\"printerButton-".concat(id, "\"\n         type=\"button\"\n         class=\"tag btn btn-primary btn-sm\"\n         data-toggle=\"modal\"\n         data-target=\"#printerManagerModal\" disabled\n         >\n            <i class=\"fas fa-print\"></i>\n    </button>\n    ");
}

function printerWebBtn(id, webURL) {
  return "\n            <a title=\"Open OctoPrint\"\n               id=\"printerWeb-".concat(id, "\"\n               type=\"button\"\n               class=\"tag btn btn-info btn-sm\"\n               target=\"_blank\"\n               href=\"").concat(webURL, "\" role=\"button\"><i class=\"fas fa-globe-europe\"></i></a>\n    ");
}

function printerReSyncBtn(id) {
  return "\n            <button  \n                     title=\"Re-Sync your printer\"\n                     id=\"printerSyncButton-".concat(id, "\"\n                     type=\"button\"\n                     class=\"tag btn btn-success btn-sm\"\n            >\n                <i class=\"fas fa-sync\"></i>\n            </button>\n    ");
}

function printerQuickConnect(id) {
  return "\n    <button  \n         title=\"Quickly connect/disconnect your printer\"\n         id=\"printerQuickConnect-".concat(id, "\"\n         type=\"button\"\n         class=\"tag btn btn-danger btn-sm\"\n         >\n            <i class=\"fas fa-toggle-off\"></i>\n    </button>\n    ");
}

function powerBtnHolder(id) {
  return "\n      <div class=\"btn-group\" id=\"powerBtn-".concat(id, "\">\n      \n      </div>\n  ");
}

function printerQuickConnected(id) {
  var connectBtn = document.getElementById("printerQuickConnect-" + id);
  connectBtn.innerHTML = '<i class="fas fa-toggle-on"></i>';
  connectBtn.classList.remove("btn-danger");
  connectBtn.classList.add("btn-success");
  connectBtn.title = "Press to connect your printer!";
}

function printerQuickDisconnected(id) {
  var connectBtn = document.getElementById("printerQuickConnect-" + id);
  connectBtn.innerHTML = '<i class="fas fa-toggle-off"></i>';
  connectBtn.classList.remove("btn-success");
  connectBtn.classList.add("btn-danger");
  connectBtn.title = "Press to connect your printer!";
}

function init(_x, _x2) {
  return _init.apply(this, arguments);
}

function _init() {
  _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(printer, element) {
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            document.getElementById(element).innerHTML = "\n    ".concat(printerControlBtn(printer._id), "  \n    ").concat(printerWebBtn(printer._id, printer.printerURL), "  \n    ").concat(printerReSyncBtn(printer._id), "  \n    ").concat(printerQuickConnect(printer._id), "  \n    ").concat(powerBtnHolder(printer._id), "  \n  ");
            _context4.next = 3;
            return _powerButton["default"].applyBtn(printer, "powerBtn-");

          case 3:
            if (printer.currentConnection != null && printer.currentConnection.port != null && printer.printerState.colour.category != "Offline") {
              printerQuickConnected(printer._id);
            } else {
              printerQuickDisconnected(printer._id);
            }

            if (printer.printerState.colour.category === "Offline") {
              document.getElementById("printerQuickConnect-" + printer._id).disabled = true;
            } else {
              document.getElementById("printerQuickConnect-" + printer._id).disabled = false;
            }

            addEventListeners(printer);
            return _context4.abrupt("return", true);

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _init.apply(this, arguments);
}

function addEventListeners(printer) {
  //Quick Connect
  document.getElementById("printerQuickConnect-".concat(printer._id)).addEventListener("click", /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(e) {
      var data, post;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              e.disabled = true;

              if (!document.getElementById("printerQuickConnect-" + printer._id).classList.contains("btn-danger")) {
                _context2.next = 10;
                break;
              }

              data = {};

              if (typeof printer.connectionOptions !== "undefined") {
                data = {
                  command: "connect",
                  port: printer.connectionOptions.portPreference,
                  baudrate: parseInt(printer.connectionOptions.baudratePreference),
                  printerProfile: printer.connectionOptions.printerProfilePreference
                };
              } else {
                _ui["default"].createAlert("warning", "".concat(printer.printerName, " has no preferences saved, defaulting to AUTO..."), 8000, "Clicked");

                data.command = "connect";
                data.port = "AUTO";
                data.baudrate = "AUTO";
                data.printerProfile = "_default";
              }

              _context2.next = 6;
              return _octoprint["default"].post(printer, "connection", data);

            case 6:
              post = _context2.sent;

              if (typeof post !== "undefined") {
                if (post.status === 204) {
                  _ui["default"].createAlert("success", "Successfully made connection attempt to ".concat(printer.printerName, "..."), 3000, "Clicked");
                } else {
                  _ui["default"].createAlert("error", "There was an issue connecting to ".concat(printer.printerName, " it's either not online, or the connection options supplied are not available..."), 3000, "Clicked");
                }
              } else {
                _ui["default"].createAlert("error", "No response from ".concat(printer.printerName, ", is it online???"), 3000, "Clicked");
              }

              _context2.next = 11;
              break;

            case 10:
              bootbox.confirm({
                message: "Are you sure you want to disconnect your printer?",
                buttons: {
                  confirm: {
                    label: "Yes",
                    className: "btn-success"
                  },
                  cancel: {
                    label: "No",
                    className: "btn-danger"
                  }
                },
                callback: function () {
                  var _callback = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(result) {
                    var _data, _post;

                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            if (!result) {
                              _context.next = 6;
                              break;
                            }

                            _data = {
                              command: "disconnect"
                            };
                            _context.next = 4;
                            return _octoprint["default"].post(printer, "connection", _data);

                          case 4:
                            _post = _context.sent;

                            if (typeof _post !== "undefined") {
                              if (_post.status === 204) {
                                _ui["default"].createAlert("success", "Successfully made disconnect attempt to ".concat(printer.printerName, "..."), 3000, "Clicked");
                              } else {
                                _ui["default"].createAlert("error", "There was an issue disconnecting to ".concat(printer.printerName, " are you sure it's online?"), 3000, "Clicked");
                              }
                            } else {
                              _ui["default"].createAlert("error", "No response from ".concat(printer.printerName, ", is it online???"), 3000, "Clicked");
                            }

                          case 6:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  function callback(_x4) {
                    return _callback.apply(this, arguments);
                  }

                  return callback;
                }()
              });

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3) {
      return _ref.apply(this, arguments);
    };
  }()); //Re-Sync printer

  document.getElementById("printerSyncButton-".concat(printer._id)).addEventListener("click", /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(e) {
      var data, post;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              e.target.innerHTML = "<i class='fas fa-sync fa-spin'></i>";
              e.target.disabled = true;
              data = {
                id: printer._id
              };
              _context3.next = 5;
              return _octofarm["default"].post("printers/reScanOcto", data);

            case 5:
              post = _context3.sent;
              _context3.next = 8;
              return post.json();

            case 8:
              post = _context3.sent;

              if (post.msg.status !== "error") {
                _ui["default"].createAlert("success", post.msg.msg, 3000, "clicked");
              } else {
                _ui["default"].createAlert("error", post.msg.msg, 3000, "clicked");
              }

              e.target.innerHTML = "<i class='fas fa-sync'></i>";
              e.target.disabled = false;

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x5) {
      return _ref2.apply(this, arguments);
    };
  }());
}

function checkQuickConnectState(printer) {
  document.getElementById("printerQuickConnect-" + printer._id).disabled = printer.printerState.colour.category === "Offline";

  if (typeof printer.connectionOptions !== "undefined") {
    if (printer.connectionOptions.portPreference === null || printer.connectionOptions.baudratePreference === null || printer.connectionOptions.printerProfilePreference === null) {
      document.getElementById("printerQuickConnect-" + printer._id).disabled = true;
    }
  } else {
    document.getElementById("printerQuickConnect-" + printer._id).disabled = true;
  }

  if (printer.printerState.colour.category !== "Offline" && printer.printerState.colour.category === "Disconnected" || printer.printerState.colour.category === "Error!") {
    printerQuickDisconnected(printer._id);
  } else if (printer.printerState.colour.category !== "Offline" && printer.printerState.colour.category !== "Disconnected" && !printer.printerState.colour.category !== "Error!") {
    printerQuickConnected(printer._id);
  } else {
    printerQuickDisconnected(printer._id);
  }
}

},{"../../functions/ui":4,"../../octofarm":18,"../../octoprint":19,"../powerButton.js":13}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Queue = /*#__PURE__*/function () {
  function Queue() {
    _classCallCheck(this, Queue);

    this.data = [];
  }

  _createClass(Queue, [{
    key: "add",
    value: function add(record) {
      record.active = false;
      this.data.push(record);
    }
  }, {
    key: "remove",
    value: function remove() {
      this.data.shift();
    }
  }, {
    key: "first",
    value: function first() {
      return this.data[0];
    }
  }, {
    key: "activate",
    value: function activate(index) {
      this.data[index].active = true;
    }
  }, {
    key: "size",
    value: function size() {
      return this.data.length;
    }
  }, {
    key: "all",
    value: function all() {
      var _this = this;

      var res = [];
      this.data.forEach(function (d, index) {
        res.push(_this.data[index]);
      });
      return res;
    }
  }]);

  return Queue;
}();

exports["default"] = Queue;

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = currentOperations;

var _calc = _interopRequireDefault(require("../functions/calc.js"));

var _octoprint = _interopRequireDefault(require("../octoprint.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var printers = [];

var resetFile = function resetFile(id) {
  var i = _.findIndex(printers, function (o) {
    return o._id == id;
  });

  _octoprint["default"].file(printers[i], printers[i].currentJob.filePath, 'load');
};

var rePrint = function rePrint(id) {
  var i = _.findIndex(printers, function (o) {
    return o._id == id;
  });

  _octoprint["default"].file(printers[i], printers[i].currentJob.filePath, 'print');
};

var currentHarvest = document.querySelectorAll("[id^='currentHarvest-']");
currentHarvest.forEach(function (harvest) {
  harvest.addEventListener('click', function (e) {
    var id = harvest.id.split('-');
    resetFile(id[1]);
  });
});
var currentRestartPrint = document.querySelectorAll("[id^='restartCurrentPrint-']");
currentRestartPrint.forEach(function (harvest) {
  harvest.addEventListener('click', function (e) {
    var id = harvest.id.split('-');
    rePrint(id[1]);
  });
});

function currentOperations(currentOperations, currentOperationsCount, printerInfo) {
  printers = printerInfo;

  if (currentOperations.length === 0) {
    var currentCards = document.querySelectorAll("[id^='currentOpCard-']");
    currentCards.forEach(function (card) {
      card.remove();
    });
  }

  currentOperationsCount = currentOperationsCount;
  document.getElementById('completeCount').innerHTML = 'Complete: ' + currentOperationsCount.complete;
  document.getElementById('idleCount').innerHTML = 'Idle: ' + currentOperationsCount.idle;
  document.getElementById('activeCount').innerHTML = 'Active: ' + currentOperationsCount.active;
  document.getElementById('disconCount').innerHTML = 'Disconnected: ' + currentOperationsCount.disconnected;
  document.getElementById('offlineCount').innerHTML = 'Offline: ' + currentOperationsCount.offline;
  document.getElementById('farmProgress').innerHTML = currentOperationsCount.farmProgress + '%';
  document.getElementById('farmProgress').style = "width: ".concat(currentOperationsCount.farmProgress, "%");
  document.getElementById('farmProgress').classList = "progress-bar progress-bar-striped bg-".concat(currentOperationsCount.farmProgressColour);
  currentOperations = _.orderBy(currentOperations, ['progress'], ['desc']);
  currentOperations.forEach(function (current, index) {
    // Generate future time
    var currentDate = new Date();
    currentDate = currentDate.getTime();
    var futureDateString = new Date(currentDate + current.timeRemaining * 1000).toDateString();
    var futureTimeString = new Date(currentDate + current.timeRemaining * 1000).toTimeString();
    futureTimeString = futureTimeString.substring(0, 8);
    var dateComplete = futureDateString + ': ' + futureTimeString;
    var finishedPrint = "<button id='currentHarvest-".concat(current.index, "' type='button' title=\"Clear your finished print from current operations\" class='tag btn btn-success btn-sm mt-0 pt-0 pb-0'>Print Harvested?</button>");
    var restartPrint = "<button id='restartCurrentPrint-".concat(current.index, "' type='button' title=\"Restart your current selected print\" class='tag btn btn-warning btn-sm mt-0 pt-0 pb-0'>Restart Print</button>");
    var fileName = null;

    if (_typeof(current.fileName) !== undefined) {
      fileName = current.fileName.replace(".gcode", "");

      if (fileName.length > 15) {
        fileName.substring(0, 16);
      }
    } // check if exists, create if not....


    if (document.getElementById('currentOpCard-' + current.index)) {
      if (current.progress === 100) {
        document.getElementById('finishedPrint-' + current.index).classList.remove('d-none');
        document.getElementById('futureDate-' + current.index).classList.add('d-none');
        document.getElementById('currentRestart-' + current.index).classList.remove('d-none');
        document.getElementById('currentTime-' + current.index).classList.add('d-none');
        document.getElementById('currentProgressMain-' + current.index).classList.add('d-none');
      } else {
        document.getElementById('finishedPrint-' + current.index).classList.add('d-none');
        document.getElementById('futureDate-' + current.index).classList.remove('d-none');
        document.getElementById('currentRestart-' + current.index).classList.add('d-none');
        document.getElementById('currentTime-' + current.index).classList.remove('d-none');
        document.getElementById('currentProgressMain-' + current.index).classList.remove('d-none');
      }

      var progress = document.getElementById('currentProgress-' + current.index);
      document.getElementById('currentTime-' + current.index).innerHTML = _calc["default"].generateTime(current.timeRemaining);
      progress.style = "width: ".concat(current.progress, "%");
      progress.innerHTML = current.progress + '%';
      progress.className = "progress-bar progress-bar-striped bg-".concat(current.progressColour);
    } else {
      document.getElementById('currentOperationsBody').insertAdjacentHTML('beforeend', "\n                <div id=\"currentOpCard-".concat(current.index, "\"\n                class=\"card card-block text-white bg-secondary d-inline-block\"\n                style=\"min-width: 200px; max-width: 200px;\"\n              >\n                  <div class=\"card-header pb-1 pt-1 pl-2 pr-2\">\n                     ").concat(current.name, "</div>\n                  <div class=\"card-body  pb-0 pt-2 pl-2 pr-2\">\n                  <h6 id=\"currentFile-").concat(current.index, "\" class=\"pb-0 text-center\" style=\"font-size:0.6rem;\"> ").concat(fileName, " </h6>\n                  <h6 id=\"currentRestart-").concat(current.index, "\" class=\"pb-0 text-center d-none\" style=\"font-size:0.6rem;\">").concat(restartPrint, "</h6>\n                  <h6 id=\"currentTime-").concat(current.index, "\" class=\"pb-0 text-center\" style=\"font-size:0.6rem;\">").concat(_calc["default"].generateTime(current.timeRemaining), "</h6>\n        <h6 id=\"futureDate-").concat(current.index, "\" class=\"pb-0 text-center\" style=\"font-size:0.6rem;\"> ").concat(dateComplete, " </h6>\n        <h6 id=\"finishedPrint-").concat(current.index, "\" class=\"pb-0 text-center d-none\" style=\"font-size:0.6rem;\"> ").concat(finishedPrint, " </h6>\n                    <div id=\"currentProgressMain-").concat(current.index, "\" class=\"progress\">\n                      <div id=\"currentProgress-").concat(current.index, "\"\n                        class=\"progress-bar progress-bar-striped bg-").concat(current.progressColour, "\"\n                        role=\"progressbar\"\n                        style=\"width: ").concat(current.progress, "%\"\n                        aria-valuenow=\"").concat(current.progress, "\"\n                        aria-valuemin=\"0\"\n                        aria-valuemax=\"100\"\n                      >\n                      ").concat(current.progress, "%\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                "));
      document.getElementById('currentHarvest-' + current.index).addEventListener('click', function (e) {
        var id = document.getElementById('currentHarvest-' + current.index).id.split('-');
        resetFile(id[1]);
      });
      document.getElementById('restartCurrentPrint-' + current.index).addEventListener('click', function (e) {
        var id = document.getElementById('restartCurrentPrint-' + current.index).id.split('-');
        rePrint(id[1]);
      });
    }

    document.getElementById('currentOpCard-' + current.index).style.order = index;
    var currentCards = document.querySelectorAll("[id^='currentOpCard-']");
    var curr = [];
    currentOperations.forEach(function (cur) {
      curr.push(cur.index);
    });
    var cards = [];
    currentCards.forEach(function (card) {
      var ca = card.id.split('-');
      cards.push(ca[1]);
    });

    var remove = _.difference(cards, curr);

    remove.forEach(function (rem) {
      document.getElementById('currentOpCard-' + rem).remove();
    });
  });
}

},{"../functions/calc.js":1,"../octoprint.js":19}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

var _octoprint = _interopRequireDefault(require("../octoprint.js"));

var _ui = _interopRequireDefault(require("../functions/ui.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function getButton(button) {
  return "\n    <button id=\"gcode-".concat(button._id, "\" title=\"").concat(button.description, "\" type=\"button\" class=\"btn btn-primary\">").concat(button.name, "</button>\n    ");
}

var CustomGenerator = /*#__PURE__*/function () {
  function CustomGenerator() {
    _classCallCheck(this, CustomGenerator);
  }

  _createClass(CustomGenerator, null, [{
    key: "generateButtons",
    value: function () {
      var _generateButtons = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(printers) {
        var _this = this;

        var customScripts, area;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _octofarm["default"].get("settings/customGcode");

              case 2:
                customScripts = _context.sent;
                _context.next = 5;
                return customScripts.json();

              case 5:
                customScripts = _context.sent;
                //Draw Scripts
                area = document.getElementById("customGcodeCommandsArea");

                if (area) {
                  customScripts.forEach(function (scripts) {
                    var button = getButton(scripts);
                    area.insertAdjacentHTML("beforeend", button);
                    document.getElementById("gcode-" + scripts._id).addEventListener("click", function (e) {
                      _this.fireCommand(scripts._id, scripts.gcode, printers);
                    });
                  });
                }

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function generateButtons(_x) {
        return _generateButtons.apply(this, arguments);
      }

      return generateButtons;
    }()
  }, {
    key: "fireCommand",
    value: function () {
      var _fireCommand = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(id, script, printers) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                printers.forEach( /*#__PURE__*/function () {
                  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(printer) {
                    var opt, post;
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            opt = {
                              commands: script
                            };
                            _context2.next = 3;
                            return _octoprint["default"].post(printer, "printer/command", opt);

                          case 3:
                            post = _context2.sent;

                            if (post.status === 204) {
                              _ui["default"].createAlert("success", "Your gcode commands have successfully been sent!", 3000, "Clicked");
                            } else {
                              _ui["default"].createAlert("danger", "Your gcode failed to send! Please check the printer is able to receive these commands.", 3000, "Clicked");
                            }

                          case 5:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  }));

                  return function (_x5) {
                    return _ref.apply(this, arguments);
                  };
                }());

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function fireCommand(_x2, _x3, _x4) {
        return _fireCommand.apply(this, arguments);
      }

      return fireCommand;
    }()
  }]);

  return CustomGenerator;
}();

exports["default"] = CustomGenerator;

},{"../functions/ui.js":4,"../octofarm.js":18,"../octoprint.js":19}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkFilamentManager = checkFilamentManager;
exports.returnDropDown = returnDropDown;
exports.selectFilament = selectFilament;

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function checkFilamentManager() {
  return _checkFilamentManager.apply(this, arguments);
} // export async function returnSelected(id, profiles) {
//   console.log("Return Selected");
//   let profileId = null;
//   const filamentManager = await checkFilamentManager();
//   if (filamentManager) {
//     profileId = _.findIndex(profiles, function (o) {
//       return o.profile.index == id.spools.profile;
//     });
//   } else {
//     profileId = _.findIndex(profiles, function (o) {
//       return o._id == id.spools.profile;
//     });
//   }
//   return `${id.spools.name} (${(id.spools.weight - id.spools.used).toFixed(
//     0
//   )}g) - ${profiles[profileId].profile.material}`;
// }


function _checkFilamentManager() {
  _checkFilamentManager = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var settings;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _octofarm["default"].get("settings/server/get");

          case 2:
            settings = _context.sent;
            _context.next = 5;
            return settings.json();

          case 5:
            settings = _context.sent;
            return _context.abrupt("return", settings.filamentManager);

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _checkFilamentManager.apply(this, arguments);
}

function returnDropDown(_x) {
  return _returnDropDown.apply(this, arguments);
}

function _returnDropDown() {
  _returnDropDown = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(history) {
    var dropDownLists;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _octofarm["default"].get("filament/get/dropDownList");

          case 2:
            dropDownLists = _context2.sent;
            _context2.next = 5;
            return dropDownLists.json();

          case 5:
            dropDownLists = _context2.sent;

            if (!history) {
              _context2.next = 10;
              break;
            }

            return _context2.abrupt("return", dropDownLists.selected.historyDropDown);

          case 10:
            return _context2.abrupt("return", dropDownLists.selected.normalDropDown);

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _returnDropDown.apply(this, arguments);
}

function selectFilament(_x2, _x3, _x4) {
  return _selectFilament.apply(this, arguments);
}

function _selectFilament() {
  _selectFilament = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(printerId, spoolId, tool) {
    var data, changedFilament;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            data = {
              tool: tool,
              printerId: printerId,
              spoolId: spoolId
            };
            _context3.next = 3;
            return _octofarm["default"].post("filament/select", data);

          case 3:
            changedFilament = _context3.sent;

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _selectFilament.apply(this, arguments);
}

},{"../octofarm.js":18}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileActions = exports["default"] = void 0;

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

var _octoprint = _interopRequireDefault(require("../octoprint.js"));

var _clientQueue = _interopRequireDefault(require("./clientQueue.js"));

var _calc = _interopRequireDefault(require("../functions/calc.js"));

var _ui = _interopRequireDefault(require("../functions/ui.js"));

var _dragAndDrop = require("../functions/dragAndDrop.js");

var _fileSorting = _interopRequireDefault(require("./fileSorting.js"));

var _printerSelect = _interopRequireDefault(require("./printerSelect.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fileUploads = new _clientQueue["default"]();
var fileSortInit = false;
var sortableFileList = null;
setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var current, currentDate, file, post, update, fileCounts, allUploads;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(fileUploads.size() > 0)) {
            _context.next = 20;
            break;
          }

          current = fileUploads.first();

          if (current.active) {
            _context.next = 20;
            break;
          }

          fileUploads.activate(0);
          currentDate = new Date();
          _context.next = 7;
          return current.upload(current);

        case 7:
          file = _context.sent;
          file = JSON.parse(file);
          file.index = current.index;
          file.uploadDate = currentDate.getTime() / 1000;
          _context.next = 13;
          return _octofarm["default"].post("printers/newFiles", file);

        case 13:
          post = _context.sent;
          _context.next = 16;
          return FileManager.drawFile(file);

        case 16:
          update = _context.sent;
          fileUploads.remove();
          fileCounts = document.getElementById("fileCounts-".concat(current.index));

          if (fileCounts && fileCounts.innerHTML == 1) {
            fileCounts.innerHTML = " ".concat(0);
          }

        case 20:
          allUploads = fileUploads.all();
          allUploads.forEach(function (uploads) {
            var currentCount = allUploads.reduce(function (n, up) {
              return n + (up.index == uploads.index);
            }, 0);
            var fileCounts = document.getElementById("fileCounts-".concat(uploads.index));

            if (fileCounts) {
              fileCounts.innerHTML = " ".concat(currentCount);
            }
          });

        case 22:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})), 1000);

var FileManager = /*#__PURE__*/function () {
  function FileManager() {
    _classCallCheck(this, FileManager);
  }

  _createClass(FileManager, null, [{
    key: "handleFiles",
    value: function () {
      var _handleFiles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(Afiles, printerInfo, print) {
        var i, newObject, spinner, currentFolder;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                Afiles = _toConsumableArray(Afiles);

                for (i = 0; i < Afiles.length; i++) {
                  newObject = {};
                  spinner = document.getElementById("fileUploadCountSpinner");

                  if (spinner) {
                    if (spinner.classList.contains("fa-spin")) {} else {
                      spinner.classList = "fas fa-spinner fa-spin";
                    }
                  }

                  newObject.file = Afiles[i];

                  if (typeof print !== "undefined") {
                    newObject.print = true;
                  }

                  newObject.index = printerInfo._id;
                  newObject.printerInfo = printerInfo;
                  currentFolder = document.getElementById("currentFolder");

                  if (currentFolder) {
                    newObject.currentFolder = currentFolder.innerHTML;
                  } else {
                    newObject.currentFolder = "local/";
                  }

                  newObject.upload = FileManager.fileUpload;
                  fileUploads.add(newObject);
                }

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function handleFiles(_x, _x2, _x3) {
        return _handleFiles.apply(this, arguments);
      }

      return handleFiles;
    }()
  }, {
    key: "createUpload",
    value: function createUpload(index, fileName, loaded, total) {
      var uploadSize = fileUploads.size();
      var upCount = document.getElementById("fileUploadCount");

      if (upCount) {
        upCount.innerHTML = "File Queue: ".concat(uploadSize);

        if (uploadSize < 1) {
          upCount.innerHTML = "File Queue: 0";
          var spinner = document.getElementById("fileUploadCountSpinner");

          if (spinner.classList.contains("fa-spin")) {
            spinner.classList = "fas fa-spinner";
          }
        }
      }

      var progress = document.getElementById("fileProgress-".concat(index));

      if (progress) {
        progress.classList = "progress-bar progress-bar-striped bg-warning";
        var percentLoad = loaded / total * 100;

        if (isNaN(percentLoad)) {
          percentLoad = 0;
        }

        progress.innerHTML = "".concat(Math.floor(percentLoad), "%");
        progress.style.width = "".concat(percentLoad, "%");

        if (percentLoad == 100) {
          progress.classList = "progress-bar progress-bar-striped bg-success";
        }
      }
    }
  }, {
    key: "fileUpload",
    value: function fileUpload(file) {
      return new Promise(function (resolve, reject) {
        // Grab folder location
        var _file = file,
            currentFolder = _file.currentFolder; // Grab Client Info

        var _file2 = file,
            index = _file2.index;
        var _file3 = file,
            printerInfo = _file3.printerInfo; // XHR doesn't like posting without it been a form, can't use offical octoprint api way...
        // Create form data

        var formData = new FormData();
        var path = "";

        if (currentFolder.includes("local/")) {
          path = currentFolder.replace("local/", "");
        }

        formData.append("file", file.file);
        formData.append("path", path);

        if (file.print) {
          formData.append("print", true);
        }

        var url = "".concat(printerInfo.printerURL, "/api/files/local");
        var xhr = new XMLHttpRequest();
        file = file.file;
        xhr.open("POST", url);

        xhr.upload.onprogress = function (e) {
          if (e.lengthComputable) {
            FileManager.createUpload(printerInfo._id, file.name, e.loaded, e.total);
          }
        }; // xhr.setRequestHeader("Content-Type", "multipart/form-data");


        xhr.setRequestHeader("X-Api-Key", printerInfo.apikey);

        xhr.onloadstart = function (e) {
          FileManager.createUpload(printerInfo._id, file.name, e.loaded, e.total);
        };

        xhr.onloadend = /*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(e) {
            var spinnerIcon, fileCounts;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    spinnerIcon = "<i class=\"fas fa-spinner fa-pulse\"></i> Checking Octoprint for information... <br>";
                    FileManager.createUpload(printerInfo._id, file.name, e.loaded, e.total);
                    setTimeout(function () {
                      FileManager.createUpload(printerInfo._id, file.name, e.loaded, e.total);
                    }, 5000);

                    if (this.status >= 200 && this.status < 300) {
                      resolve(xhr.response);

                      _ui["default"].createAlert("success", "".concat(file.name, " has finished uploading to Printer: ").concat(printerInfo.printerName), 3000, "clicked");

                      setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                        var updatePrinter;
                        return regeneratorRuntime.wrap(function _callee5$(_context5) {
                          while (1) {
                            switch (_context5.prev = _context5.next) {
                              case 0:
                                _context5.next = 2;
                                return _octofarm["default"].post("printers/printerInfo", {
                                  i: printerInfo._id
                                });

                              case 2:
                                updatePrinter = _context5.sent;
                                _context5.next = 5;
                                return updatePrinter.json();

                              case 5:
                                updatePrinter = _context5.sent;
                                FileManager.refreshFiles(updatePrinter, spinnerIcon);
                                setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                                  var updatePrinter;
                                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                    while (1) {
                                      switch (_context4.prev = _context4.next) {
                                        case 0:
                                          _context4.next = 2;
                                          return _octofarm["default"].post("printers/printerInfo", {
                                            i: printerInfo._id
                                          });

                                        case 2:
                                          updatePrinter = _context4.sent;
                                          _context4.next = 5;
                                          return updatePrinter.json();

                                        case 5:
                                          updatePrinter = _context4.sent;
                                          FileManager.refreshFiles(updatePrinter, spinnerIcon);
                                          setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                                            var updatePrinter;
                                            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                                              while (1) {
                                                switch (_context3.prev = _context3.next) {
                                                  case 0:
                                                    _context3.next = 2;
                                                    return _octofarm["default"].post("printers/printerInfo", {
                                                      i: printerInfo._id
                                                    });

                                                  case 2:
                                                    updatePrinter = _context3.sent;
                                                    _context3.next = 5;
                                                    return updatePrinter.json();

                                                  case 5:
                                                    updatePrinter = _context3.sent;
                                                    FileManager.refreshFiles(updatePrinter, "");

                                                  case 7:
                                                  case "end":
                                                    return _context3.stop();
                                                }
                                              }
                                            }, _callee3);
                                          })), 5000);

                                        case 8:
                                        case "end":
                                          return _context4.stop();
                                      }
                                    }
                                  }, _callee4);
                                })), 5000);

                              case 8:
                              case "end":
                                return _context5.stop();
                            }
                          }
                        }, _callee5);
                      })), 5500);
                    } else {
                      fileUploads.remove();
                      fileCounts = document.getElementById("fileCounts-".concat(index));

                      if (fileCounts && fileCounts.innerHTML == 1) {
                        fileCounts.innerHTML = " ".concat(0);
                      }

                      resolve(xhr.response);

                      _ui["default"].createAlert("error", "Sorry but ".concat(file.name, " could not be uploaded... is CORS enabled and OctoPrint online?"), 3000, "clicked");
                    }

                  case 4:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          return function (_x4) {
            return _ref2.apply(this, arguments);
          };
        }();

        xhr.onerror = function () {
          resolve(xhr.response);

          _ui["default"].createAlert("error", "Sorry but ".concat(file.name, " could not be uploaded... is CORS enabled and OctoPrint online?"), 3000, "");
        };

        if (file.name.includes(".gcode")) {
          xhr.send(formData);
        } else {
          _ui["default"].createAlert("error", "Sorry but ".concat(file.name, " is not a gcode file, could not be uploading."), 3000, "");
        }
      });
    }
  }, {
    key: "actionBtnGate",
    value: function actionBtnGate(printer, btn) {
      var data = btn.split("*");
      var action = data[1];
      var filePath = data[2];

      if (action === "fileActionStart") {
        FileActions.startPrint(printer, filePath);
      } else if (action === "fileActionSelect") {
        FileActions.selectFile(printer, filePath);
      } else if (action === "fileActionUpdate") {
        FileActions.updateFile(printer, btn, filePath);
      } else if (action === "fileActionMove") {
        FileActions.moveFile(printer, filePath);
      } else if (action === "fileActionDownload") {} else if (action === "fileActionDelete") {
        FileActions.deleteFile(printer, filePath);
      } else if (action === "folderActionMove") {
        FileActions.moveFolder(printer, filePath);
      } else if (action === "folderActionDelete") {
        FileActions.deleteFolder(printer, filePath);
      }
    }
  }, {
    key: "reSyncFiles",
    value: function () {
      var _reSyncFiles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(e, printer) {
        var done, how, flashReturn;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                e.target.innerHTML = "<i class='fas fa-sync fa-spin'></i> Re-Syncing...";
                _context7.next = 3;
                return _octofarm["default"].post("printers/resyncFile", {
                  i: printer._id
                });

              case 3:
                done = _context7.sent;
                _context7.next = 6;
                return done.json();

              case 6:
                how = _context7.sent;

                flashReturn = function flashReturn() {
                  e.target.classList = "btn btn-primary mb-0";
                  e.target.innerHTML = "<i class='fas fa-sync'></i> Re-Sync";
                };

                if (how) {
                  e.target.classList = "btn btn-primary mb-0";
                  e.target.innerHTML = "<i class='fas fa-sync'></i> Re-Sync";
                  setTimeout(flashReturn, 500);
                } else {
                  e.target.classList = "btn btn-primary mb-0";
                  e.target.innerHTML = "<i class='fas fa-sync'></i> Re-Sync";
                  setTimeout(flashReturn, 500);
                }

                FileManager.updateFileList(printer._id);

              case 10:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function reSyncFiles(_x5, _x6) {
        return _reSyncFiles.apply(this, arguments);
      }

      return reSyncFiles;
    }()
  }, {
    key: "updateFileList",
    value: function () {
      var _updateFileList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(index) {
        var printer;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return _octofarm["default"].post("printers/printerInfo", {
                  i: index
                });

              case 2:
                printer = _context8.sent;
                _context8.next = 5;
                return printer.json();

              case 5:
                printer = _context8.sent;

                _fileSorting["default"].loadSort(printer); //FileManager.drawFiles(printer);


                return _context8.abrupt("return", "done");

              case 8:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function updateFileList(_x7) {
        return _updateFileList.apply(this, arguments);
      }

      return updateFileList;
    }()
  }, {
    key: "openFolder",
    value: function openFolder(folder, target, printer) {
      if (typeof target !== "undefined" && target.type === "button") {
        return;
      }

      if (typeof folder !== "undefined") {
        folder = folder.replace("file-", "");
        document.getElementById("currentFolder").innerHTML = "local/".concat(folder);
        FileManager.updateFileList(printer._id);
      } else {
        var currentFolder = document.getElementById("currentFolder").innerHTML;

        if (currentFolder != "local") {
          var previousFolder = currentFolder.substring(0, currentFolder.lastIndexOf("/"));
          document.getElementById("currentFolder").innerHTML = previousFolder;
          FileManager.updateFileList(printer._id);
        }
      }
    }
  }, {
    key: "drawFile",
    value: function () {
      var _drawFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(file) {
        var fileElem, fileDate, dateString, timeString, f, printer, fileActionBtns;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.prev = 0;
                fileElem = document.getElementById("fileList-".concat(file.index));
                fileDate = new Date(file.uploadDate * 1000);
                dateString = fileDate.toDateString();
                timeString = fileDate.toTimeString().substring(0, 8);
                fileDate = "".concat(dateString, " ").concat(timeString);
                f = " <div\n            id=\"file-".concat(file.files.local.path, "\"\n            href=\"#\"\n          class=\"list-group-item list-group-item-action flex-column align-items-start bg-secondary\"\n            style=\"display: block;\n            padding: 0.7rem 0.1rem;\"\n            >\n            <div class=\"row\">\n                <div\n                id=\"fileThumbnail-").concat(file.files.local.path, "\"\n          class=\"col-lg-2\"\n            style=\"display:flex; justify-content:center; align-items:center;\"\n                >\n                <center><i class=\"fas fa-file-code fa-2x\"></i></center>\n                </div>\n                <div class=\"col-lg-10\">\n                <div class=\"row\">\n                <div class=\"col-12\">\n                <h5 class=\"mb-1 name\">").concat(file.files.local.name.replace("/_/g", " "), "</h5>         \n                </div>\n                </div>\n                <div class=\"row\">\n                <div class=\"col-12\">\n                <p class=\"mb-1 float-right\">\n                  <span title=\"File specific success / failure rate from OctoPrint\" id=\"fileHistoryRate-").concat(file.files.local.path, "\"><i class=\"fas fa-thumbs-up\"></i> <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i> / <i class=\"fas fa-thumbs-down\"></i> <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i></span><br>\n                <i class=\"fas fa-stopwatch\"></i> \n                <span class=\"time\" id=\"fileTime-").concat(file.files.local.path, "\">\n                <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i></span> <br> \n                <i class=\"fas fa-dollar-sign\"></i> \n                <span title=\"Expected Printer Cost\" class=\"cost\" id=\"fileCost-").concat(file.files.local.path, "\">  <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i></span>  </span>    <br> \n            <span title=\"Expected Filament Cost\" > </span>\n\n                </p>\n                <p class=\"mb-1 float-left\">\n                <i class=\"fas fa-clock\"></i><span id=\"fileDateClean-").concat(file.files.local.path, "\" class=\"date d-none\"> ").concat(file.uploadDate, "</span><span id=\"fileDate-").concat(file.files.local.path, "\"> ").concat(fileDate, "</span><br>\n                <i class=\"fas fa-hdd\"></i><span class=\"size\" id=\"fileSize-").concat(file.files.local.path, "\">  <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i></span> </span> <br>\n            <span class=\"usage\" title=\"Expected Filament Usage/Cost\" id=\"fileTool-").concat(file.files.local.path, "\">  <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i></span>  </span>\n                </p> \n                </div>\n                </div>\n                </div>\n                <div class=\"col-lg-12\">\n                <div\n          class=\"d-flex btn-group flex-wrap btn-group-sm\"\n            role=\"group\"\n            aria-label=\"Basic example\"\n                >\n                <button\n            title=\"Re-Sync File\"\n            id=\"").concat(file.index, "*fileActionUpdate*").concat(file.files.local.path, "\"\n            role=\"button\"\n          class=\"btn btn-dark\"\n                >\n                <i class=\"fas fa-sync\"></i> Re-Sync\n                </button>\n                <button           title=\"Start printing file\"\n            id=\"").concat(file.index, "*fileActionStart*").concat(file.files.local.path, "\" type=\"button\" class=\"btn btn-success\">\n          <i class=\"fas fa-play\"></i> Start\n              </button>\n              <button  title=\"Select file\" id=\"").concat(file.index, "*fileActionSelect*").concat(file.files.local.path, "\" type=\"button\" class=\"btn btn-info\">\n        <i class=\"fas fa-file-upload\"></i> Select\n            </button>\n            <button          title=\"Move file\" id=\"").concat(file.index, "*fileActionMove*").concat(file.files.local.path, "\" type=\"button\" class=\"btn btn-warning\">\n      <i class=\"fas fa-people-carry\"></i> Move\n          </button>\n          <button          title=\"Download file\" onclick=\"window.open('").concat(file.files.local.refs.download, "')\" type=\"button\" class=\"btn btn-dark\">\n    <i class=\"fas fa-download\"></i> Download\n        </button>\n        <button title=\"Delete file\" id=\"").concat(file.index, "*fileActionDelete*").concat(file.files.local.path, "\" type=\"button\" class=\"btn btn-danger\">\n  <i class=\"fas fa-trash-alt\"></i> Delete\n      </button>\n      </div>\n      </div>\n      </div>\n      </div>\n      </div>");
                fileElem.insertAdjacentHTML("afterbegin", f);
                _context10.next = 10;
                return _octofarm["default"].post("printers/printerInfo", {
                  i: file.index
                });

              case 10:
                printer = _context10.sent;
                _context10.next = 13;
                return printer.json();

              case 13:
                printer = _context10.sent;
                fileActionBtns = document.querySelectorAll("[id*='*fileAction']");
                fileActionBtns.forEach(function (btn) {
                  // Gate Keeper listener for file action buttons
                  if (btn.id.includes(printer._id)) {
                    btn.addEventListener("click", /*#__PURE__*/function () {
                      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(e) {
                        return regeneratorRuntime.wrap(function _callee9$(_context9) {
                          while (1) {
                            switch (_context9.prev = _context9.next) {
                              case 0:
                                FileManager.actionBtnGate(printer, btn.id);

                              case 1:
                              case "end":
                                return _context9.stop();
                            }
                          }
                        }, _callee9);
                      }));

                      return function (_x9) {
                        return _ref6.apply(this, arguments);
                      };
                    }());
                  }
                });
                _context10.next = 21;
                break;

              case 18:
                _context10.prev = 18;
                _context10.t0 = _context10["catch"](0);
                console.log(_context10.t0);

              case 21:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, null, [[0, 18]]);
      }));

      function drawFile(_x8) {
        return _drawFile.apply(this, arguments);
      }

      return drawFile;
    }()
  }, {
    key: "refreshFiles",
    value: function () {
      var _refreshFiles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(printer, spinnerIcon) {
        var _loop, i, _ret;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _loop = function _loop(i) {
                  var _document$getElementB;

                  var file = printer.fileList.fileList[i];
                  var currentFolder = (_document$getElementB = document.getElementById("currentFolder")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.innerHTML;

                  if (!currentFolder) {
                    // Null-ref is tolerable
                    return "continue";
                  }

                  if (currentFolder.includes("local/")) {
                    currentFolder = currentFolder.replace("local/", "");
                  }

                  if (file.path === currentFolder) {
                    if (document.getElementById("file-".concat(file.fullPath))) {
                      var toolInfo = "";
                      file.toolUnits.forEach(function (unit, index) {
                        toolInfo += "<i class=\"fas fa-weight\"></i> ".concat(unit, " / <i class=\"fas fa-dollar-sign\"></i> Cost: ").concat(file.toolCosts[index], "<br>");
                      });
                      var thumbnail = "<center><i class=\"fas fa-file-code fa-2x\"></i></center>";

                      if (typeof file.thumbnail !== "undefined" && file.thumbnail !== null) {
                        thumbnail = "<center><img src='".concat(printer.printerURL, "/").concat(file.thumbnail, "' width=\"100%\"></center>");
                      }

                      var fileDate = new Date(file.uploadDate * 1000);
                      var dateString = fileDate.toDateString();
                      var timeString = fileDate.toTimeString().substring(0, 8);
                      fileDate = "".concat(dateString, " ").concat(timeString);
                      document.getElementById("fileHistoryRate-" + file.fullPath).innerHTML = spinnerIcon + "<i class=\"fas fa-thumbs-up\"></i> 0 / <i class=\"fas fa-thumbs-down\"></i> 0";
                      document.getElementById("fileDate-".concat(file.fullPath)).innerHTML = " ".concat(fileDate);
                      document.getElementById("fileSize-".concat(file.fullPath)).innerHTML = " ".concat(_calc["default"].bytes(file.fileSize));
                      document.getElementById("fileTool-".concat(file.fullPath)).innerHTML = " ".concat(toolInfo);
                      document.getElementById("fileTime-".concat(file.fullPath)).innerHTML = " ".concat(_calc["default"].generateTime(file.expectedPrintTime));
                      document.getElementById("fileCost-".concat(file.fullPath)).innerHTML = " " + "Print Cost: ".concat(file.printCost);
                      document.getElementById("fileThumbnail-".concat(file.fullPath)).innerHTML = " ".concat(thumbnail);
                      document.getElementById("fileDateClean-".concat(file.fullPath)).innerHTML = file.uploadDate;
                    }
                  }
                };

                i = 0;

              case 2:
                if (!(i < printer.fileList.fileList.length)) {
                  _context11.next = 9;
                  break;
                }

                _ret = _loop(i);

                if (!(_ret === "continue")) {
                  _context11.next = 6;
                  break;
                }

                return _context11.abrupt("continue", 6);

              case 6:
                i++;
                _context11.next = 2;
                break;

              case 9:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      function refreshFiles(_x10, _x11) {
        return _refreshFiles.apply(this, arguments);
      }

      return refreshFiles;
    }()
  }, {
    key: "drawFiles",
    value: function drawFiles(printer, recursive) {
      try {
        var fileElem = document.getElementById("fileList-".concat(printer._id));

        if (fileElem) {
          var fileList = printer.fileList;

          if (printer.systemChecks.cleaning.file.status === "danger") {
            fileElem.innerHTML = "\n            <div class=\"noStorage  text-center\"><i class=\"fas fa-file-code fa-5x\"></i><br><h5>There are no files in local storage...</h5></div>\n      ";
          } else {
            fileElem.innerHTML = "";
            var currentFolder = document.getElementById("currentFolder").innerHTML;

            if (currentFolder.includes("local/")) {
              currentFolder = currentFolder.replace("local/", "");
            } // then draw folders


            if (fileList.folderList.length > 0) {
              fileList.folderList.forEach(function (folder) {
                if (folder.path == currentFolder) {
                  fileElem.insertAdjacentHTML("beforeend", "<a\n              id=\"file-".concat(folder.name, "\"\n              href=\"#\"\n              class=\"list-group-item list-group-item-action flex-column align-items-start bg-dark folderAction\"\n              style=\"display: block;\n                padding: 0.7rem 0.1rem;\"\n            >\n              <div class=\"row\">\n                <div\n                  class=\"col-lg-1\"\n                  style=\"display:flex; justify-content:center; align-items:center;\"\n                >\n                  <center><i class=\"fas fa-folder fa-2x\"></i></center>\n                </div>\n                <div class=\"col-lg-11\">\n                  <small class=\"float-right\"\n                    ><!--Display file and folder count here eventually--></small\n                  >\n                  <div class=\"d-flex w-100 justify-content-between\">\n                    <h5 class=\"mb-1 float-left\">\n                      ").concat(folder.display, "\n                    </h5>\n                    <div\n                      class=\"float-right btn-group flex-wrap btn-group-sm\"\n                      role=\"group\"\n                      aria-label=\"Basic example\"\n                    >\n                      <button id=\"").concat(printer._id, "*folderActionMove*").concat(folder.name, "\" type=\"button\" class=\"btn btn-warning\">\n                        <i class=\"fas fa-people-carry\"></i> Move\n                      </button>\n                      <button id=\"").concat(printer._id, "*folderActionDelete*").concat(folder.name, "\" type=\"button\" class=\"btn btn-danger\">\n                        <i class=\"fas fa-trash-alt\"></i> Delete\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </a>\n         \n            "));
                }
              });
            }

            if (fileList.fileList.length > 0) {
              fileList.fileList.forEach(function (file) {
                var toolInfo = "";
                file.toolUnits.forEach(function (unit, index) {
                  toolInfo += "<i class=\"fas fa-weight\"></i> ".concat(unit, " / <i class=\"fas fa-dollar-sign\"></i> Cost: ").concat(file.toolCosts[index], "<br>");
                });
                var thumbnail = "<center><i class=\"fas fa-file-code fa-2x\"></i></center>";

                if (typeof file.thumbnail !== "undefined" && file.thumbnail !== null) {
                  thumbnail = "<center><img src='".concat(printer.printerURL, "/").concat(file.thumbnail, "' width=\"100%\"></center>");
                }

                var fileDate = new Date(file.uploadDate * 1000);
                var dateString = fileDate.toDateString();
                var timeString = fileDate.toTimeString().substring(0, 8);
                var bgColour = "bg-secondary";

                if (file.last === true) {
                  bgColour = "bg-dark-success";
                } else if (file.last === false) {
                  bgColour = "bg-dark-failed";
                }

                fileDate = "".concat(dateString, " ").concat(timeString);
                var f = " <div\n            id=\"file-".concat(file.fullPath, "\"\n            href=\"#\"\n          class=\"list-group-item list-group-item-action flex-column align-items-start ").concat(bgColour, "\"\n            style=\"display: block;\n            padding: 0.7rem 0.1rem;\"\n            >\n            <div class=\"row\">\n                <div\n                            id=\"fileThumbnail-").concat(file.fullPath, "\"\n          class=\"col-lg-2\"\n            style=\"display:flex; justify-content:center; align-items:center;\"\n                >\n                ").concat(thumbnail, "\n                </div>\n                <div class=\"col-lg-10\">\n                <div class=\"row\">\n                <div class=\"col-12\">\n                <h5 class=\"mb-1 name\">").concat(file.display, "</h5>         \n                <small class=\"mb-1 name\">").concat(file.fullPath, "</small>         \n                </div>\n                </div>\n                <div class=\"row\">\n                <div class=\"col-12\">\n                <p class=\"mb-1 float-right\">\n                <span title=\"File specific success / failure rate from OctoPrint\" id=\"fileHistoryRate-").concat(file.fullPath, "\"><i class=\"fas fa-thumbs-up\"></i> ").concat(file.success, " / <i class=\"fas fa-thumbs-down\"></i> ").concat(file.failed, "</span><br>\n                <i class=\"fas fa-stopwatch\"></i> \n                <span class=\"time\" id=\"fileTime-").concat(file.fullPath, "\">\n                    ").concat(_calc["default"].generateTime(file.expectedPrintTime), "</span> <br> \n                <i class=\"fas fa-dollar-sign\"></i> \n                <span title=\"Expected Printer Cost\" class=\"cost\" id=\"fileCost-").concat(file.fullPath, "\"> Print Cost: ").concat(file.printCost, " </span>    <br> \n            <span title=\"Expected Filament Cost\"> </span>\n\n                </p>\n                <p class=\"mb-1 float-left\">\n                <i class=\"fas fa-clock\"></i><span id=\"fileDateClean-").concat(file.fullPath, "\" class=\"date d-none\"> ").concat(file.uploadDate, "</span><span id=\"fileDate-").concat(file.fullPath, "\"> ").concat(fileDate, "</span><br>\n                <i class=\"fas fa-hdd\"></i><span class=\"size\" id=\"fileSize-").concat(file.fullPath, "\"> ").concat(_calc["default"].bytes(file.fileSize), "</span> <br>\n            <span class=\"usage\" title=\"Expected Filament Usage/Cost\" id=\"fileTool-").concat(file.fullPath, "\"> ").concat(toolInfo, " </span>\n\n                </p> \n                </div>\n                </div>\n                </div>\n                <div class=\"col-lg-12\">\n                <div\n          class=\"d-flex btn-group flex-wrap btn-group-sm\"\n            role=\"group\"\n            aria-label=\"Basic example\"\n                >\n                <button\n            title=\"Re-Sync File\"\n            id=\"").concat(printer._id, "*fileActionUpdate*").concat(file.fullPath, "\"\n            role=\"button\"\n          class=\"btn btn-dark\"\n                >\n                <i class=\"fas fa-sync\"></i> Re-Sync\n                </button>\n                <button           title=\"Start printing file\"\n            id=\"").concat(printer._id, "*fileActionStart*").concat(file.fullPath, "\" type=\"button\" class=\"btn btn-success\">\n          <i class=\"fas fa-play\"></i> Start\n              </button>\n              <button  title=\"Select file\" id=\"").concat(printer._id, "*fileActionSelect*").concat(file.fullPath, "\" type=\"button\" class=\"btn btn-info\">\n        <i class=\"fas fa-file-upload\"></i> Select\n            </button>\n            <button          title=\"Move file\" id=\"").concat(printer._id, "*fileActionMove*").concat(file.fullPath, "\" type=\"button\" class=\"btn btn-warning\">\n      <i class=\"fas fa-people-carry\"></i> Move\n          </button>\n          <button          title=\"Download file\" onclick=\"window.open('").concat(printer.printerURL, "/downloads/files/local/").concat(file.fullPath, "')\" type=\"button\" class=\"btn btn-dark\">\n    <i class=\"fas fa-download\"></i> Download\n        </button>\n        <button title=\"Delete file\" id=\"").concat(printer.printerURL, "*fileActionDelete*").concat(file.fullPath, "\" type=\"button\" class=\"btn btn-danger\">\n  <i class=\"fas fa-trash-alt\"></i> Delete\n      </button>\n      </div>\n      </div>\n      </div>\n      </div>\n      </div>");

                if (typeof recursive !== "undefined") {
                  fileElem.insertAdjacentHTML("beforeend", f);
                } else if (file.path == currentFolder) {
                  fileElem.insertAdjacentHTML("beforeend", f);
                }
              });
            }

            FileManager.updateListeners(printer);
          }
        }
      } catch (e) {
        console.log(e);
      }
    }
  }, {
    key: "search",
    value: function search(id) {
      FileActions.search(id);
    }
  }, {
    key: "createFolder",
    value: function createFolder(printer) {
      FileActions.createFolder(printer);
    }
  }, {
    key: "updateListeners",
    value: function updateListeners(printer) {
      var fileElem = document.getElementById("fileList-".concat(printer._id));
      (0, _dragAndDrop.dragAndDropEnableMultiplePrinters)(fileElem, printer);
      var folders = document.querySelectorAll(".folderAction");
      folders.forEach(function (folder) {
        folder.addEventListener("click", function (e) {
          // Remove from UI
          FileManager.openFolder(folder.id, e.target, printer);
        });
      });
      var fileActionBtns = document.querySelectorAll("[id*='*fileAction']");
      fileActionBtns.forEach(function (btn) {
        // Gate Keeper listener for file action buttons
        btn.addEventListener("click", function (e) {
          FileManager.actionBtnGate(printer, btn.id);
        });
      });
      var folderActionBtns = document.querySelectorAll("[id*='*folderAction']");
      folderActionBtns.forEach(function (btn) {
        // Gate Keeper listener for file action buttons
        btn.addEventListener("click", function (e) {
          FileManager.actionBtnGate(printer, btn.id);
        });
      });
    }
  }, {
    key: "multiUpload",
    value: function () {
      var _multiUpload = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
        var selectedPrinters, selectedFolder, printAfterUpload, selectedFile, first, second, _second, third, grabFiles, files;

        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                grabFiles = function _grabFiles(Afiles) {
                  Afiles = _toConsumableArray(Afiles);
                  selectedFile = Afiles;
                  var files = document.getElementById("multiFileSelectedNow");
                  files.innerHTML = "";
                  selectedFile.forEach(function (file) {
                    files.insertAdjacentHTML("beforeend", "\n          <li>".concat(file.name, "</li>\n        "));
                  });
                };

                third = function _third() {
                  if (selectedFolder == "") {
                    selectedFolder = "local";
                  }

                  selectedPrinters.forEach(function (printer) {
                    var spinner = document.getElementById("fileUploadCountSpinner");

                    if (spinner.classList.contains("fa-spin")) {} else {
                      spinner.classList = "fas fa-spinner fa-spin";
                    }

                    selectedFile.forEach(function (file) {
                      var newObject = {};
                      var num = printer.value;
                      newObject.file = file;
                      newObject.index = num;
                      newObject.printerInfo = printer.printerInfo;
                      newObject.upload = FileManager.fileUpload;
                      newObject.currentFolder = selectedFolder;
                      console.log(printAfterUpload);

                      if (printAfterUpload) {
                        newObject.print = true;
                      }

                      fileUploads.add(newObject);
                    });
                  });
                };

                _second = function _second3() {
                  _second = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                    var printers;
                    return regeneratorRuntime.wrap(function _callee12$(_context12) {
                      while (1) {
                        switch (_context12.prev = _context12.next) {
                          case 0:
                            // DELETE WHEN FOLDERS WORKING
                            selectedPrinters = _printerSelect["default"].getSelected();

                            if (!(selectedPrinters.length < 2)) {
                              _context12.next = 4;
                              break;
                            }

                            _ui["default"].createAlert("error", "Please select MORE than ".concat(selectedPrinters.length, " printer(s)!"), 2000, "clicked");

                            return _context12.abrupt("return");

                          case 4:
                            document.getElementById("multiPrinterBtn").disabled = true;
                            document.getElementById("multiFolder").disabled = false;
                            document.getElementById("multiPrintersSection").classList.add("hidden");
                            document.getElementById("multiFolderSection").classList.remove("hidden");
                            document.getElementById("multiUploadFooter").innerHTML = "<button id=\"multiUpSubmitBtn\" type=\"button\" class=\"btn btn-warning float-right\">Next</button>";
                            document.getElementById("multiUpSubmitBtn").addEventListener("click", function (e) {
                              second();
                            });
                            document.getElementById("multiSelectedPrinters2").innerHTML = "";
                            _context12.next = 13;
                            return _octofarm["default"].post("printers/printerInfo", {
                              i: null
                            });

                          case 13:
                            printers = _context12.sent;
                            _context12.next = 16;
                            return printers.json();

                          case 16:
                            printers = _context12.sent;
                            selectedPrinters.forEach(function (printer, index) {
                              if (printer) {
                                var i = _.findIndex(printers, function (o) {
                                  return o._id == printer.value.toString();
                                });

                                var name = printers[i].printerName;
                                document.getElementById("multiSelectedPrinters2").insertAdjacentHTML("beforeend", "\n            [<span class=\"MultiSelected\">".concat(name, "</span>]\n            "));
                                selectedPrinters[index] = {
                                  value: printers[i]._id,
                                  printerInfo: printers[i]
                                };
                              }
                            });
                            document.getElementById("multiFolder").disabled = true;
                            document.getElementById("multiFile").disabled = false;
                            document.getElementById("multiFileSection").classList.remove("hidden");
                            document.getElementById("multiFolderSection").classList.add("hidden");
                            document.getElementById("multiUploadFooter").innerHTML = "<button id=\"multiUpSubmitBtn\" type=\"button\" class=\"btn btn-success float-right\" data-dismiss=\"modal\">Start!</button>";
                            document.getElementById("multiUpSubmitBtn").addEventListener("click", function (e) {
                              third();
                            });
                            selectedFolder = document.getElementById("multiNewFolder").value;

                            if (selectedFolder != "") {
                              selectedFolder += "";
                            }

                            document.getElementById("printOnLoadBtn").addEventListener("click", function (e) {
                              var state = null;
                              state = e.target.checked;
                              var fileBtn = document.getElementById("multiFileUploadBtn");
                              var fileBtnLabel = document.getElementById("multiFileUploadBtnLabel");

                              if (state) {
                                fileBtn.removeAttribute("multiple", "");
                                fileBtn.setAttribute("single", "");
                                fileBtnLabel.innerHTML = "<i class=\"fas fa-file-import\"></i> Upload File";
                                printAfterUpload = true;
                              } else {
                                fileBtn.setAttribute("multiple", "");
                                fileBtn.removeAttribute("single", "");
                                fileBtnLabel.innerHTML = "<i class=\"fas fa-file-import\"></i> Upload Files";
                                printAfterUpload = false;
                              }
                            });
                            document.getElementById("multiFileUploadBtn").addEventListener("change", function () {
                              grabFiles(this.files);
                            });

                          case 28:
                          case "end":
                            return _context12.stop();
                        }
                      }
                    }, _callee12);
                  }));
                  return _second.apply(this, arguments);
                };

                second = function _second2() {
                  return _second.apply(this, arguments);
                };

                first = function _first() {
                  // let boxs = document.querySelectorAll('*[id^="multiUpPrinters-"]');
                  // selectedPrinters = [].filter.call(boxs, function(el) {
                  //   return el.checked;
                  // });
                  // if (selectedPrinters.length < 2) {
                  //   UI.createAlert(
                  //     "error",
                  //     "Please select MORE than " + selectedPrinters.length + " printer(s)!",
                  //     2000,
                  //     "clicked"
                  //   );
                  //   return;
                  // }
                  document.getElementById("multiPrinterBtn").disabled = true;
                  document.getElementById("multiFolder").disabled = false;
                  document.getElementById("multiPrintersSection").classList.add("hidden");
                  document.getElementById("multiFolderSection").classList.remove("hidden");
                  document.getElementById("multiUploadFooter").innerHTML = "<button id=\"multiUpSubmitBtn\" type=\"button\" class=\"btn btn-warning float-right\">Next</button>";
                  document.getElementById("multiUpSubmitBtn").addEventListener("click", function (e) {
                    second();
                  });
                  document.getElementById("multiSelectedPrinters").innerHTML = "";
                };

                selectedPrinters = null;
                selectedFolder = "";
                printAfterUpload = false;
                selectedFile = null;

                _printerSelect["default"].create(document.getElementById("multiPrintersSection"));

                files = document.getElementById("multiFileSelectedNow");
                files.innerHTML = "";
                document.getElementById("multiPrinterBtn").disabled = false;
                document.getElementById("multiFolder").disabled = true;
                document.getElementById("multiFile").disabled = true;
                document.getElementById("multiPrintersSection").classList.remove("hidden");
                document.getElementById("multiFolderSection").classList.add("hidden");
                document.getElementById("multiFileSection").classList.add("hidden");
                document.getElementById("multiUploadFooter").innerHTML = "<button id=\"multiUpSubmitBtn\" type=\"button\" class=\"btn btn-warning float-right\">Next</button>";
                document.getElementById("multiUpSubmitBtn").addEventListener("click", function (e) {
                  second();
                });

              case 20:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));

      function multiUpload() {
        return _multiUpload.apply(this, arguments);
      }

      return multiUpload;
    }()
  }]);

  return FileManager;
}();

exports["default"] = FileManager;

var FileActions = /*#__PURE__*/function () {
  function FileActions() {
    _classCallCheck(this, FileActions);
  }

  _createClass(FileActions, null, [{
    key: "search",
    value: function () {
      var _search = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(id) {
        var printer, fileList, input, button, i, file;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return _octofarm["default"].post("printers/printerInfo", {
                  i: id
                });

              case 2:
                printer = _context14.sent;
                _context14.next = 5;
                return printer.json();

              case 5:
                printer = _context14.sent;
                fileList = document.getElementById("fileList-".concat(id));
                input = document.getElementById("searchFiles").value.toUpperCase();
                input = input.replace(/ /g, "_");

                if (input === "") {
                  // No search term so reset view
                  document.getElementById("currentFolder").value = "local/";

                  _fileSorting["default"].loadSort(printer); //FileManager.drawFiles(printer, "Recursive");

                } else {
                  document.getElementById("currentFolder").value = "local/";

                  _fileSorting["default"].loadSort(printer, "recursive"); //FileManager.drawFiles(printer, "Recursive");

                }

                button = fileList.querySelectorAll("*[id^=\"file-\"]");

                for (i = 0; i < button.length; i++) {
                  file = button[i].id.replace("file-", "");

                  if (file.toUpperCase().indexOf(input) > -1) {
                    button[i].style.display = "";
                  } else {
                    button[i].style.display = "none";
                  }
                }

              case 12:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      function search(_x12) {
        return _search.apply(this, arguments);
      }

      return search;
    }()
  }, {
    key: "createFolder",
    value: function () {
      var _createFolder = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(printer) {
        var currentFolder, formData;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                currentFolder = document.getElementById("currentFolder").innerHTML;
                formData = new FormData();

                if (currentFolder === "local") {
                  currentFolder = "";
                } else if (currentFolder.includes("local/")) {
                  currentFolder = currentFolder.replace("local/", "");
                }

                bootbox.prompt("What would you like to name your folder?", /*#__PURE__*/function () {
                  var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(result) {
                    var post, opts, update;
                    return regeneratorRuntime.wrap(function _callee15$(_context15) {
                      while (1) {
                        switch (_context15.prev = _context15.next) {
                          case 0:
                            if (!result) {
                              _context15.next = 16;
                              break;
                            }

                            formData.append("foldername", result);
                            formData.append("path", "".concat(currentFolder, "/"));
                            _context15.next = 5;
                            return _octoprint["default"].folder(printer, "local", formData);

                          case 5:
                            post = _context15.sent;

                            if (!(post.status === 201 || post.status === 200)) {
                              _context15.next = 15;
                              break;
                            }

                            opts = {
                              i: printer._id,
                              foldername: result,
                              path: currentFolder
                            };
                            _context15.next = 10;
                            return _octofarm["default"].post("printers/newFolder", opts);

                          case 10:
                            update = _context15.sent;

                            _ui["default"].createAlert("success", "Successfully created your new folder...", 3000, "clicked");

                            FileManager.updateFileList(printer._id);
                            _context15.next = 16;
                            break;

                          case 15:
                            _ui["default"].createAlert("error", "Sorry your folder couldn't be saved...", 3000, "clicked");

                          case 16:
                          case "end":
                            return _context15.stop();
                        }
                      }
                    }, _callee15);
                  }));

                  return function (_x14) {
                    return _ref7.apply(this, arguments);
                  };
                }());

              case 4:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16);
      }));

      function createFolder(_x13) {
        return _createFolder.apply(this, arguments);
      }

      return createFolder;
    }() // Needs updating when filament is brought in.

  }, {
    key: "grabUsage",
    value: function grabUsage(file) {
      if (typeof file.length === "undefined") {
        if (file.length === null || file.length.length === 0) {
          return "No Length";
        }

        return "No Length";
      }

      var usageArray = {
        totalLength: [],
        totalGrams: [],
        usage: []
      };
      file.length.forEach(function (length) {
        var radius = parseFloat(1.75) / 2;
        var volume = length / 1000 * Math.PI * radius * radius;
        var usage = volume * parseFloat(1.24);
        usageArray.totalLength.push(length / 1000);
        usageArray.totalGrams.push(usage);
        usageArray.usage.push("".concat((length / 1000).toFixed(2), "m / ").concat(usage.toFixed(2), "g"));
      });
      usageArray.totalLength = usageArray.totalLength.reduce(function (a, b) {
        return a + b;
      }, 0);
      usageArray.totalGrams = usageArray.totalGrams.reduce(function (a, b) {
        return a + b;
      }, 0);
      return usageArray;
    }
  }, {
    key: "startPrint",
    value: function () {
      var _startPrint = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(printer, filePath) {
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _octoprint["default"].file(printer, filePath, "print");

              case 1:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      }));

      function startPrint(_x15, _x16) {
        return _startPrint.apply(this, arguments);
      }

      return startPrint;
    }()
  }, {
    key: "selectFile",
    value: function selectFile(printer, filePath) {
      _octoprint["default"].file(printer, filePath, "load");
    }
  }, {
    key: "updateFile",
    value: function () {
      var _updateFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(printer, btn, fullPath) {
        var refreshBtn, btnName, done, how, flashReturn;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                refreshBtn = document.getElementById(btn);
                btnName = null;
                refreshBtn.innerHTML = "<i class=\"fas fa-sync fa-spin\"></i> Refreshing...";
                _context18.next = 5;
                return _octofarm["default"].post("printers/resyncFile", {
                  i: printer._id,
                  fullPath: fullPath
                });

              case 5:
                done = _context18.sent;
                _context18.next = 8;
                return done.json();

              case 8:
                how = _context18.sent;
                FileManager.updateFileList(printer._id);
                refreshBtn.innerHTML = "<i class=\"fas fa-sync\"></i> Refresh";

                flashReturn = function flashReturn() {
                  refreshBtn.classList = "btn btn-dark";
                };

                if (how) {
                  refreshBtn.classList = "btn btn-sm btn-success";
                  setTimeout(flashReturn, 500);
                } else {
                  refreshBtn.classList = "btn btn-sm btn-danger";
                  setTimeout(flashReturn, 500);
                }

              case 13:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));

      function updateFile(_x17, _x18, _x19) {
        return _updateFile.apply(this, arguments);
      }

      return updateFile;
    }()
  }, {
    key: "moveFile",
    value: function moveFile(printer, fullPath) {
      var inputOptions = [];
      var loc = {
        text: "local",
        value: "/"
      };
      inputOptions.push(loc);
      printer.fileList.folderList.forEach(function (folder) {
        var option = {
          text: folder.name,
          value: folder.name
        };
        inputOptions.push(option);
      });
      bootbox.prompt({
        title: "Where would you like to move the file?",
        inputType: "select",
        inputOptions: inputOptions,
        callback: function callback(result) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
            var opt, post, json, opts, updateFarm;
            return regeneratorRuntime.wrap(function _callee19$(_context19) {
              while (1) {
                switch (_context19.prev = _context19.next) {
                  case 0:
                    if (!result) {
                      _context19.next = 22;
                      break;
                    }

                    opt = {
                      command: "move",
                      destination: result
                    };
                    _context19.next = 4;
                    return _octoprint["default"].post(printer, "files/local/".concat(fullPath), opt);

                  case 4:
                    post = _context19.sent;

                    if (!(post.status === 404)) {
                      _context19.next = 9;
                      break;
                    }

                    _ui["default"].createAlert("error", "We could not find the location, does it exist?", 3000, "clicked");

                    _context19.next = 22;
                    break;

                  case 9:
                    if (!(post.status === 409)) {
                      _context19.next = 13;
                      break;
                    }

                    _ui["default"].createAlert("error", "There was a conflict, file already exists or is in use...", 3000, "clicked");

                    _context19.next = 22;
                    break;

                  case 13:
                    _context19.next = 15;
                    return post.json();

                  case 15:
                    json = _context19.sent;
                    opts = {
                      index: printer._id,
                      newPath: result,
                      fileName: json.name,
                      newFullPath: json.path
                    };

                    _ui["default"].createAlert("warning", "Moving file... please wait.", 3000, "clicked");

                    _context19.next = 20;
                    return _octofarm["default"].post("printers/moveFile", opts);

                  case 20:
                    updateFarm = _context19.sent;
                    setTimeout(function () {
                      FileManager.updateFileList(printer._id);

                      _ui["default"].createAlert("success", "Successfully moved your file...", 3000, "clicked");
                    }, 3000);

                  case 22:
                  case "end":
                    return _context19.stop();
                }
              }
            }, _callee19);
          }))();
        }
      });
    }
  }, {
    key: "deleteFile",
    value: function deleteFile(printer, fullPath) {
      bootbox.confirm({
        message: "Are you sure you want to delete ".concat(fullPath, "?"),
        buttons: {
          cancel: {
            label: "<i class=\"fa fa-times\"></i> Cancel"
          },
          confirm: {
            label: "<i class=\"fa fa-check\"></i> Confirm"
          }
        },
        callback: function callback(result) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
            return regeneratorRuntime.wrap(function _callee20$(_context20) {
              while (1) {
                switch (_context20.prev = _context20.next) {
                  case 0:
                    if (!result) {
                      _context20.next = 4;
                      break;
                    }

                    _context20.next = 3;
                    return _octoprint["default"].file(printer, fullPath, "delete");

                  case 3:
                    document.getElementById("file-".concat(fullPath)).remove();

                  case 4:
                  case "end":
                    return _context20.stop();
                }
              }
            }, _callee20);
          }))();
        }
      });
    }
  }, {
    key: "deleteFolder",
    value: function deleteFolder(printer, fullPath) {
      bootbox.confirm({
        message: "Are you sure you want to delete ".concat(fullPath, "?"),
        buttons: {
          cancel: {
            label: "<i class=\"fa fa-times\"></i> Cancel"
          },
          confirm: {
            label: "<i class=\"fa fa-check\"></i> Confirm"
          }
        },
        callback: function callback(result) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
            var opts, post, del;
            return regeneratorRuntime.wrap(function _callee21$(_context21) {
              while (1) {
                switch (_context21.prev = _context21.next) {
                  case 0:
                    opts = {
                      index: printer._id,
                      fullPath: fullPath
                    };

                    if (!result) {
                      _context21.next = 9;
                      break;
                    }

                    _context21.next = 4;
                    return _octoprint["default"]["delete"](printer, "files/local/".concat(fullPath));

                  case 4:
                    post = _context21.sent;
                    _context21.next = 7;
                    return _octofarm["default"].post("printers/removefolder", opts);

                  case 7:
                    del = _context21.sent;
                    document.getElementById("file-".concat(fullPath)).remove();

                  case 9:
                  case "end":
                    return _context21.stop();
                }
              }
            }, _callee21);
          }))();
        }
      });
    }
  }, {
    key: "moveFolder",
    value: function moveFolder(printer, fullPath) {
      var inputOptions = [];
      var loc = {
        text: "local",
        value: "/"
      };
      inputOptions.push(loc);
      printer.fileList.folderList.forEach(function (folder) {
        var option = {
          text: folder.name,
          value: folder.name
        };
        inputOptions.push(option);
      });
      bootbox.prompt({
        title: "Where would you like to move the file?",
        inputType: "select",
        inputOptions: inputOptions,
        callback: function callback(result) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
            var opt, post, json, opts, updateFarm;
            return regeneratorRuntime.wrap(function _callee22$(_context22) {
              while (1) {
                switch (_context22.prev = _context22.next) {
                  case 0:
                    if (!result) {
                      _context22.next = 22;
                      break;
                    }

                    opt = {
                      command: "move",
                      destination: result
                    };
                    _context22.next = 4;
                    return _octoprint["default"].post(printer, "files/local/".concat(fullPath), opt);

                  case 4:
                    post = _context22.sent;

                    if (!(post.status === 404)) {
                      _context22.next = 9;
                      break;
                    }

                    _ui["default"].createAlert("error", "We could not find the location, does it exist?", 3000, "clicked");

                    _context22.next = 22;
                    break;

                  case 9:
                    if (!(post.status === 409)) {
                      _context22.next = 13;
                      break;
                    }

                    _ui["default"].createAlert("error", "There was a conflict, file already exists or is in use...", 3000, "clicked");

                    _context22.next = 22;
                    break;

                  case 13:
                    _context22.next = 15;
                    return post.json();

                  case 15:
                    json = _context22.sent;
                    opts = {
                      index: printer._id,
                      oldFolder: fullPath,
                      newFullPath: result,
                      folderName: json.path
                    };

                    _ui["default"].createAlert("warning", "Moving folder please wait...", 3000, "clicked");

                    _context22.next = 20;
                    return _octofarm["default"].post("printers/moveFolder", opts);

                  case 20:
                    updateFarm = _context22.sent;
                    setTimeout(function () {
                      FileManager.updateFileList(printer._id);

                      _ui["default"].createAlert("success", "Successfully moved your file...", 3000, "clicked");
                    }, 3000);

                  case 22:
                  case "end":
                    return _context22.stop();
                }
              }
            }, _callee22);
          }))();
        }
      });
    }
  }]);

  return FileActions;
}();

exports.FileActions = FileActions;

},{"../functions/calc.js":1,"../functions/dragAndDrop.js":2,"../functions/ui.js":4,"../octofarm.js":18,"../octoprint.js":19,"./clientQueue.js":7,"./fileSorting.js":12,"./printerSelect.js":15}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fileManager = _interopRequireDefault(require("./fileManager.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var FileSorting = /*#__PURE__*/function () {
  function FileSorting() {
    _classCallCheck(this, FileSorting);
  }

  _createClass(FileSorting, null, [{
    key: "saveSort",
    value: function saveSort(meta, reverse) {
      localStorage.setItem("fileSort", JSON.stringify({
        meta: meta,
        reverse: reverse
      }));
    }
  }, {
    key: "loadSort",
    value: function loadSort(printer, recursive) {
      var fileSortStorage = JSON.parse(localStorage.getItem("fileSort"));

      if (fileSortStorage !== null) {
        var reverse = fileSortStorage.reverse;

        if (fileSortStorage.meta === "file") {
          if (typeof recursive !== "undefined") {
            this.sortFileName(printer, reverse, recursive);
          } else {
            this.sortFileName(printer, reverse);
          }
        }

        if (fileSortStorage.meta === "date") {
          if (typeof recursive !== "undefined") {
            this.sortUploadDate(printer, reverse, recursive);
          } else {
            this.sortUploadDate(printer, reverse);
          }
        }

        if (fileSortStorage.meta === "time") {
          if (typeof recursive !== "undefined") {
            this.sortPrintTime(printer, reverse, recursive);
          } else {
            this.sortPrintTime(printer, reverse);
          }
        }
      } else {
        this.sortUploadDate(printer, true);
      }

      this.setListeners(printer);
    }
  }, {
    key: "setListeners",
    value: function setListeners(printer) {
      var _this = this;

      document.getElementById("sortFileNameUp").addEventListener("click", function (e) {
        _this.sortFileName(printer, true);
      });
      document.getElementById("sortFileNameDown").addEventListener("click", function (e) {
        _this.sortFileName(printer);
      });
      document.getElementById("sortPrintTimeUp").addEventListener("click", function (e) {
        _this.sortPrintTime(printer, true);
      });
      document.getElementById("sortPrintTimeDown").addEventListener("click", function (e) {
        _this.sortPrintTime(printer);
      });
      document.getElementById("sortDateUp").addEventListener("click", function (e) {
        _this.sortUploadDate(printer);
      });
      document.getElementById("sortDateDown").addEventListener("click", function (e) {
        _this.sortUploadDate(printer, true);
      });
    }
  }, {
    key: "sortFileName",
    value: function sortFileName(printer, reverse, recursive) {
      var sortHeader = document.getElementById("fileSortDropdownMenu");
      printer.fileList.fileList = _.sortBy(printer.fileList.fileList, [function (o) {
        return o.display;
      }]);
      printer.fileList.folderList = _.sortBy(printer.fileList.folderList, [function (o) {
        return o.name;
      }]);

      if (reverse) {
        printer.fileList.fileList = printer.fileList.fileList.reverse();
        printer.fileList.folderList = printer.fileList.folderList.reverse();
        sortHeader.innerHTML = '<i class="fas fa-sort-alpha-up"></i> File Name';
        this.saveSort("file", true);
      } else {
        sortHeader.innerHTML = '<i class="fas fa-sort-alpha-down"></i> File Name';
        this.saveSort("file", false);
      }

      _fileManager["default"].drawFiles(printer, recursive);
    }
  }, {
    key: "sortUploadDate",
    value: function sortUploadDate(printer, reverse, recursive) {
      var sortHeader = document.getElementById("fileSortDropdownMenu");
      printer.fileList.fileList = _.sortBy(printer.fileList.fileList, [function (o) {
        return o.uploadDate;
      }]);
      printer.fileList.folderList = _.sortBy(printer.fileList.folderList, [function (o) {
        return o.name;
      }]);

      if (reverse) {
        printer.fileList.fileList = printer.fileList.fileList.reverse();
        printer.fileList.folderList = printer.fileList.folderList.reverse();
        sortHeader.innerHTML = '<i class="fas fa-sort-numeric-down"></i> Upload Date';
        this.saveSort("date", true);
      } else {
        sortHeader.innerHTML = '<i class="fas fa-sort-numeric-up"></i> Upload Date';
        this.saveSort("date", false);
      }

      _fileManager["default"].drawFiles(printer, recursive);
    }
  }, {
    key: "sortPrintTime",
    value: function sortPrintTime(printer, reverse, recursive) {
      var sortHeader = document.getElementById("fileSortDropdownMenu");
      printer.fileList.fileList = _.sortBy(printer.fileList.fileList, [function (o) {
        return o.expectedPrintTime;
      }]);
      printer.fileList.folderList = _.sortBy(printer.fileList.folderList, [function (o) {
        return o.name;
      }]);

      if (reverse) {
        printer.fileList.fileList = printer.fileList.fileList.reverse();
        printer.fileList.folderList = printer.fileList.folderList.reverse();
        sortHeader.innerHTML = '<i class="fas fa-sort-numeric-up"></i> Print Time';
        this.saveSort("time", false);
      } else {
        sortHeader.innerHTML = '<i class="fas fa-sort-numeric-down"></i> Print Time';
        this.saveSort("time", true);
      }

      _fileManager["default"].drawFiles(printer, recursive);
    }
  }]);

  return FileSorting;
}();

exports["default"] = FileSorting;

},{"./fileManager.js":11}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _octoprint = _interopRequireDefault(require("../octoprint.js"));

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var PowerButton = /*#__PURE__*/function () {
  function PowerButton() {
    _classCallCheck(this, PowerButton);
  }

  _createClass(PowerButton, null, [{
    key: "revealBulkPower",
    value: function revealBulkPower() {
      var bulkPowerBtn = document.getElementById("bulkPowerBtn");

      if (bulkPowerBtn) {
        if (bulkPowerBtn.classList.contains("d-none")) {
          bulkPowerBtn.classList.remove("d-none");
        }
      }
    }
  }, {
    key: "powerButtons",
    value: function () {
      var _powerButtons = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(printer) {
        var divider, powerOffPrinter, powerOnnPrinter, status, powerTogglePrinter;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                divider = document.getElementById("printerDropDownMaker-" + printer._id);

                if (printer.powerSettings.powerOffURL !== "") {
                  if (divider.classList.contains("d-none")) {
                    divider.classList.remove("d-none");
                  }

                  powerOffPrinter = document.getElementById("printerPowerOff-" + printer._id);

                  if (powerOffPrinter.classList.contains("d-none")) {
                    powerOffPrinter.classList.remove("d-none");
                    powerOffPrinter.addEventListener("click", /*#__PURE__*/function () {
                      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(event) {
                        return regeneratorRuntime.wrap(function _callee2$(_context2) {
                          while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                bootbox.confirm({
                                  message: "Are you sure you would like to power down your printer?",
                                  buttons: {
                                    confirm: {
                                      label: "Yes",
                                      className: "btn-success"
                                    },
                                    cancel: {
                                      label: "No",
                                      className: "btn-danger"
                                    }
                                  },
                                  callback: function () {
                                    var _callback = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(result) {
                                      return regeneratorRuntime.wrap(function _callee$(_context) {
                                        while (1) {
                                          switch (_context.prev = _context.next) {
                                            case 0:
                                              if (!result) {
                                                _context.next = 10;
                                                break;
                                              }

                                              _context.next = 3;
                                              return _octoprint["default"].power(printer, printer.powerSettings.powerOffURL, "Power Off", printer.powerSettings.powerOffCommand);

                                            case 3:
                                              if (!(printer.powerSettings.powerStatusURL !== "")) {
                                                _context.next = 10;
                                                break;
                                              }

                                              _context.next = 6;
                                              return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                            case 6:
                                              _context.next = 8;
                                              return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                            case 8:
                                              _context.next = 10;
                                              return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                            case 10:
                                            case "end":
                                              return _context.stop();
                                          }
                                        }
                                      }, _callee);
                                    }));

                                    function callback(_x3) {
                                      return _callback.apply(this, arguments);
                                    }

                                    return callback;
                                  }()
                                });

                              case 1:
                              case "end":
                                return _context2.stop();
                            }
                          }
                        }, _callee2);
                      }));

                      return function (_x2) {
                        return _ref.apply(this, arguments);
                      };
                    }());
                  }
                }

                if (printer.powerSettings.powerOnURL !== "") {
                  if (divider.classList.contains("d-none")) {
                    divider.classList.remove("d-none");
                  }

                  powerOnnPrinter = document.getElementById("printerPowerOn-" + printer._id);

                  if (powerOnnPrinter.classList.contains("d-none")) {
                    powerOnnPrinter.classList.remove("d-none");
                    powerOnnPrinter.addEventListener("click", /*#__PURE__*/function () {
                      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(event) {
                        return regeneratorRuntime.wrap(function _callee3$(_context3) {
                          while (1) {
                            switch (_context3.prev = _context3.next) {
                              case 0:
                                _context3.next = 2;
                                return _octoprint["default"].power(printer, printer.powerSettings.powerOnURL, "Power On", printer.powerSettings.powerOnCommand);

                              case 2:
                                _context3.next = 4;
                                return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                              case 4:
                                _context3.next = 6;
                                return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                              case 6:
                                _context3.next = 8;
                                return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                              case 8:
                              case "end":
                                return _context3.stop();
                            }
                          }
                        }, _callee3);
                      }));

                      return function (_x4) {
                        return _ref2.apply(this, arguments);
                      };
                    }());
                  }
                }

                if (!(printer.powerSettings.powerStatusURL !== "")) {
                  _context6.next = 8;
                  break;
                }

                if (divider.classList.contains("d-none")) {
                  divider.classList.remove("d-none");
                }

                _context6.next = 7;
                return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

              case 7:
                status = _context6.sent;

              case 8:
                if (printer.powerSettings.powerToggleURL !== "") {
                  if (divider.classList.contains("d-none")) {
                    divider.classList.remove("d-none");
                  }

                  powerTogglePrinter = document.getElementById("printerPower-" + printer._id);

                  if (powerTogglePrinter) {
                    if (powerTogglePrinter.disabled === true) {
                      powerTogglePrinter.disabled = false;
                      powerTogglePrinter.addEventListener("click", /*#__PURE__*/function () {
                        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(event) {
                          var _status2;

                          return regeneratorRuntime.wrap(function _callee5$(_context5) {
                            while (1) {
                              switch (_context5.prev = _context5.next) {
                                case 0:
                                  if (!(document.getElementById("printerStatus-" + printer._id).style.color === "green" || document.getElementById("printerStatus-" + printer._id).style.color === "black")) {
                                    _context5.next = 4;
                                    break;
                                  }

                                  bootbox.confirm({
                                    message: "Are you sure you would like to power down your printer?",
                                    buttons: {
                                      confirm: {
                                        label: "Yes",
                                        className: "btn-success"
                                      },
                                      cancel: {
                                        label: "No",
                                        className: "btn-danger"
                                      }
                                    },
                                    callback: function () {
                                      var _callback2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(result) {
                                        var _status;

                                        return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                          while (1) {
                                            switch (_context4.prev = _context4.next) {
                                              case 0:
                                                if (!result) {
                                                  _context4.next = 10;
                                                  break;
                                                }

                                                _context4.next = 3;
                                                return _octoprint["default"].power(printer, printer.powerSettings.powerToggleURL, "Power Toggle", printer.powerSettings.powerToggleCommand);

                                              case 3:
                                                _status = _context4.sent;
                                                _context4.next = 6;
                                                return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                              case 6:
                                                _context4.next = 8;
                                                return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                              case 8:
                                                _context4.next = 10;
                                                return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                              case 10:
                                              case "end":
                                                return _context4.stop();
                                            }
                                          }
                                        }, _callee4);
                                      }));

                                      function callback(_x6) {
                                        return _callback2.apply(this, arguments);
                                      }

                                      return callback;
                                    }()
                                  });
                                  _context5.next = 13;
                                  break;

                                case 4:
                                  _context5.next = 6;
                                  return _octoprint["default"].power(printer, printer.powerSettings.powerToggleURL, "Power Toggle", printer.powerSettings.powerToggleCommand);

                                case 6:
                                  _status2 = _context5.sent;
                                  _context5.next = 9;
                                  return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                case 9:
                                  _context5.next = 11;
                                  return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                case 11:
                                  _context5.next = 13;
                                  return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                case 13:
                                case "end":
                                  return _context5.stop();
                              }
                            }
                          }, _callee5);
                        }));

                        return function (_x5) {
                          return _ref3.apply(this, arguments);
                        };
                      }());
                    }
                  }
                }

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function powerButtons(_x) {
        return _powerButtons.apply(this, arguments);
      }

      return powerButtons;
    }()
  }, {
    key: "applyBtn",
    value: function () {
      var _applyBtn = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(printer, element) {
        var restartOctoPrint, restartHost, shutdownHost, wakeButton;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (typeof printer.otherSettings.system !== "undefined" && !document.getElementById("printerPower-" + printer._id)) {
                  if (printer.otherSettings.system.commands.serverRestartCommand !== "" && printer.otherSettings.system.commands.serverRestartCommand !== null || printer.otherSettings.system.commands.systemRestartCommand !== "" && printer.otherSettings.system.commands.systemRestartCommand !== null || printer.otherSettings.system.commands.systemShutdownCommand !== "" && printer.otherSettings.system.commands.systemShutdownCommand !== null) {
                    document.getElementById(element + printer._id).innerHTML = PowerButton.printerPowerBtn(printer._id);

                    if (printer.otherSettings.system.commands.serverRestartCommand !== "" && printer.otherSettings.system.commands.serverRestartCommand !== null) {
                      restartOctoPrint = document.getElementById("printerRestartOctoPrint-" + printer._id);
                      restartOctoPrint.classList.remove("d-none");
                      restartOctoPrint.addEventListener("click", function (event) {
                        _octoprint["default"].system(printer, "restart");
                      });
                    }

                    if (printer.otherSettings.system.commands.systemRestartCommand !== "" && printer.otherSettings.system.commands.systemRestartCommand !== null) {
                      restartHost = document.getElementById("printerRestartHost-" + printer._id);
                      restartHost.classList.remove("d-none");
                      restartHost.addEventListener("click", function (event) {
                        _octoprint["default"].system(printer, "reboot");
                      });
                    }

                    if (printer.otherSettings.system.commands.systemShutdownCommand !== "" && printer.otherSettings.system.commands.systemShutdownCommand !== null) {
                      shutdownHost = document.getElementById("printerShutdownHost-" + printer._id);
                      shutdownHost.classList.remove("d-none");
                      shutdownHost.addEventListener("click", function (event) {
                        _octoprint["default"].system(printer, "shutdown");
                      });
                    }
                  }
                }

                if (printer.powerSettings !== null && !_.isEmpty(printer.powerSettings)) {
                  if (printer.powerSettings.powerOnURL !== "") {
                    if (!document.getElementById("printerPower-" + printer._id)) {
                      if (document.getElementById(element + printer._id)) {
                        document.getElementById(element + printer._id).innerHTML = PowerButton.printerPowerBtn(printer._id);
                        PowerButton.powerButtons(printer);
                      }
                    } else {
                      PowerButton.powerButtons(printer);
                    }
                  }

                  if (typeof printer.powerSettings.wol !== "undefined") {
                    if (printer.powerSettings.wol.enabled) {
                      if (printer.powerSettings.wol.ip === "" || printer.powerSettings.wol.port === "" || printer.powerSettings.wol.interval === "" || printer.powerSettings.wol.count === "") {
                        console.log("ISSUE WITH WAKE ON LAN SETTINGS");
                      } else {
                        wakeButton = document.getElementById("printerWakeHost-" + printer._id);

                        if (wakeButton.classList.contains("d-none")) {
                          wakeButton.classList.remove("d-none");
                          wakeButton.addEventListener("click", function (e) {
                            _octofarm["default"].post("printers/wakeHost", printer.powerSettings.wol);
                          });
                        }
                      }
                    }
                  }
                }

              case 2:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function applyBtn(_x7, _x8) {
        return _applyBtn.apply(this, arguments);
      }

      return applyBtn;
    }()
  }, {
    key: "printerPowerBtn",
    value: function printerPowerBtn(id) {
      return "\n      \n             <button title=\"Toggle your printers power\"\n                                    id=\"printerPower-".concat(id, "\"\n                                    class=\"btn btn-outline-danger btn-sm\" type=\"button\" disabled>\n                                <i id=\"printerStatus-").concat(id, "\" class=\"fas fa-power-off\" style=\"color: black;\"></i>\n                            </button>\n                            <button title=\"Other power actions\" type=\"button\" class=\"btn btn-sm btn-outline-danger dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                <span class=\"sr-only\">Toggle Dropdown</span>\n                            </button>\n                            <div class=\"dropdown-menu text-center dropdown-menu-right\">\n                                  <a id=\"printerPowerOn-").concat(id, "\" title=\"Turn on your printer\" class=\"dropdown-item d-none\" href=\"#\"><i class=\"textComplete fas fa-power-off\"></i> Power On Printer</a>\n                                <a id=\"printerPowerOff-").concat(id, "\" title=\"Turn off your printer\" class=\"dropdown-item d-none\" href=\"#\"><i class=\"textOffline fas fa-power-off\"></i> Power Off Printer</a>\n                          \n                                <div id=\"printerDropDownMaker-").concat(id, "\" class=\"dropdown-divider d-none\"></div>\n                                <a id=\"printerRestartOctoPrint-").concat(id, "\" title=\"Restart OctoPrint Service\" class=\"dropdown-item d-none\" href=\"#\"><i class=\"textActive fas fa-redo\"></i> Restart OctoPrint</a>\n                                <a id=\"printerRestartHost-").concat(id, "\" title=\"Reboot OctoPrint Host\" class=\"dropdown-item d-none\" href=\"#\"><i class=\"textActive fas fa-sync-alt\"></i> Reboot Host</a>\n                                <a id=\"printerWakeHost-").concat(id, "\" title=\"Wake up OctoPrint Host\" class=\"dropdown-item d-none\" href=\"#\"><i class=\"textComplete fas fa-power-off\"></i> Wake Host</a>\n                                <a id=\"printerShutdownHost-").concat(id, "\" title=\"Shutdown OctoPrint Host\" class=\"dropdown-item d-none\" href=\"#\"><i class=\"textOffline fas fa-power-off\"></i> Shutdown Host</a>\n                            </div>\n        </div>\n    ");
    }
  }]);

  return PowerButton;
}();

exports["default"] = PowerButton;

},{"../octofarm.js":18,"../octoprint.js":19}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _octoprint = _interopRequireDefault(require("../octoprint.js"));

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

var _calc = _interopRequireDefault(require("../functions/calc.js"));

var _ui = _interopRequireDefault(require("../functions/ui.js"));

var _fileManager = _interopRequireDefault(require("./fileManager.js"));

var _filamentGrab = require("./filamentGrab.js");

var _fileSorting = _interopRequireDefault(require("../modules/fileSorting.js"));

var _customScripts = _interopRequireDefault(require("./customScripts.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var currentIndex = 0;
var controlDropDown = false;
var currentPrinter = null;
var filamentManager = false;
var spoolCheck = false;
var refreshCounter = 5000;
$("#printerManagerModal").on("hidden.bs.modal", function (e) {
  // Fix for mjpeg stream not ending when element removed...
  if (document.getElementById("printerControlCamera")) {
    document.getElementById("printerControlCamera").src = "";
  }
});
$("#connectionModal").on("hidden.bs.modal", function (e) {
  if (document.getElementById("connectionAction")) {
    document.getElementById("connectionAction").remove();
  }
});

var PrinterManager = /*#__PURE__*/function () {
  function PrinterManager() {
    _classCallCheck(this, PrinterManager);
  }

  _createClass(PrinterManager, null, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(index, printers, printerControlList) {
        var id, printerDrop, filamentDropDown, done, elements, _id, _printerDrop, _elements;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(index !== "")) {
                  _context.next = 20;
                  break;
                }

                if (document.getElementById("printerControlCamera")) {
                  document.getElementById("printerControlCamera").src = "";
                }

                currentIndex = index;
                id = _.findIndex(printers, function (o) {
                  return o._id == index;
                });
                currentPrinter = printers[id]; //Load the printer dropdown

                if (!controlDropDown) {
                  printerDrop = document.getElementById("printerSelection");
                  printerDrop.innerHTML = "";
                  printerControlList.forEach(function (list) {
                    if (list.state.category !== "Offline") {
                      printerDrop.insertAdjacentHTML("beforeend", "\n                  <option value=\"".concat(list.printerID, "\" selected>").concat(list.printerName, "</option>\n              "));
                    }
                  });
                  printerDrop.value = currentPrinter._id;
                  printerDrop.addEventListener("change", function (event) {
                    if (document.getElementById("printerControls")) {
                      document.getElementById("printerControls").innerHTML = "";
                    }

                    document.getElementById("pmStatus").innerHTML = "<i class=\"fas fa-spinner fa-spin\"></i>";
                    document.getElementById("pmStatus").className = "btn btn-secondary mb-2"; //Load Connection Panel

                    document.getElementById("printerPortDrop").innerHTML = "";
                    document.getElementById("printerBaudDrop").innerHTML = "";
                    document.getElementById("printerProfileDrop").innerHTML = "";
                    document.getElementById("printerConnect").innerHTML = "";
                    PrinterManager.init(event.target.value, printers, printerControlList);
                  });
                  controlDropDown = true;
                }

                _context.next = 8;
                return (0, _filamentGrab.returnDropDown)();

              case 8:
                filamentDropDown = _context.sent;
                _context.next = 11;
                return PrinterManager.loadPrinter(currentPrinter, printerControlList, filamentDropDown);

              case 11:
                done = _context.sent;
                elements = PrinterManager.grabPage();
                elements.terminal.terminalWindow.innerHTML = "";
                elements.printerControls["step" + currentPrinter.stepRate].className = "btn btn-dark active";
                PrinterManager.applyState(currentPrinter, elements);
                PrinterManager.applyTemps(currentPrinter, elements);
                PrinterManager.applyListeners(elements, printers, filamentDropDown);
                _context.next = 33;
                break;

              case 20:
                if (!document.getElementById("terminal")) {
                  _context.next = 33;
                  break;
                }

                _id = _.findIndex(printers, function (o) {
                  return o._id == currentIndex;
                });
                currentPrinter = printers[_id];
                _printerDrop = document.getElementById("printerSelection");
                _printerDrop.innerHTML = "";
                printerControlList.forEach(function (list) {
                  if (list.state.category !== "Offline") {
                    _printerDrop.insertAdjacentHTML("beforeend", "\n                  <option value=\"".concat(list.printerID, "\" selected>").concat(list.printerName, "</option>\n              "));
                  }
                });
                _printerDrop.value = currentPrinter._id;
                _context.next = 29;
                return PrinterManager.grabPage();

              case 29:
                _elements = _context.sent;
                PrinterManager.applyState(currentPrinter, _elements);
                PrinterManager.applyTemps(currentPrinter, _elements);
                document.getElementById("printerManagerModal").style.overflow = "auto";

              case 33:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function init(_x, _x2, _x3) {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "loadPrinter",
    value: function () {
      var _loadPrinter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(printer, printerControlList, filamentDropDown) {
        var printerPort, printerBaud, printerProfile, printerConnect, flipH, flipV, rotate90, systemSettings, serverSettings, controlSettings, camURL, camTitle, printerToolTemps, keys, t, _loop, i;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                printerPort = document.getElementById("printerPortDrop");
                printerBaud = document.getElementById("printerBaudDrop");
                printerProfile = document.getElementById("printerProfileDrop");
                printerConnect = document.getElementById("printerConnect");
                printerPort.innerHTML = "\n    <div class=\"input-group mb-1\"> <div class=\"input-group-prepend\"> <label class=\"input-group-text bg-secondary text-light\" for=\"dashboardSerialPort\">Port:</label> </div> <select class=\"custom-select bg-secondary text-light\" id=\"pmSerialPort\"></select></div>\n    ";
                printerBaud.innerHTML = "\n    <div class=\"input-group mb-1\"> <div class=\"input-group-prepend\"> <label class=\"input-group-text bg-secondary text-light\" for=\"dashboardBaudrate\">Baudrate:</label> </div> <select class=\"custom-select bg-secondary text-light\" id=\"pmBaudrate\"></select></div>\n    ";
                printerProfile.innerHTML = "\n    <div class=\"input-group mb-1\"> <div class=\"input-group-prepend\"> <label class=\"input-group-text bg-secondary text-light\" for=\"dashboardPrinterProfile\">Profile:</label> </div> <select class=\"custom-select bg-secondary text-light\" id=\"pmProfile\"></select></div>\n    ";
                printer.connectionOptions.baudrates.forEach(function (baud) {
                  document.getElementById("pmBaudrate").insertAdjacentHTML("beforeend", "<option value=\"".concat(baud, "\">").concat(baud, "</option>"));
                });

                if (printer.connectionOptions.baudratePreference != null) {
                  document.getElementById("pmBaudrate").value = printer.connectionOptions.baudratePreference;
                }

                printer.connectionOptions.ports.forEach(function (port) {
                  document.getElementById("pmSerialPort").insertAdjacentHTML("beforeend", "<option value=\"".concat(port, "\">").concat(port, "</option>"));
                });

                if (printer.connectionOptions.portPreference != null) {
                  document.getElementById("pmSerialPort").value = printer.connectionOptions.portPreference;
                }

                printer.connectionOptions.printerProfiles.forEach(function (profile) {
                  document.getElementById("pmProfile").insertAdjacentHTML("beforeend", "<option value=\"".concat(profile.id, "\">").concat(profile.name, "</option>"));
                });

                if (printer.connectionOptions.printerProfilePreference != null) {
                  document.getElementById("pmProfile").value = printer.connectionOptions.printerProfilePreference;
                }

                if (printer.printerState.state === "Disconnected" || printer.printerState.state === "Error!") {
                  printerConnect.innerHTML = "<center> <button id=\"pmConnect\" class=\"btn btn-success inline\" value=\"connect\">Connect</button><a title=\"Open your Printers Web Interface\" id=\"pmWebBtn\" type=\"button\" class=\"tag btn btn-info ml-1\" target=\"_blank\" href=\"" + printer.printerURL + "\" role=\"button\"><i class=\"fas fa-globe-europe\"></i></a><div id=\"powerBtn-" + printer._id + "\" class=\"btn-group ml-1\"></div></center>";
                  document.getElementById("pmSerialPort").disabled = false;
                  document.getElementById("pmBaudrate").disabled = false;
                  document.getElementById("pmProfile").disabled = false;
                } else {
                  printerConnect.innerHTML = "<center> <button id=\"pmConnect\" class=\"btn btn-danger inline\" value=\"disconnect\">Disconnect</button><a title=\"Open your Printers Web Interface\" id=\"pmWebBtn\" type=\"button\" class=\"tag btn btn-info ml-1\" target=\"_blank\" href=\"" + printer.printerURL + "\" role=\"button\"><i class=\"fas fa-globe-europe\"></i></a><div id=\"pmPowerBtn-" + printer._id + "\" class=\"btn-group ml-1\"></div></center>";
                  document.getElementById("pmSerialPort").disabled = true;
                  document.getElementById("pmBaudrate").disabled = true;
                  document.getElementById("pmProfile").disabled = true;
                } //setup power btn
                // await PowerButton.applyBtn(printer, "pmPowerBtn-");


                flipH = "";
                flipV = "";
                rotate90 = "";

                if (printer.otherSettings !== null) {
                  if (printer.otherSettings.webCamSettings.flipH) {
                    flipH = "rotateY(180deg)";
                  }

                  if (printer.otherSettings.webCamSettings.flipV) {
                    flipV = "rotateX(180deg)";
                  }

                  if (printer.otherSettings.webCamSettings.rotate90) {
                    rotate90 = "rotate(90deg)";
                  }
                }

                _context2.next = 21;
                return _octofarm["default"].get("settings/client/get");

              case 21:
                systemSettings = _context2.sent;
                _context2.next = 24;
                return systemSettings.json();

              case 24:
                systemSettings = _context2.sent;
                _context2.next = 27;
                return _octofarm["default"].get("settings/server/get");

              case 27:
                serverSettings = _context2.sent;
                _context2.next = 30;
                return serverSettings.json();

              case 30:
                serverSettings = _context2.sent;
                filamentManager = serverSettings.filamentManager;
                spoolCheck = serverSettings.filament.filamentCheck;
                controlSettings = systemSettings.controlSettings; //Load tools

                if (typeof controlSettings !== "undefined" && controlSettings.filesTop) {
                  document.getElementById("printerControls").innerHTML = "\n          <div class=\"row\">\n              <div class=\"col-lg-3\">\n             <div class=\"row\">\n                <div class=\"col-12\">\n                <center>\n                <h5>Operation</h5>\n            </center>\n            <hr>\n  \n            <center>\n            <button id=\"pmPrintStart\" type=\"button\" class=\"btn btn-success\" role=\"button\"><i class=\"fas fa-print\"></i> Print</button>\n            <button id=\"pmPrintPause\" type=\"button\" class=\"btn btn-light\" role=\"button\" disabled><i class=\"fas fa-pause\"></i> Pause</button>\n            <button id=\"pmPrintRestart\" type=\"button\" class=\"btn btn-danger\" role=\"button\"><i class=\"fas fa-undo\"></i> Restart</button>\n            <button id=\"pmPrintResume\" type=\"button\" class=\"btn btn-success\" role=\"button\"><i class=\"fas fa-redo\"></i> Resume</button>\n            <button id=\"pmPrintStop\" type=\"button\" class=\"btn btn-danger\" disabled><i class=\"fas fa-square\"></i> Cancel</button>\n            </center></div></div>\n                 <div id=\"cameraRow\" class=\"row\">\n                      <div class=\"col-12\">\n                            <center>\n                                <h5>Camera</h5>\n                            </center>\n                            <hr>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div id=\"cameraCol\" class=\"col-12\">\n                          <img style=\"transform: ".concat(flipH, " ").concat(flipV, " ").concat(rotate90, ";\" id=\"printerControlCamera\" width=\"100%\" src=\"\"/>\n                        </div>\n                    </div>\n                                  <div class=\"row\">\n                    <div class=\"col-9\">\n                        <center>\n                            <h5>X/Y</h5>\n                        </center>\n                        <hr>\n                    </div>\n                    <div class=\"col-3\">\n                        <center>\n                            <h5>Z</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcYpos\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-up\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZpos\"type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-up\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-left\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXYhome\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-home\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXpos\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-right\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZhome\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-home\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcYneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-down\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-down\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <div id=\"pcAxisSteps\" class=\"btn-group\" role=\"group\">\n                                <button id=\"pcAxisSteps01\" type=\"button\" class=\"btn btn-light\" value=\"01\">0.1</button>\n                                <button id=\"pcAxisSteps1\" type=\"button\" class=\"btn btn-light\" value=\"1\">1</button>\n                                <button id=\"pcAxisSteps10\" type=\"button\" class=\"btn btn-light\" value=\"10\">10</button>\n                                <button id=\"pcAxisSteps100\" type=\"button\" class=\"btn btn-light\" value=\"100\">100</button>\n                            </div>\n                        </center>\n                    </div>\n                </div>\n                              <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Extruder</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                                      <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <div class=\"input-group\">\n                                <input id=\"pcExtruder\" type=\"number\" class=\"form-control\" placeholder=\"0\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\">\n                                <div class=\"input-group-append\">\n                                    <span class=\"input-group-text\" id=\"basic-addon2\">mm</span>\n                                </div>\n                            </div>\n                        </center>\n                    </div>\n                <div class=\"row\">\n                    <div class=\"col-12 text-center\">\n                        <center><button id=\"pcExtrude\" class=\"btn btn-light\" type=\"submit\"><i class=\"fas fa-redo\"></i> Extrude</button> <button id=\"pcRetract\" class=\"btn btn-light\" type=\"submit\"><i class=\"fas fa-undo\"></i> Retract</button></center>\n                </div>\n            </div>\n            </div>\n                  <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Feed/Flow</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                  <div class=\"row\">\n                    <div class=\"col-10 col-lg-8 col-xl-8\">\n                        <label for=\"pcFeed\">Feed Rate: <span id=\"pcFeedValue\">").concat(printer.feedRate, "%</span></label>\n                        <input type=\"range\" class=\"octoRange custom-range\" min=\"10\" max=\"300\" step=\"1\" id=\"pcFeed\" value=\"").concat(printer.feedRate, "\">\n                    </div>\n                    <div class=\"col-2 col-lg-4 col-xl-4\">\n                        <button id=\"pcFeedRate\" type=\"button\" class=\"btn btn-light\">Update</button>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-10 col-lg-8 col-xl-8\">\n                        <label for=\"pcFlow\">Flow Rate: <span id=\"pcFlowValue\">").concat(printer.flowRate, "%</span></label>\n                        <input type=\"range\" class=\"octoRange custom-range\" min=\"75\" max=\"125\" step=\"1\" id=\"pcFlow\" value=\"").concat(printer.flowRate, "\">\n                    </div>\n                    <div class=\"col-2 col-lg-4 col-xl-4\">\n                        <button id=\"pcFlowRate\" type=\"button\" class=\"btn btn-light\">Update</button>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Motors / Fans</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                  <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center><button id=\"pcMotorTog\" class=\"btn btn-light\" type=\"submit\">Motors Off</button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                    <label for=\"pcFlow\">Fan Percent: <span id=\"pcFanPercent\">100%</span></label>\n                    <input type=\"range\" class=\"octoRange custom-range\" min=\"0\" max=\"100\" step=\"1\" id=\"pcFanPercent\" value=\"100\">\n                        <center><button id=\"pcFanOn\" class=\"btn btn-light\" type=\"submit\">Set Fans</button> <button id=\"pcFanOff\" class=\"btn btn-light\" type=\"submit\">Fans Off</button></center>\n                    </div>\n                </div>\n              </div>\n              \n              <div class=\"col-lg-9 pt-0\">\n                  <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Files</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row bg-secondary rounded-top\">\n                <div class=\"col-12\">\n                     <h5 class=\"float-left  mb-0\">\n                      <button id=\"printerFileCount\" type=\"button\" class=\"btn btn-secondary float-right d-block\" href=\"#\" aria-expanded=\"false\" disabled=\"\">\n                        <i class=\"fas fa-file\"></i> Loading... <i class=\"fas fa-folder\"></i> Loading...\n                      </button>\n                      <button id=\"printerStorage\" type=\"button\" class=\"btn btn-secondary float-right d-block\" href=\"#\" aria-expanded=\"false\" disabled=\"\">\n  \n                        <i class=\"fas fa-hdd\"></i> Loading...\n                      </button>\n                    </h5>\n                    <h5 class=\"float-left mb-0\">\n                      <button type=\"button\" class=\"btn btn-secondary float-right d-block\" href=\"#\" aria-expanded=\"false\" disabled=\"\">\n                        <i class=\"fas fa-file-code\"></i> Files: <span id=\"currentFolder\">local</span>/\n                      </button>\n                    </h5>\n                    <div class=\"btn btn-secondary form-group float-right  mb-0\">\n                      <form class=\"form-inline\">\n                        <div class=\"form-group\">\n                          <label for=\"searchFiles\">\n                            <i class=\"fas fa-search pr-1\"></i>\n                          </label>\n                          <input id=\"searchFiles\" type=\"text\" placeholder=\"File Search...\" class=\"search-control search-control-underlined\">\n                        </div>\n                      </form>\n                    </div>\n                   </div>\n                  </div>\n                  <div class=\"row bg-secondary rounded-bottom\">\n                    <div class=\"col-lg-2\">\n                      <i class=\"fas fa-file-upload ml-2 mb-1\"></i><span id=\"fileCounts-").concat(printer._id, "\"> 0 </span>\n                    </div>\n                    <div class=\"col-lg-10\">\n                      <div class=\"progress\">\n                        <div id=\"fileProgress-").concat(printer._id, "\" class=\"progress-bar progress-bar-striped bg-warning\" role=\"progressbar\" style=\"width: 0%\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n                          0%\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"row mb-1\">\n                      <div class=\"col-12\">\n                       <button id=\"fileBackBtn\" type=\"button\" class=\"btn btn-success float-right\">\n                        <i class=\"fas fa-chevron-left\"></i> Back\n                      </button>\n                      <!-- Split dropright button -->\n                      <div class=\"float-right mr-3 btn-group\">\n                          <div id=\"fileSortDropdownMenu\" class=\"btn bg-secondary\">Sort</div>\n                          <button type=\"button\" class=\"btn btn-secondary dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            <span class=\"sr-only\">Toggle Dropdown</span>\n                          </button>\n                          <div class=\"dropdown-menu\">\n                            \n                       <a class=\"dropdown-item\" id=\"sortFileNameDown\"><i class=\"fas fa-sort-alpha-down\"></i> File Name</a>\n  \n                      <a class=\"dropdown-item\" id=\"sortFileNameUp\"><i class=\"fas fa-sort-alpha-up\"></i> File Name</a>\n                             <div class=\"dropdown-divider\"></div>\n                      <a class=\"dropdown-item\" id=\"sortPrintTimeDown\"><i class=\"fas fa-sort-numeric-down\"></i> Print Time</a>\n  \n                      <a class=\"dropdown-item\" id=\"sortPrintTimeUp\"><i class=\"fas fa-sort-numeric-up\"></i> Print Time</a>\n                             <div class=\"dropdown-divider\"></div>\n                      <a class=\"dropdown-item\" id=\"sortDateDown\"><i class=\"fas fa-sort-numeric-down\"></i> Upload Date</a>\n  \n                      <a class=\"dropdown-item\" id=\"sortDateUp\"><i class=\"fas fa-sort-numeric-up\"></i> Upload Date</a>\n                          </div>\n                        </div>\n\n                        <label class=\"btn btn-success float-left mr-1 mb-0 bg-colour-1\" for=\"fileUploadBtn\"><i class=\"fas fa-file-import\"></i> Upload File(s)</label>\n                        <input id=\"fileUploadBtn\" multiple accept=\".gcode,.gco,.g\" type=\"file\" class=\"btn btn-success float-left bg-colour-1\" id=\"uploadFileBtn\">\n                        <label class=\"btn btn-info float-left mr-1 mb-0 bg-colour-2\" for=\"fileUploadPrintBtn\"><i class=\"fas fa-file-import\"></i> Upload and Print</label>\n                        <input id=\"fileUploadPrintBtn\" accept=\".gcode,.gco,.g\" type=\"file\" class=\"btn btn-success float-left bg-colour-2\" id=\"uploadFileBtn\">\n                      <button\n                        id=\"createFolderBtn\"\n                        type=\"button\"\n                        class=\"btn btn-warning float-left mr-1 mb-0 bg-colour-3\"\n                        data-toggle=\"collapse\"\n                        href=\"#createFolder\"\n                        role=\"button\"\n                        aria-expanded=\"false\"\n                        aria-controls=\"createFolder\"\n                      >\n                        <i class=\"fas fa-folder-plus\"></i> Create Folder\n                      </button>\n                      <button id=\"fileReSync\" type=\"button\" class=\"btn btn-primary mb-0 bg-colour-4\">\n                        <i class=\"fas fa-sync\"></i> Re-Sync\n                      </button>\n                      </div>\n  \n                  </div>\n  \n                      <div id=\"fileList-").concat(printer._id, "\" class=\"list-group\" style=\"height:500px; min-height:500px;max-height:500px; overflow-y:scroll;\">\n  \n                      </div>\n              </div>\n          </div>\n              <div class=\"row\">\n                  <div class=\"col-lg-12 col-xl-6\">\n                    <div class=\"col-12\">\n                                      <center>\n                                          <h5>Print Status</h5>\n                                      </center>\n                                      <hr>\n                                  </div>\n                                  <div class=\"col-12\">\n                                                                  <div class=\"progress mb-2\">\n                                    <div id=\"pmProgress\" class=\"progress-bar\" role=\"progressbar progress-bar-striped\" style=\"width:100%\" aria-valuenow=\"100%\" aria-valuemin=\"0\" aria-valuemax=\"100\">Loading...\n                                    </div>\n                                  </div>\n                </div>\n                <div class=\"row\">\n                <div id=\"fileThumbnail\" class=\"col-12\">\n  \n                </div>\n                <div class=\"col-12\">\n                <center>\n                                 <b class=\"mb-1\">File Name: </b><br><p title=\"Loading...\" class=\"tag mb-1\" id=\"pmFileName\">Loading...</p>\n  </center>\n  </div>\n                  <div class=\"col-12\">\n                <center>\n                                 <b id=\"resentTitle\" class=\"mb-1 d-none\">Resend Statistics: </b><br><p title=\"Current job resend ratio\" class=\"tag mb-1 d-none\" id=\"printerResends\">Loading...</p>\n  </center>\n  </div>\n                  <div class=\"col-lg-12 col-xl-6\">\n                     <center>\n                  <b>Expected Completion Date: </b><p class=\"mb-1\" id=\"pmExpectedCompletionDate\">Loading...</p>\n  \n                    <b>Print Time Remaining: </b><p class=\"mb-1\" id=\"pmTimeRemain\">Loading...</p>\n                    <b>Print Time Elapsed: </b><p class=\"mb-1\" id=\"pmTimeElapsed\">Loading...</p>\n                    <b>Current Z: </b><p class=\"mb-1\" id=\"pmCurrentZ\">Loading...</p>\n                    <b>Expected Job Cost: </b><p class=\"mb-1\" id=\"pmJobCosts\">Loading...</p></center>\n              </div>\n                  <div class=\"col-lg-12 col-xl-6\">\n                                 <center>\n                   <b>Expected Print Time: </b><p class=\"mb-1\" id=\"pmExpectedTime\">Loading...</p>\n          <b class=\"mb-1\">Expected Units: </b><br><p class=\"tag mb-1\" id=\"pmExpectedWeight\">Loading...</p>\n          <b class=\"mb-1\">Expected Filament Costs: </b><br><p class=\"tag mb-1\" id=\"pmExpectedFilamentCost\">Loading...</p>\n          <b class=\"mb-1\">Expected Printer Costs: </b><br><p class=\"tag mb-1\" id=\"pmExpectedPrinterCost\">Loading...</p>\n  \n  \n                                 </center>\n  </div>\n                </div>\n                  </div>\n                  <div class=\"col-lg-12 col-xl-6\">\n                 <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Tools</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row\">\n                  <div class=\"col-12\">\n                      <button id=\"pmTempTime\" type=\"button\" class=\"btn btn-secondary btn-sm float-right\" disabled>Updated: <i class=\"far fa-clock\"></i> Never</button>\n                  </div>\n                </div>\n                <div class=\"row\" id=\"pmToolTemps\">\n  \n                </div>\n                <div class=\"row\">\n                    <div id=\"pmBedTemp\" class=\"col-lg-6\">\n                    \n                    </div>\n                    <div id=\"pmChamberTemp\" class=\"col-lg-6\">\n                    \n                    </div>\n                </div>\n                  </div>\n                </div>\n  \n                       \n                 <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Terminal</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row\">\n                 <div id=\"terminal\" class=\"terminal-window bg-secondary\">\n                  </div>\n                    <div class=\"input-group\">\n                      <textarea id=\"terminalInput\" type=\"text\" class=\"form-control\" placeholder=\"\" aria-label=\"\" aria-describedby=\"basic-addon2\"></textarea>\n                      <div class=\"input-group-append\">\n                        <button class=\"btn btn-secondary\" id=\"terminalInputBtn\" type=\"submit\">Send</button>\n                      </div>\n                    </div>\n                    <form class=\"was-validated\">\n                      <div class=\"custom-control custom-checkbox mb-3\">\n                        <input \n                        type=\"checkbox\" class=\"custom-control-input\" id=\"tempMessages\" required checked>\n                        <label class=\"custom-control-label\" for=\"tempMessages\">Temperature Messages</label>\n                        <div class=\"valid-feedback\">Showing temperature messages</div>\n                        <div class=\"invalid-feedback\">Not showing temperature messages</div>\n                      </div>\n                      </form>\n                      <form class=\"was-validated\">\n                       <div class=\"custom-control custom-checkbox mb-3\">\n                        <input\n                        type=\"checkbox\" class=\"custom-control-input\" id=\"sdMessages\" required checked>\n                        <label class=\"custom-control-label\" for=\"sdMessages\">SD Messages</label>\n                        <div class=\"valid-feedback\">Showing sd messages</div>\n                        <div class=\"invalid-feedback\">Not showing sd messages</div>\n                      </div>\n                      </form>\n                      <form class=\"was-validated\">\n                      <div class=\"custom-control custom-checkbox mb-3\">\n                        <input\n                        type=\"checkbox\" class=\"custom-control-input\" id=\"waitMessages\" required checked>\n                        <label class=\"custom-control-label\" for=\"waitMessages\">Wait Responses</label>\n                        <div class=\"valid-feedback\">Showing wait responses</div>\n                        <div class=\"invalid-feedback\">Not showing wait responses</div>\n                      </div>\n                      </form>\n                </div>\n                <div class=\"row\" >\n                    <div id=\"customGcodeCommandsArea\" class=\"col-lg-12\"></div>\n                </div>\n            </div>\n            ");
                } else {
                  document.getElementById("printerControls").innerHTML = "\n          <div class=\"row\">\n              <div class=\"col-lg-3\">\n             <div class=\"row\">\n                <div class=\"col-12\">\n                <center>\n                <h5>Operation</h5>\n            </center>\n            <hr>\n  \n            <center>\n            <button id=\"pmPrintStart\" type=\"button\" class=\"btn btn-success\" role=\"button\"><i class=\"fas fa-print\"></i> Print</button>\n            <button id=\"pmPrintPause\" type=\"button\" class=\"btn btn-light\" role=\"button\" disabled><i class=\"fas fa-pause\"></i> Pause</button>\n            <button id=\"pmPrintRestart\" type=\"button\" class=\"btn btn-danger\" role=\"button\"><i class=\"fas fa-undo\"></i> Restart</button>\n            <button id=\"pmPrintResume\" type=\"button\" class=\"btn btn-success\" role=\"button\"><i class=\"fas fa-redo\"></i> Resume</button>\n            <button id=\"pmPrintStop\" type=\"button\" class=\"btn btn-danger\" disabled><i class=\"fas fa-square\"></i> Cancel</button>\n            </center></div></div>\n                 <div id=\"cameraRow\" class=\"row\">\n                      <div class=\"col-12\">\n                            <center>\n                                <h5>Camera</h5>\n                            </center>\n                            <hr>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div id=\"cameraCol\" class=\"col-12\">\n                          <img style=\"transform: ".concat(flipH, " ").concat(flipV, " ").concat(rotate90, ";\" id=\"printerControlCamera\" width=\"100%\" src=\"\"/>\n                        </div>\n                    </div>\n                                  <div class=\"row\">\n                    <div class=\"col-9\">\n                        <center>\n                            <h5>X/Y</h5>\n                        </center>\n                        <hr>\n                    </div>\n                    <div class=\"col-3\">\n                        <center>\n                            <h5>Z</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcYpos\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-up\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZpos\"type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-up\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-left\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXYhome\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-home\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXpos\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-right\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZhome\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-home\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcYneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-down\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-down\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <div id=\"pcAxisSteps\" class=\"btn-group\" role=\"group\">\n                                <button id=\"pcAxisSteps01\" type=\"button\" class=\"btn btn-light\" value=\"01\">0.1</button>\n                                <button id=\"pcAxisSteps1\" type=\"button\" class=\"btn btn-light\" value=\"1\">1</button>\n                                <button id=\"pcAxisSteps10\" type=\"button\" class=\"btn btn-light\" value=\"10\">10</button>\n                                <button id=\"pcAxisSteps100\" type=\"button\" class=\"btn btn-light\" value=\"100\">100</button>\n                            </div>\n                        </center>\n                    </div>\n                </div>\n                              <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Extruder</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                                      <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <div class=\"input-group\">\n                                <input id=\"pcExtruder\" type=\"number\" class=\"form-control\" placeholder=\"0\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\">\n                                <div class=\"input-group-append\">\n                                    <span class=\"input-group-text\" id=\"basic-addon2\">mm</span>\n                                </div>\n                            </div>\n                        </center>\n                    </div>\n                <div class=\"row\">\n                    <div class=\"col-12 text-center\">\n                        <center><button id=\"pcExtrude\" class=\"btn btn-light\" type=\"submit\"><i class=\"fas fa-redo\"></i> Extrude</button> <button id=\"pcRetract\" class=\"btn btn-light\" type=\"submit\"><i class=\"fas fa-undo\"></i> Retract</button></center>\n                </div>\n            </div>\n            </div>\n                  <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Feed/Flow</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                  <div class=\"row\">\n                    <div class=\"col-10 col-lg-8 col-xl-8\">\n                        <label for=\"pcFeed\">Feed Rate: <span id=\"pcFeedValue\">").concat(printer.feedRate, "%</span></label>\n                        <input type=\"range\" class=\"octoRange custom-range\" min=\"10\" max=\"300\" step=\"1\" id=\"pcFeed\" value=\"").concat(printer.feedRate, "\">\n                    </div>\n                    <div class=\"col-2 col-lg-4 col-xl-4\">\n                        <button id=\"pcFeedRate\" type=\"button\" class=\"btn btn-light\">Update</button>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-10 col-lg-8 col-xl-8\">\n                        <label for=\"pcFlow\">Flow Rate: <span id=\"pcFlowValue\">").concat(printer.flowRate, "%</span></label>\n                        <input type=\"range\" class=\"octoRange custom-range\" min=\"75\" max=\"125\" step=\"1\" id=\"pcFlow\" value=\"").concat(printer.flowRate, "\">\n                    </div>\n                    <div class=\"col-2 col-lg-4 col-xl-4\">\n                        <button id=\"pcFlowRate\" type=\"button\" class=\"btn btn-light\">Update</button>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Motors / Fans</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                  <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center><button id=\"pcMotorTog\" class=\"btn btn-light\" type=\"submit\">Motors Off</button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                    <label for=\"pcFlow\">Fan Percent: <span id=\"pcFanPercent\">100%</span></label>\n                    <input type=\"range\" class=\"octoRange custom-range\" min=\"0\" max=\"100\" step=\"1\" id=\"pcFanPercent\" value=\"100\">\n                        <center><button id=\"pcFanOn\" class=\"btn btn-light\" type=\"submit\">Set Fans</button> <button id=\"pcFanOff\" class=\"btn btn-light\" type=\"submit\">Fans Off</button></center>\n                    </div>\n                </div>\n              </div>\n              <div class=\"col-lg-9 pt-0\">\n              <div class=\"row\">\n                  <div class=\"col-lg-12 col-xl-6\">\n                    <div class=\"col-12\">\n                                      <center>\n                                          <h5>Print Status</h5>\n                                      </center>\n                                      <hr>\n                                  </div>\n                                  <div class=\"col-12\">\n                                                                  <div class=\"progress mb-2\">\n                                    <div id=\"pmProgress\" class=\"progress-bar\" role=\"progressbar progress-bar-striped\" style=\"width:100%\" aria-valuenow=\"100%\" aria-valuemin=\"0\" aria-valuemax=\"100\">Loading...\n                                    </div>\n                                  </div>\n                </div>\n                <div class=\"row\">\n                <div id=\"fileThumbnail\" class=\"col-12\">\n  \n                </div>\n                <div class=\"col-12\">\n                <center>\n                                 <b class=\"mb-1\">File Name: </b><br><p title=\"Loading...\" class=\"tag mb-1\" id=\"pmFileName\">Loading...</p>\n  </center>\n  </div>\n                  <div class=\"col-12\">\n                <center>\n                                 <b id=\"resentTitle\" class=\"mb-1 d-none\">Resend Statistics: </b><br><p title=\"Current job resend ratio\" class=\"tag mb-1 d-none\" id=\"printerResends\">Loading...</p>\n  </center>\n  </div>\n                  <div class=\"col-lg-12 col-xl-6\">\n                     <center>\n                  <b>Expected Completion Date: </b><p class=\"mb-1\" id=\"pmExpectedCompletionDate\">Loading...</p>\n  \n                    <b>Print Time Remaining: </b><p class=\"mb-1\" id=\"pmTimeRemain\">Loading...</p>\n                    <b>Print Time Elapsed: </b><p class=\"mb-1\" id=\"pmTimeElapsed\">Loading...</p>\n                    <b>Current Z: </b><p class=\"mb-1\" id=\"pmCurrentZ\">Loading...</p>\n                    <b>Expected Job Cost: </b><p class=\"mb-1\" id=\"pmJobCosts\">Loading...</p></center>\n              </div>\n                  <div class=\"col-lg-12 col-xl-6\">\n                                 <center>\n                   <b>Expected Print Time: </b><p class=\"mb-1\" id=\"pmExpectedTime\">Loading...</p>\n          <b class=\"mb-1\">Expected Units: </b><br><p class=\"tag mb-1\" id=\"pmExpectedWeight\">Loading...</p>\n          <b class=\"mb-1\">Expected Filament Costs: </b><br><p class=\"tag mb-1\" id=\"pmExpectedFilamentCost\">Loading...</p>\n          <b class=\"mb-1\">Expected Printer Costs: </b><br><p class=\"tag mb-1\" id=\"pmExpectedPrinterCost\">Loading...</p>\n  \n  \n                                 </center>\n  </div>\n                </div>\n                  </div>\n                  <div class=\"col-lg-12 col-xl-6\">\n                 <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Tools</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row\">\n                  <div class=\"col-12\">\n                      <button id=\"pmTempTime\" type=\"button\" class=\"btn btn-secondary btn-sm float-right\" disabled>Updated: <i class=\"far fa-clock\"></i> Never</button>\n                  </div>\n                </div>\n                <div class=\"row\" id=\"pmToolTemps\">\n  \n                </div>\n                <div class=\"row\">\n                    <div id=\"pmBedTemp\" class=\"col-lg-6\">\n                    \n                    </div>\n                    <div id=\"pmChamberTemp\" class=\"col-lg-6\">\n                    \n                    </div>\n                </div>\n                  </div>\n                </div>\n  \n                           <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Files</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row bg-secondary rounded-top\">\n                <div class=\"col-12\">\n                     <h5 class=\"float-left  mb-0\">\n                      <button id=\"printerFileCount\" type=\"button\" class=\"btn btn-secondary float-right d-block\" href=\"#\" aria-expanded=\"false\" disabled=\"\">\n                        <i class=\"fas fa-file\"></i> Loading... <i class=\"fas fa-folder\"></i> Loading...\n                      </button>\n                      <button id=\"printerStorage\" type=\"button\" class=\"btn btn-secondary float-right d-block\" href=\"#\" aria-expanded=\"false\" disabled=\"\">\n  \n                        <i class=\"fas fa-hdd\"></i> Loading...\n                      </button>\n                    </h5>\n                    <h5 class=\"float-left mb-0\">\n                      <button type=\"button\" class=\"btn btn-secondary float-right d-block\" href=\"#\" aria-expanded=\"false\" disabled=\"\">\n                        <i class=\"fas fa-file-code\"></i> Files: <span id=\"currentFolder\">local</span>/\n                      </button>\n                    </h5>\n                    <div class=\"btn btn-secondary form-group float-right  mb-0\">\n                      <form class=\"form-inline\">\n                        <div class=\"form-group\">\n                          <label for=\"searchFiles\">\n                            <i class=\"fas fa-search pr-1\"></i>\n                          </label>\n                          <input id=\"searchFiles\" type=\"text\" placeholder=\"File Search...\" class=\"search-control search-control-underlined\">\n                        </div>\n                      </form>\n                    </div>\n                   </div>\n                  </div>\n                  <div class=\"row bg-secondary rounded-bottom\">\n                    <div class=\"col-lg-2\">\n                      <i class=\"fas fa-file-upload ml-2 mb-1\"></i><span id=\"fileCounts-").concat(printer._id, "\"> 0 </span>\n                    </div>\n                    <div class=\"col-lg-10\">\n                      <div class=\"progress\">\n                        <div id=\"fileProgress-").concat(printer._id, "\" class=\"progress-bar progress-bar-striped bg-warning\" role=\"progressbar\" style=\"width: 0%\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n                          0%\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"row mb-1\">\n                      <div class=\"col-12\">\n                       <button id=\"fileBackBtn\" type=\"button\" class=\"btn btn-success float-right\">\n                        <i class=\"fas fa-chevron-left\"></i> Back\n                      </button>\n                      <!-- Split dropright button -->\n                      <div class=\"float-right mr-3 btn-group\">\n                          <div id=\"fileSortDropdownMenu\" class=\"btn bg-secondary\">Sort</div>\n                          <button type=\"button\" class=\"btn btn-secondary dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            <span class=\"sr-only\">Toggle Dropdown</span>\n                          </button>\n                          <div class=\"dropdown-menu\">\n                            \n                       <a class=\"dropdown-item\" id=\"sortFileNameDown\"><i class=\"fas fa-sort-alpha-down\"></i> File Name</a>\n  \n                      <a class=\"dropdown-item\" id=\"sortFileNameUp\"><i class=\"fas fa-sort-alpha-up\"></i> File Name</a>\n                             <div class=\"dropdown-divider\"></div>\n                      <a class=\"dropdown-item\" id=\"sortPrintTimeDown\"><i class=\"fas fa-sort-numeric-down\"></i> Print Time</a>\n  \n                      <a class=\"dropdown-item\" id=\"sortPrintTimeUp\"><i class=\"fas fa-sort-numeric-up\"></i> Print Time</a>\n                             <div class=\"dropdown-divider\"></div>\n                      <a class=\"dropdown-item\" id=\"sortDateDown\"><i class=\"fas fa-sort-numeric-down\"></i> Upload Date</a>\n  \n                      <a class=\"dropdown-item\" id=\"sortDateUp\"><i class=\"fas fa-sort-numeric-up\"></i> Upload Date</a>\n                          </div>\n                        </div>\n\n                        <label class=\"btn btn-success float-left mr-1 mb-0 bg-colour-1\" for=\"fileUploadBtn\"><i class=\"fas fa-file-import\"></i> Upload File(s)</label>\n                        <input id=\"fileUploadBtn\" multiple accept=\".gcode,.gco,.g\" type=\"file\" class=\"btn btn-success float-left bg-colour-1\" id=\"uploadFileBtn\">\n                        <label class=\"btn btn-info float-left mr-1 mb-0 bg-colour-2\" for=\"fileUploadPrintBtn\"><i class=\"fas fa-file-import\"></i> Upload and Print</label>\n                        <input id=\"fileUploadPrintBtn\" accept=\".gcode,.gco,.g\" type=\"file\" class=\"btn btn-success float-left bg-colour-2\" id=\"uploadFileBtn\">\n                      <button\n                        id=\"createFolderBtn\"\n                        type=\"button\"\n                        class=\"btn btn-warning float-left mr-1 mb-0 bg-colour-3\"\n                        data-toggle=\"collapse\"\n                        href=\"#createFolder\"\n                        role=\"button\"\n                        aria-expanded=\"false\"\n                        aria-controls=\"createFolder\"\n                      >\n                        <i class=\"fas fa-folder-plus\"></i> Create Folder\n                      </button>\n                      <button id=\"fileReSync\" type=\"button\" class=\"btn btn-primary mb-0 bg-colour-4\">\n                        <i class=\"fas fa-sync\"></i> Re-Sync\n                      </button>\n                      </div>\n  \n                  </div>\n  \n                      <div id=\"fileList-").concat(printer._id, "\" class=\"list-group\" style=\"height:500px; min-height:500px;max-height:500px; overflow-y:scroll;\">\n  \n                      </div>\n              </div>\n          </div>\n                 <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Terminal</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row\">\n                 <div id=\"terminal\" class=\"terminal-window bg-secondary\">\n                  </div>\n                    <div class=\"input-group\">\n                      <textarea id=\"terminalInput\" type=\"text\" class=\"form-control\" placeholder=\"\" aria-label=\"\" aria-describedby=\"basic-addon2\"></textarea>\n                      <div class=\"input-group-append\">\n                        <button class=\"btn btn-secondary\" id=\"terminalInputBtn\" type=\"submit\">Send</button>\n                      </div>\n                    </div>\n                    <form class=\"was-validated\">\n                      <div class=\"custom-control custom-checkbox mb-3\">\n                        <input \n                        type=\"checkbox\" class=\"custom-control-input\" id=\"tempMessages\" required checked>\n                        <label class=\"custom-control-label\" for=\"tempMessages\">Temperature Messages</label>\n                        <div class=\"valid-feedback\">Showing temperature messages</div>\n                        <div class=\"invalid-feedback\">Not showing temperature messages</div>\n                      </div>\n                      </form>\n                      <form class=\"was-validated\">\n                       <div class=\"custom-control custom-checkbox mb-3\">\n                        <input\n                        type=\"checkbox\" class=\"custom-control-input\" id=\"sdMessages\" required checked>\n                        <label class=\"custom-control-label\" for=\"sdMessages\">SD Messages</label>\n                        <div class=\"valid-feedback\">Showing sd messages</div>\n                        <div class=\"invalid-feedback\">Not showing sd messages</div>\n                      </div>\n                      </form>\n                      <form class=\"was-validated\">\n                      <div class=\"custom-control custom-checkbox mb-3\">\n                        <input\n                        type=\"checkbox\" class=\"custom-control-input\" id=\"waitMessages\" required checked>\n                        <label class=\"custom-control-label\" for=\"waitMessages\">Wait Responses</label>\n                        <div class=\"valid-feedback\">Showing wait responses</div>\n                        <div class=\"invalid-feedback\">Not showing wait responses</div>\n                      </div>\n                      </form>\n                </div>\n                <div class=\"row\">\n                    <div id=\"customGcodeCommandsArea\" class=\"col-lg-12\"></div>\n                </div>\n            </div>\n            ");
                }

                camURL = "";

                if (typeof printer.cameraURL !== "undefined" && printer.cameraURL.includes("http")) {
                  camURL = printer.cameraURL;
                } else {
                  camURL = "../../../images/noCamera.jpg";
                } //Load camera


                camTitle = document.getElementById("cameraRow");

                if (printer.otherSettings.webCamSettings.webcamEnabled) {
                  document.getElementById("printerControlCamera").src = camURL;

                  if (camTitle.classList.contains("d-none")) {
                    camTitle.classList.remove("d-none");
                  }
                } else {
                  if (!camTitle.classList.contains("d-none")) {
                    camTitle.classList.add("d-none");
                  }
                }

                printerToolTemps = document.getElementById("pmToolTemps");
                document.getElementById("pmBedTemp").innerHTML = "";
                document.getElementById("pmChamberTemp").innerHTML = "";
                printerToolTemps.innerHTML = "";

                if (typeof printer.currentProfile !== "undefined" && printer.currentProfile !== null) {
                  keys = Object.keys(printer.currentProfile);

                  for (t = 0; t < keys.length; t++) {
                    if (keys[t].includes("extruder")) {
                      _loop = function _loop(i) {
                        printerToolTemps.insertAdjacentHTML("beforeend", "\n                                <div class=\"col-md-12 col-lg-12 col-xl-6\">\n                                   <div class=\"md-form input-group mb-3\">\n                                       <span class=\"input-group-text\">".concat(i, "</span>\n                                      <div title=\"Actual Tool temperature\" class=\"input-group-prepend\">\n                                          <span id=\"tool").concat(i, "Actual\" class=\"input-group-text\">0\xB0C</span>\n                                      </div>\n                                      <input title=\"Set your target Tool temperature\" id=\"tool").concat(i, "Target\" type=\"number\" class=\"form-control col\" placeholder=\"0\xB0C\" aria-label=\"Recipient's username\" aria-describedby=\"MaterialButton-addon2\">\n                                      <div class=\"input-group-append\">\n                                          <button class=\"btn btn-md btn-light m-0 p-1\" type=\"button\" id=\"tool").concat(i, "Set\">Set</button>\n                                      </div>\n                                  </div>\n                                </div>\n                                <div class=\"col-md-6\">\n                                 <div class=\"input-group mb-1\"><div class=\"input-group-prepend\"> <label class=\"input-group-text bg-secondary text-light\" for=\"tool").concat(i, "FilamentManagerFolderSelect\">Filament:</label> </div> <select class=\"custom-select bg-secondary text-light\" id=\"tool").concat(i, "FilamentManagerFolderSelect\"><option value=\"\" selected></option></select></div>\n                                </div>\n                                "));
                        var pmFilamentDrop = document.getElementById("tool".concat(i, "FilamentManagerFolderSelect"));
                        pmFilamentDrop.innerHTML = "";
                        filamentDropDown.forEach(function (filament) {
                          pmFilamentDrop.insertAdjacentHTML("beforeend", filament);
                        });

                        if (Array.isArray(printer.selectedFilament) && printer.selectedFilament.length !== 0) {
                          if (typeof printer.selectedFilament[i] !== "undefined" && printer.selectedFilament[i] !== null) {
                            pmFilamentDrop.value = printer.selectedFilament[i]._id;
                          }
                        }

                        pmFilamentDrop.addEventListener("change", function (event) {
                          (0, _filamentGrab.selectFilament)(printer._id, event.target.value, "".concat(i));
                          setTimeout(function () {
                            _fileManager["default"].refreshFiles(currentPrinter, "<i class=\"fas fa-spinner fa-pulse\"></i> Checking Octoprint for information... <br>");
                          }, 1000);
                        });
                      };

                      for (i = 0; i < printer.currentProfile[keys[t]].count; i++) {
                        _loop(i);
                      }
                    } else if (keys[t].includes("heatedBed")) {
                      if (printer.currentProfile[keys[t]]) {
                        document.getElementById("pmBedTemp").insertAdjacentHTML("beforeend", "\n                           <div class=\"col-12\">\n                          <center>\n                              <h5>Bed</h5>\n                          </center>\n                          <hr>\n                          <div class=\"md-form input-group mb-3\">\n                              <div title=\"Actual Bed temperature\" class=\"input-group-prepend\">\n                                  <span id=\"bedActual\" class=\"input-group-text\">0\xB0C</span>\n                              </div>\n                              <input title=\"Set your target Bed temperature\" id=\"bedTarget\" type=\"number\" class=\"form-control col-lg-12 col-xl-12\" placeholder=\"0\xB0C\" aria-label=\"Recipient's username\" aria-describedby=\"MaterialButton-addon2\">\n                              <div class=\"input-group-append\">\n                                  <button class=\"btn btn-md btn-light m-0 p-1\" type=\"button\" id=\"bedSet\">Set</button>\n                              </div>\n                          </div>\n                            </div>\n                         ");
                      }
                    } else if (keys[t].includes("heatedChamber")) {
                      if (printer.currentProfile[keys[t]]) {
                        document.getElementById("pmChamberTemp").insertAdjacentHTML("beforeend", "\n                           <div class=\"col-12\">\n                          <center>\n                              <h5>Chamber</h5>\n                          </center>\n                          <hr>\n                          <div class=\"md-form input-group mb-3\">\n                              <div title=\"Actual Bed temperature\" class=\"input-group-prepend\">\n                                  <span id=\"chamberActual\" class=\"input-group-text\">0\xB0C</span>\n                              </div>\n                              <input title=\"Set your target Bed temperature\" id=\"chamberTarget\" type=\"number\" class=\"form-control col-lg-12 col-xl-12\" placeholder=\"0\xB0C\" aria-label=\"Recipient's username\" aria-describedby=\"MaterialButton-addon2\">\n                              <div class=\"input-group-append\">\n                                  <button class=\"btn btn-md btn-light m-0 p-1\" type=\"button\" id=\"chamberSet\">Set</button>\n                              </div>\n                          </div>\n                            </div>\n                         ");
                      }
                    }
                  }
                }

                _fileSorting["default"].loadSort(printer);

                _customScripts["default"].generateButtons([printer]);

                return _context2.abrupt("return", true);

              case 49:
                _context2.prev = 49;
                _context2.t0 = _context2["catch"](0);

                _ui["default"].createAlert("error", "Something has gone wrong with loading the Printer Manager... Hard Failure, please submit as a bug on github: " + _context2.t0, 0, "clicked");

                console.error(_context2.t0);

              case 53:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[0, 49]]);
      }));

      function loadPrinter(_x4, _x5, _x6) {
        return _loadPrinter.apply(this, arguments);
      }

      return loadPrinter;
    }()
  }, {
    key: "applyListeners",
    value: function applyListeners(elements, printers, filamentDropDown) {
      var rangeSliders = document.querySelectorAll("input.octoRange");
      rangeSliders.forEach(function (slider) {
        slider.addEventListener("input", function (e) {
          e.target.previousSibling.previousSibling.lastChild.innerHTML = "".concat(e.target.value, "%");
        });
      });

      if (currentPrinter.state != "Disconnected") {
        elements.connectPage.connectButton.addEventListener("click", function (e) {
          elements.connectPage.connectButton.disabled = true;

          _octoprint["default"].connect(elements.connectPage.connectButton.value, currentPrinter);
        });
      } else {
        elements.connectPage.connectButton.addEventListener("click", function (e) {
          elements.connectPage.connectButton.disabled = true;

          _octoprint["default"].connect(elements.connectPage.connectButton.value, currentPrinter);
        });
      } //Control Listeners... There's a lot!


      elements.printerControls.xPlus.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "jog", "x");
      });
      elements.printerControls.xMinus.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "jog", "x", "-");
      });
      elements.printerControls.yPlus.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "jog", "y");
      });
      elements.printerControls.yMinus.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "jog", "y", "-");
      });
      elements.printerControls.xyHome.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "home", ["x", "y"]);
      });
      elements.printerControls.zPlus.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "jog", "z");
      });
      elements.printerControls.zMinus.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "jog", "z", "-");
      });
      elements.printerControls.zHome.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "home", ["z"]);
      });
      elements.printerControls.step01.addEventListener("click", function (e) {
        _octofarm["default"].post("printers/stepChange", {
          printer: currentPrinter._id,
          newSteps: "01"
        });

        elements.printerControls.step01.className = "btn btn-dark active";
        elements.printerControls.step1.className = "btn btn-light";
        elements.printerControls.step10.className = "btn btn-light";
        elements.printerControls.step100.className = "btn btn-light";
      });
      elements.printerControls.step1.addEventListener("click", function (e) {
        _octofarm["default"].post("printers/stepChange", {
          printer: currentPrinter._id,
          newSteps: "1"
        });

        elements.printerControls.step1.className = "btn btn-dark active";
        elements.printerControls.step01.className = "btn btn-light";
        elements.printerControls.step10.className = "btn btn-light";
        elements.printerControls.step100.className = "btn btn-light";
      });
      elements.printerControls.step10.addEventListener("click", function (e) {
        _octofarm["default"].post("printers/stepChange", {
          printer: currentPrinter._id,
          newSteps: "10"
        });

        elements.printerControls.step10.className = "btn btn-dark active";
        elements.printerControls.step1.className = "btn btn-light";
        elements.printerControls.step01.className = "btn btn-light";
        elements.printerControls.step100.className = "btn btn-light";
      });
      elements.printerControls.step100.addEventListener("click", function (e) {
        _octofarm["default"].post("printers/stepChange", {
          printer: currentPrinter._id,
          newSteps: "100"
        });

        elements.printerControls.step100.className = "btn btn-dark active";
        elements.printerControls.step1.className = "btn btn-light";
        elements.printerControls.step10.className = "btn btn-light";
        elements.printerControls.step01.className = "btn btn-light";
      });

      if (currentPrinter.currentProfile !== null) {
        var keys = Object.keys(currentPrinter.currentProfile);

        for (var t = 0; t < keys.length; t++) {
          if (keys[t].includes("extruder")) {
            var _loop2 = function _loop2(i) {
              var toolSet = /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(e) {
                  var flashReturn, _document$getElementB, value, opt, post;

                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          flashReturn = function flashReturn() {
                            document.getElementById("tool" + i + "Set").className = "btn btn-md btn-light m-0 p-1";
                          };

                          _document$getElementB = document.getElementById("tool" + i + "Target"), value = _document$getElementB.value;
                          document.getElementById("tool" + i + "Target").value = "";

                          if (value === "Off") {
                            value = 0;
                          }

                          opt = {
                            command: "target",
                            targets: _defineProperty({}, "tool" + i, parseInt(value))
                          };
                          _context3.next = 7;
                          return _octoprint["default"].post(currentPrinter, "printer/tool", opt);

                        case 7:
                          post = _context3.sent;

                          if (post.status === 204) {
                            document.getElementById("tool" + i + "Set").className = "btn btn-md btn-success m-0 p-1";
                            setTimeout(flashReturn, 500);
                          } else {
                            document.getElementById("tool" + i + "Set").className = "btn btn-md btn-danger m-0 p-1";
                            setTimeout(flashReturn, 500);
                          }

                        case 9:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }));

                return function toolSet(_x7) {
                  return _ref.apply(this, arguments);
                };
              }();

              document.getElementById("tool" + i + "Target").addEventListener("change", /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(e) {
                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          if (document.getElementById("tool" + i + "Target").value <= 0) {
                            document.getElementById("tool" + i + "Target").value = "0";
                          }

                        case 1:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4);
                }));

                return function (_x8) {
                  return _ref2.apply(this, arguments);
                };
              }());
              document.getElementById("tool" + i + "Target").addEventListener("keypress", /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(e) {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          if (e.key === "Enter") {
                            toolSet(e);
                          }

                        case 1:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }));

                return function (_x9) {
                  return _ref3.apply(this, arguments);
                };
              }());
              document.getElementById("tool" + i + "Set").addEventListener("click", /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(e) {
                  return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          toolSet(e);

                        case 1:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6);
                }));

                return function (_x10) {
                  return _ref4.apply(this, arguments);
                };
              }());
            };

            for (var i = 0; i < currentPrinter.currentProfile[keys[t]].count; i++) {
              _loop2(i);
            }
          } else if (keys[t].includes("heatedBed")) {
            if (currentPrinter.currentProfile[keys[t]]) {
              (function () {
                var bedSet = /*#__PURE__*/function () {
                  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(e) {
                    var flashReturn, value, opt, post;
                    return regeneratorRuntime.wrap(function _callee7$(_context7) {
                      while (1) {
                        switch (_context7.prev = _context7.next) {
                          case 0:
                            flashReturn = function flashReturn() {
                              elements.temperatures.bed[2].classList = "btn btn-md btn-light m-0 p-1";
                            };

                            value = elements.temperatures.bed[1].value;
                            elements.temperatures.bed[1].value = "";

                            if (value === "Off") {
                              value = 0;
                            }

                            opt = {
                              command: "target",
                              target: parseInt(value)
                            };
                            _context7.next = 7;
                            return _octoprint["default"].post(currentPrinter, "printer/bed", opt);

                          case 7:
                            post = _context7.sent;

                            if (post.status === 204) {
                              elements.temperatures.bed[2].className = "btn btn-md btn-success m-0 p-1";
                              elements.temperatures.bed[2].value = "";
                              setTimeout(flashReturn, 500);
                            } else {
                              elements.temperatures.bed[2].className = "btn btn-md btn-success m-0 p-1";
                              elements.temperatures.bed[2].value = "";
                              setTimeout(flashReturn, 500);
                            }

                          case 9:
                          case "end":
                            return _context7.stop();
                        }
                      }
                    }, _callee7);
                  }));

                  return function bedSet(_x11) {
                    return _ref5.apply(this, arguments);
                  };
                }();

                if (elements.temperatures.bed[1]) {
                  elements.temperatures.bed[1].addEventListener("change", /*#__PURE__*/function () {
                    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(e) {
                      return regeneratorRuntime.wrap(function _callee8$(_context8) {
                        while (1) {
                          switch (_context8.prev = _context8.next) {
                            case 0:
                              if (elements.temperatures.bed[1].value <= 0) {
                                elements.temperatures.bed[1].value = "";
                              }

                            case 1:
                            case "end":
                              return _context8.stop();
                          }
                        }
                      }, _callee8);
                    }));

                    return function (_x12) {
                      return _ref6.apply(this, arguments);
                    };
                  }());
                }

                elements.temperatures.bed.forEach(function (node) {
                  if (node.id.includes("Target")) {
                    if (node) {
                      node.addEventListener("keypress", /*#__PURE__*/function () {
                        var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(e) {
                          return regeneratorRuntime.wrap(function _callee9$(_context9) {
                            while (1) {
                              switch (_context9.prev = _context9.next) {
                                case 0:
                                  if (e.key === "Enter") {
                                    bedSet(e);
                                  }

                                case 1:
                                case "end":
                                  return _context9.stop();
                              }
                            }
                          }, _callee9);
                        }));

                        return function (_x13) {
                          return _ref7.apply(this, arguments);
                        };
                      }());
                    }
                  }

                  if (node.id.includes("Set")) {
                    if (node) {
                      node.addEventListener("click", /*#__PURE__*/function () {
                        var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(e) {
                          return regeneratorRuntime.wrap(function _callee10$(_context10) {
                            while (1) {
                              switch (_context10.prev = _context10.next) {
                                case 0:
                                  bedSet(e);

                                case 1:
                                case "end":
                                  return _context10.stop();
                              }
                            }
                          }, _callee10);
                        }));

                        return function (_x14) {
                          return _ref8.apply(this, arguments);
                        };
                      }());
                    }
                  }
                });
              })();
            }
          } else if (keys[t].includes("heatedChamber")) {
            if (currentPrinter.currentProfile[keys[t]]) {
              (function () {
                var chamberSet = /*#__PURE__*/function () {
                  var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(e) {
                    var flashReturn, value, opt, post;
                    return regeneratorRuntime.wrap(function _callee11$(_context11) {
                      while (1) {
                        switch (_context11.prev = _context11.next) {
                          case 0:
                            flashReturn = function flashReturn() {
                              elements.temperatures.chamber[2].classList = "btn btn-md btn-light m-0 p-1";
                            };

                            value = elements.temperatures.chamber[1].value;
                            elements.temperatures.chamber[1].value = "";

                            if (value === "Off") {
                              value = 0;
                            }

                            opt = {
                              command: "target",
                              target: parseInt(value)
                            };
                            _context11.next = 7;
                            return _octoprint["default"].post(currentPrinter, "printer/chamber", opt);

                          case 7:
                            post = _context11.sent;

                            if (post.status === 204) {
                              elements.temperatures.chamber[2].className = "btn btn-md btn-success m-0 p-1";
                              setTimeout(flashReturn, 500);
                            } else {
                              elements.temperatures.chamber[2].className = "btn btn-md btn-success m-0 p-1";
                              setTimeout(flashReturn, 500);
                            }

                          case 9:
                          case "end":
                            return _context11.stop();
                        }
                      }
                    }, _callee11);
                  }));

                  return function chamberSet(_x15) {
                    return _ref9.apply(this, arguments);
                  };
                }();

                if (elements.temperatures.chamber[1]) {
                  elements.temperatures.chamber[1].addEventListener("change", /*#__PURE__*/function () {
                    var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(e) {
                      return regeneratorRuntime.wrap(function _callee12$(_context12) {
                        while (1) {
                          switch (_context12.prev = _context12.next) {
                            case 0:
                              if (elements.temperatures.chamber[1].value <= 0) {
                                elements.temperatures.chamber[1].value = "";
                              }

                            case 1:
                            case "end":
                              return _context12.stop();
                          }
                        }
                      }, _callee12);
                    }));

                    return function (_x16) {
                      return _ref10.apply(this, arguments);
                    };
                  }());
                }

                elements.temperatures.chamber.forEach(function (node) {
                  if (node.id.includes("Target")) {
                    if (node) {
                      node.addEventListener("keypress", /*#__PURE__*/function () {
                        var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(e) {
                          return regeneratorRuntime.wrap(function _callee13$(_context13) {
                            while (1) {
                              switch (_context13.prev = _context13.next) {
                                case 0:
                                  if (e.key === "Enter") {
                                    chamberSet(e);
                                  }

                                case 1:
                                case "end":
                                  return _context13.stop();
                              }
                            }
                          }, _callee13);
                        }));

                        return function (_x17) {
                          return _ref11.apply(this, arguments);
                        };
                      }());
                    }
                  }

                  if (node.id.includes("Set")) {
                    if (node) {
                      node.addEventListener("click", /*#__PURE__*/function () {
                        var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(e) {
                          return regeneratorRuntime.wrap(function _callee14$(_context14) {
                            while (1) {
                              switch (_context14.prev = _context14.next) {
                                case 0:
                                  chamberSet(e);

                                case 1:
                                case "end":
                                  return _context14.stop();
                              }
                            }
                          }, _callee14);
                        }));

                        return function (_x18) {
                          return _ref12.apply(this, arguments);
                        };
                      }());
                    }
                  }
                });
              })();
            }
          }
        }
      }

      elements.printerControls.feedRate.addEventListener("click", /*#__PURE__*/function () {
        var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(e) {
          var flashReturn, value, opt, post;
          return regeneratorRuntime.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  flashReturn = function flashReturn() {
                    e.target.classList = "btn btn-light";
                  };

                  value = elements.printerControls.feedRateValue.innerHTML;
                  value = value.replace("%", "");

                  _octofarm["default"].post("printers/feedChange", {
                    printer: currentPrinter._id,
                    newSteps: value
                  });

                  opt = {
                    command: "feedrate",
                    factor: parseInt(value)
                  };
                  _context15.next = 7;
                  return _octoprint["default"].post(currentPrinter, "printer/printhead", opt);

                case 7:
                  post = _context15.sent;

                  if (post.status === 204) {
                    e.target.classList = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    e.target.classList = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 9:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15);
        }));

        return function (_x19) {
          return _ref13.apply(this, arguments);
        };
      }());
      elements.printerControls.flowRate.addEventListener("click", /*#__PURE__*/function () {
        var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(e) {
          var flashReturn, value, opt, post;
          return regeneratorRuntime.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  flashReturn = function flashReturn() {
                    e.target.classList = "btn btn-light";
                  };

                  value = elements.printerControls.flowRateValue.innerHTML;
                  value = value.replace("%", "");

                  _octofarm["default"].post("printers/flowChange", {
                    printer: currentPrinter._id,
                    newSteps: value
                  });

                  opt = {
                    command: "flowrate",
                    factor: parseInt(value)
                  };
                  _context16.next = 7;
                  return _octoprint["default"].post(currentPrinter, "printer/tool", opt);

                case 7:
                  post = _context16.sent;

                  if (post.status === 204) {
                    e.target.classList = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    e.target.classList = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 9:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16);
        }));

        return function (_x20) {
          return _ref14.apply(this, arguments);
        };
      }());
      elements.printerControls.motorsOff.addEventListener("click", /*#__PURE__*/function () {
        var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(e) {
          var flashReturn, opt, post;
          return regeneratorRuntime.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  flashReturn = function flashReturn() {
                    e.target.classList = "btn btn-light";
                  };

                  opt = {
                    commands: ["M18"]
                  };
                  _context17.next = 4;
                  return _octoprint["default"].post(currentPrinter, "printer/command", opt);

                case 4:
                  post = _context17.sent;

                  if (post.status === 204) {
                    e.target.classList = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    e.target.classList = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 6:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee17);
        }));

        return function (_x21) {
          return _ref15.apply(this, arguments);
        };
      }());
      elements.printerControls.fansOn.addEventListener("click", /*#__PURE__*/function () {
        var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(e) {
          var fanspeed, flashReturn, opt, post;
          return regeneratorRuntime.wrap(function _callee18$(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  fanspeed = elements.printerControls.fanPercent.innerHTML;
                  fanspeed = fanspeed.replace("%", "");
                  fanspeed /= 100;
                  fanspeed = 255 * fanspeed;
                  fanspeed = Math.floor(fanspeed);

                  flashReturn = function flashReturn() {
                    e.target.classList = "btn btn-light";
                  };

                  opt = {
                    commands: ["M106 S".concat(fanspeed)]
                  };
                  _context18.next = 9;
                  return _octoprint["default"].post(currentPrinter, "printer/command", opt);

                case 9:
                  post = _context18.sent;

                  if (post.status === 204) {
                    e.target.classList = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    e.target.classList = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 11:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee18);
        }));

        return function (_x22) {
          return _ref16.apply(this, arguments);
        };
      }());
      elements.printerControls.fansOff.addEventListener("click", /*#__PURE__*/function () {
        var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(e) {
          var flashReturn, opt, post;
          return regeneratorRuntime.wrap(function _callee19$(_context19) {
            while (1) {
              switch (_context19.prev = _context19.next) {
                case 0:
                  flashReturn = function flashReturn() {
                    e.target.classList = "btn btn-light";
                  };

                  opt = {
                    commands: ["M107"]
                  };
                  _context19.next = 4;
                  return _octoprint["default"].post(currentPrinter, "printer/command", opt);

                case 4:
                  post = _context19.sent;

                  if (post.status === 204) {
                    e.target.classList = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    e.target.classList = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 6:
                case "end":
                  return _context19.stop();
              }
            }
          }, _callee19);
        }));

        return function (_x23) {
          return _ref17.apply(this, arguments);
        };
      }());
      elements.printerControls.extrude.addEventListener("click", /*#__PURE__*/function () {
        var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(e) {
          var flashReturn, select, value, opt, post;
          return regeneratorRuntime.wrap(function _callee20$(_context20) {
            while (1) {
              switch (_context20.prev = _context20.next) {
                case 0:
                  flashReturn = function flashReturn() {
                    e.target.classList = "btn btn-light";
                  };

                  if (!(elements.printerControls.extruder.value != undefined && elements.printerControls.extruder.value !== "")) {
                    _context20.next = 12;
                    break;
                  }

                  select = _octoprint["default"].selectTool(currentPrinter, "tool0");

                  if (!select) {
                    _context20.next = 10;
                    break;
                  }

                  value = elements.printerControls.extruder.value;
                  opt = {
                    command: "extrude",
                    amount: parseInt(value)
                  };
                  _context20.next = 8;
                  return _octoprint["default"].post(currentPrinter, "printer/tool", opt);

                case 8:
                  post = _context20.sent;

                  if (post.status === 204) {
                    e.target.classList = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    e.target.classList = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 10:
                  _context20.next = 13;
                  break;

                case 12:
                  _ui["default"].createAlert("error", "You haven't told octoprint how much you'd like to extrude...", 3000, "clicked");

                case 13:
                case "end":
                  return _context20.stop();
              }
            }
          }, _callee20);
        }));

        return function (_x24) {
          return _ref18.apply(this, arguments);
        };
      }());
      elements.printerControls.retract.addEventListener("click", /*#__PURE__*/function () {
        var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(e) {
          var flashReturn, select, value, opt, post;
          return regeneratorRuntime.wrap(function _callee21$(_context21) {
            while (1) {
              switch (_context21.prev = _context21.next) {
                case 0:
                  flashReturn = function flashReturn() {
                    e.target.classList = "btn btn-light";
                  };

                  if (!(elements.printerControls.extruder.value != undefined && elements.printerControls.extruder.value !== "")) {
                    _context21.next = 13;
                    break;
                  }

                  select = _octoprint["default"].selectTool(currentPrinter, "tool0");

                  if (!select) {
                    _context21.next = 11;
                    break;
                  }

                  value = elements.printerControls.extruder.value;
                  value = "-" + value;
                  opt = {
                    command: "extrude",
                    amount: parseInt(value)
                  };
                  _context21.next = 9;
                  return _octoprint["default"].post(currentPrinter, "printer/tool", opt);

                case 9:
                  post = _context21.sent;

                  if (post.status === 204) {
                    e.target.classList = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    e.target.classList = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 11:
                  _context21.next = 14;
                  break;

                case 13:
                  _ui["default"].createAlert("error", "You haven't told octoprint how much you'd like to retract...", 3000, "clicked");

                case 14:
                case "end":
                  return _context21.stop();
              }
            }
          }, _callee21);
        }));

        return function (_x25) {
          return _ref19.apply(this, arguments);
        };
      }());
      elements.printerControls.printStart.addEventListener("click", /*#__PURE__*/function () {
        var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(e) {
          var opts;
          return regeneratorRuntime.wrap(function _callee22$(_context22) {
            while (1) {
              switch (_context22.prev = _context22.next) {
                case 0:
                  e.target.disabled = true;
                  opts = {
                    command: "start"
                  };

                  _octoprint["default"].jobAction(currentPrinter, opts, e);

                case 3:
                case "end":
                  return _context22.stop();
              }
            }
          }, _callee22);
        }));

        return function (_x26) {
          return _ref20.apply(this, arguments);
        };
      }());
      elements.printerControls.printPause.addEventListener("click", function (e) {
        e.target.disabled = true;
        var opts = {
          command: "pause",
          action: "pause"
        };

        _octoprint["default"].jobAction(currentPrinter, opts, e);
      });
      elements.printerControls.printRestart.addEventListener("click", function (e) {
        e.target.disabled = true;
        var opts = {
          command: "restart"
        };

        _octoprint["default"].jobAction(currentPrinter, opts, e);
      });
      elements.printerControls.printResume.addEventListener("click", function (e) {
        e.target.disabled = true;
        var opts = {
          command: "pause",
          action: "resume"
        };

        _octoprint["default"].jobAction(currentPrinter, opts, e);
      });
      elements.printerControls.printStop.addEventListener("click", function (e) {
        bootbox.confirm({
          message: "".concat(currentPrinter.printerName, ": <br>Are you sure you want to cancel the ongoing print?"),
          buttons: {
            cancel: {
              label: "<i class=\"fa fa-times\"></i> Cancel"
            },
            confirm: {
              label: "<i class=\"fa fa-check\"></i> Confirm"
            }
          },
          callback: function callback(result) {
            if (result) {
              e.target.disabled = true;
              var opts = {
                command: "cancel"
              };

              _octoprint["default"].jobAction(currentPrinter, opts, e);
            }
          }
        });
      });

      var submitTerminal = /*#__PURE__*/function () {
        var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(e) {
          var input, flashReturn, opt, post;
          return regeneratorRuntime.wrap(function _callee23$(_context23) {
            while (1) {
              switch (_context23.prev = _context23.next) {
                case 0:
                  input = elements.terminal.input.value.match(/[^\r\n]+/g);
                  console.log(input);

                  if (!(input !== null)) {
                    _context23.next = 6;
                    break;
                  }

                  input = input.map(function (name) {
                    if (!name.includes("=")) {
                      return name.toLocaleUpperCase();
                    } else {
                      return name;
                    }
                  });
                  _context23.next = 7;
                  break;

                case 6:
                  return _context23.abrupt("return", null);

                case 7:
                  elements.terminal.input.value = "";

                  flashReturn = function flashReturn() {
                    elements.terminal.sendBtn = "btn btn-secondary";
                  };

                  opt = {
                    commands: [input]
                  };
                  console.log(opt);
                  _context23.next = 13;
                  return _octoprint["default"].post(currentPrinter, "printer/command", opt);

                case 13:
                  post = _context23.sent;

                  if (post.status === 204) {
                    elements.terminal.sendBtn = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    elements.terminal.sendBtn = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 15:
                case "end":
                  return _context23.stop();
              }
            }
          }, _callee23);
        }));

        return function submitTerminal(_x27) {
          return _ref21.apply(this, arguments);
        };
      }();

      elements.terminal.input.addEventListener("keypress", /*#__PURE__*/function () {
        var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(e) {
          return regeneratorRuntime.wrap(function _callee24$(_context24) {
            while (1) {
              switch (_context24.prev = _context24.next) {
                case 0:
                  if (e.key === "Enter" && !e.shiftKey) {
                    submitTerminal(e);
                  }

                case 1:
                case "end":
                  return _context24.stop();
              }
            }
          }, _callee24);
        }));

        return function (_x28) {
          return _ref22.apply(this, arguments);
        };
      }());
      elements.terminal.sendBtn.addEventListener("click", /*#__PURE__*/function () {
        var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(e) {
          return regeneratorRuntime.wrap(function _callee25$(_context25) {
            while (1) {
              switch (_context25.prev = _context25.next) {
                case 0:
                  submitTerminal(e);

                case 1:
                case "end":
                  return _context25.stop();
              }
            }
          }, _callee25);
        }));

        return function (_x29) {
          return _ref23.apply(this, arguments);
        };
      }());
      elements.fileManager.uploadFiles.addEventListener("change", function () {
        _ui["default"].createAlert("warning", "Your files for Printer: " + currentPrinter.printerName + " has begun. Please do not navigate away from this page.", 3000, "Clicked");

        _fileManager["default"].handleFiles(this.files, currentPrinter);
      });
      elements.fileManager.createFolderBtn.addEventListener("click", function (e) {
        _fileManager["default"].createFolder(currentPrinter);
      });
      elements.fileManager.fileSearch.addEventListener("keyup", function (e) {
        _fileManager["default"].search(currentPrinter._id);
      });
      elements.fileManager.uploadPrintFile.addEventListener("change", function () {
        _fileManager["default"].handleFiles(this.files, currentPrinter, "print");
      });
      elements.fileManager.back.addEventListener("click", function (e) {
        _fileManager["default"].openFolder(undefined, undefined, currentPrinter);
      });
      elements.fileManager.syncFiles.addEventListener("click", function (e) {
        _fileManager["default"].reSyncFiles(e, currentPrinter);
      });
    }
  }, {
    key: "grabPage",
    value: function grabPage() {
      var printerManager = {
        mainPage: {
          title: document.getElementById("printerSelection"),
          status: document.getElementById("pmStatus")
        },
        jobStatus: {
          expectedCompletionDate: document.getElementById("pmExpectedCompletionDate"),
          expectedTime: document.getElementById("pmExpectedTime"),
          remainingTime: document.getElementById("pmTimeRemain"),
          elapsedTime: document.getElementById("pmTimeElapsed"),
          currentZ: document.getElementById("pmCurrentZ"),
          fileName: document.getElementById("pmFileName"),
          progressBar: document.getElementById("pmProgress"),
          expectedWeight: document.getElementById("pmExpectedWeight"),
          expectedPrinterCost: document.getElementById("pmExpectedPrinterCost"),
          expectedFilamentCost: document.getElementById("pmExpectedFilamentCost"),
          expectedTotalCosts: document.getElementById("pmJobCosts"),
          printerResends: document.getElementById("printerResends"),
          resendTitle: document.getElementById("resentTitle")
        },
        connectPage: {
          printerPort: document.getElementById("printerPortDrop"),
          printerBaud: document.getElementById("printerBaudDrop"),
          printerProfile: document.getElementById("printerProfileDrop"),
          printerConnect: document.getElementById("printerConnect"),
          connectButton: document.getElementById("pmConnect"),
          portDropDown: document.getElementById("pmSerialPort"),
          baudDropDown: document.getElementById("pmBaudrate"),
          profileDropDown: document.getElementById("pmProfile")
        },
        terminal: {
          terminalWindow: document.getElementById("terminal"),
          sendBtn: document.getElementById("terminalInputBtn"),
          input: document.getElementById("terminalInput")
        },
        printerControls: {
          filamentDrop: document.getElementById("filamentManagerFolderSelect"),
          fileUpload: document.getElementById("printerManagerUploadBtn"),
          xPlus: document.getElementById("pcXpos"),
          xMinus: document.getElementById("pcXneg"),
          yPlus: document.getElementById("pcYpos"),
          yMinus: document.getElementById("pcYneg"),
          xyHome: document.getElementById("pcXYhome"),
          zPlus: document.getElementById("pcZpos"),
          zMinus: document.getElementById("pcZneg"),
          zHome: document.getElementById("pcZhome"),
          step01: document.getElementById("pcAxisSteps01"),
          step1: document.getElementById("pcAxisSteps1"),
          step10: document.getElementById("pcAxisSteps10"),
          step100: document.getElementById("pcAxisSteps100"),
          feedRate: document.getElementById("pcFeedRate"),
          flowRate: document.getElementById("pcFlowRate"),
          feedRateValue: document.getElementById("pcFeedValue"),
          flowRateValue: document.getElementById("pcFlowValue"),
          motorsOff: document.getElementById("pcMotorTog"),
          fanPercent: document.getElementById("pcFanPercent"),
          fansOn: document.getElementById("pcFanOn"),
          fansOff: document.getElementById("pcFanOff"),
          extruder: document.getElementById("pcExtruder"),
          extrude: document.getElementById("pcExtrude"),
          retract: document.getElementById("pcRetract"),
          progress: document.getElementById("pcAxisSteps100"),
          printStart: document.getElementById("pmPrintStart"),
          printPause: document.getElementById("pmPrintPause"),
          printRestart: document.getElementById("pmPrintRestart"),
          printResume: document.getElementById("pmPrintResume"),
          printStop: document.getElementById("pmPrintStop")
        },
        fileManager: {
          printerStorage: document.getElementById("printerStorage"),
          fileFolderCount: document.getElementById("printerFileCount"),
          fileSearch: document.getElementById("searchFiles"),
          uploadFiles: document.getElementById("fileUploadBtn"),
          uploadPrintFile: document.getElementById("fileUploadPrintBtn"),
          syncFiles: document.getElementById("fileReSync"),
          back: document.getElementById("fileBackBtn"),
          createFolderBtn: document.getElementById("createFolderBtn")
        },
        temperatures: {
          tempTime: document.getElementById("pmTempTime"),
          bed: document.querySelectorAll("[id^='bed']"),
          chamber: document.querySelectorAll("[id^='chamber']"),
          tools: document.querySelectorAll("[id^='tool']")
        },
        filamentDrops: document.querySelectorAll("[id$=FilamentManagerFolderSelect]")
      };
      return printerManager;
    }
  }, {
    key: "applyState",
    value: function () {
      var _applyState = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(printer, elements) {
        var dateComplete, camField, currentDate, futureDateString, futureTimeString, fileName, _fileName, usageDisplay, filamentCost, printCost, isScrolledToBottom, waitCheck, tempCheck, sdCheck, l, tempMess, sdMess, sdMess2, waitMess;

        return regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                //Garbage collection for terminal
                if (typeof printer.fileList !== "undefined") {
                  elements.fileManager.fileFolderCount.innerHTML = "<i class=\"fas fa-file\"></i> ".concat(printer.fileList.filecount, " <i class=\"fas fa-folder\"></i> ").concat(printer.fileList.folderCount);
                }

                if (typeof printer.storage !== "undefined") {
                  elements.fileManager.printerStorage.innerHTML = "<i class=\"fas fa-hdd\"></i> ".concat(_calc["default"].bytes(printer.storage.free), " / ").concat(_calc["default"].bytes(printer.storage.total));
                } else {
                  elements.fileManager.printerStorage.innerHTML = "<i class=\"fas fa-hdd\"></i> ".concat(_calc["default"].bytes(0), " / ").concat(_calc["default"].bytes(0));
                }

                elements.mainPage.status.innerHTML = printer.printerState.state;
                elements.mainPage.status.className = "btn btn-".concat(printer.printerState.colour.name, " mb-2");
                dateComplete = null;
                camField = document.getElementById("fileThumbnail");

                if (typeof printer.currentJob !== "undefined" && printer.currentJob.thumbnail != null) {
                  if (camField.innerHTML !== "<center><img width=\"50%\" src=\"".concat(printer.printerURL, "/").concat(printer.currentJob.thumbnail, "\"></center>")) {
                    camField.innerHTML = "<center><img width=\"50%\" src=\"".concat(printer.printerURL, "/").concat(printer.currentJob.thumbnail, "\"></center>");
                  }
                } else {
                  if (camField.innerHTML !== "") {
                    camField.innerHTML = "";
                  }
                }

                if (typeof printer.currentJob !== "undefined" && printer.currentJob.printTimeRemaining !== null) {
                  currentDate = new Date();

                  if (printer.currentJob.progress === 100) {
                    dateComplete = "Print Ready for Harvest";
                  } else {
                    currentDate = currentDate.getTime();
                    futureDateString = new Date(currentDate + printer.currentJob.printTimeRemaining * 1000).toDateString();
                    futureTimeString = new Date(currentDate + printer.currentJob.printTimeRemaining * 1000).toTimeString();
                    futureTimeString = futureTimeString.substring(0, 8);
                    dateComplete = futureDateString + ": " + futureTimeString;
                  }
                } else {
                  dateComplete = "No Active Print";
                }

                elements.jobStatus.expectedCompletionDate.innerHTML = dateComplete;

                if (typeof printer.resends !== "undefined" && printer.resends !== null) {
                  if (elements.jobStatus.printerResends.classList.contains("d-none")) {
                    elements.jobStatus.printerResends.classList.remove("d-none");
                    elements.jobStatus.resendTitle.classList.remove("d-none");
                  }

                  elements.jobStatus.printerResends.innerHTML = "\n      ".concat(printer.resends.count, " / ").concat(printer.resends.transmitted / 1000, "K (").concat(printer.resends.ratio.toFixed(0), ")\n      ");
                }

                if (typeof printer.currentJob !== "undefined" && printer.currentJob.progress !== null) {
                  elements.jobStatus.progressBar.innerHTML = printer.currentJob.progress.toFixed(0) + "%";
                  elements.jobStatus.progressBar.style.width = printer.currentJob.progress.toFixed(2) + "%";
                } else {
                  elements.jobStatus.progressBar.innerHTML = 0 + "%";
                  elements.jobStatus.progressBar.style.width = 0 + "%";
                }

                elements.jobStatus.expectedTime.innerHTML = _calc["default"].generateTime(printer.currentJob.expectedPrintTime);
                elements.jobStatus.remainingTime.innerHTML = _calc["default"].generateTime(printer.currentJob.printTimeRemaining);
                elements.jobStatus.elapsedTime.innerHTML = _calc["default"].generateTime(printer.currentJob.printTimeElapsed);

                if (printer.currentJob.currentZ === null) {
                  elements.jobStatus.currentZ.innerHTML = "No Active Print";
                } else {
                  elements.jobStatus.currentZ.innerHTML = printer.currentJob.currentZ + "mm";
                }

                if (typeof printer.currentJob === "undefined") {
                  elements.jobStatus.fileName.setAttribute("title", "No File Selected");
                  fileName = "No File Selected";
                  elements.jobStatus.fileName.innerHTML = fileName;
                } else {
                  elements.jobStatus.fileName.setAttribute("title", printer.currentJob.filePath);
                  _fileName = printer.currentJob.fileDisplay;

                  if (_fileName.length > 49) {
                    _fileName = _fileName.substring(0, 49) + "...";
                  }

                  elements.jobStatus.fileName.innerHTML = printer.currentJob.fileDisplay;
                  usageDisplay = "";
                  filamentCost = "";

                  if (printer.currentJob.expectedTotals !== null) {
                    usageDisplay += "<p class=\"mb-0\"><b>Total: </b>".concat(printer.currentJob.expectedTotals.totalLength.toFixed(2), "m / ").concat(printer.currentJob.expectedTotals.totalWeight.toFixed(2), "g</p>");
                    elements.jobStatus.expectedTotalCosts.innerHTML = printer.currentJob.expectedTotals.totalCost;
                  } else {
                    usageDisplay = "No File Selected";
                    elements.jobStatus.expectedTotalCosts.innerHTML = "No File Selected";
                  }

                  if (_typeof(printer.currentJob.expectedFilamentCosts) === "object") {
                    if (printer.currentJob.expectedFilamentCosts !== null) {
                      printer.currentJob.expectedFilamentCosts.forEach(function (unit) {
                        var firstKey = Object.keys(unit)[0];
                        var theLength = parseFloat(unit[firstKey].length);
                        var theWeight = parseFloat(unit[firstKey].weight);
                        usageDisplay += "<p class=\"mb-0\"><b>".concat(unit[firstKey].toolName, ": </b>").concat(theLength.toFixed(2), "m / ").concat(theWeight.toFixed(2), "g</p>");
                      });
                      filamentCost += "<p class=\"mb-0\"><b>Total: </b>".concat(printer.currentJob.expectedTotals.spoolCost.toFixed(2), "</p>");
                      printer.currentJob.expectedFilamentCosts.forEach(function (unit) {
                        var firstKey = Object.keys(unit)[0];
                        filamentCost += "<p class=\"mb-0\"><b>".concat(unit[firstKey].toolName, ": </b>").concat(unit[firstKey].cost, "</p>");
                      });
                    } else {
                      filamentCost = "No length estimate";
                    }
                  } else {
                    filamentCost = "No File Selected";
                  }

                  elements.jobStatus.expectedWeight.innerHTML = usageDisplay;
                  elements.jobStatus.expectedFilamentCost.innerHTML = filamentCost;
                  printCost = printer.currentJob.expectedPrinterCosts;
                  elements.jobStatus.expectedPrinterCost.innerHTML = printCost;
                }

                if (printer.printerState.colour.category === "Active") {
                  PrinterManager.controls(true, true);
                  elements.printerControls.printStart.disabled = true;
                  elements.printerControls.printStart.style.display = "inline-block";
                  elements.printerControls.printPause.disabled = false;
                  elements.printerControls.printPause.style.display = "inline-block";
                  elements.printerControls.printStop.disabled = false;
                  elements.printerControls.printStop.style.display = "inline-block";
                  elements.printerControls.printRestart.disabled = true;
                  elements.printerControls.printRestart.style.display = "none";
                  elements.printerControls.printResume.disabled = true;
                  elements.printerControls.printResume.style.display = "none";
                } else if (printer.printerState.colour.category === "Idle" || printer.printerState.colour.category === "Complete") {
                  PrinterManager.controls(false);
                  elements.connectPage.connectButton.value = "disconnect";
                  elements.connectPage.connectButton.innerHTML = "Disconnect";
                  elements.connectPage.connectButton.classList = "btn btn-danger inline";
                  elements.connectPage.connectButton.disabled = false;
                  elements.connectPage.printerPort.disabled = true;
                  elements.connectPage.printerBaud.disabled = true;
                  elements.connectPage.printerProfile.disabled = true;

                  if (typeof printer.job !== "undefined" && printer.job.filename === "No File Selected") {
                    elements.printerControls.printStart.disabled = true;
                    elements.printerControls.printStart.style.display = "inline-block";
                    elements.printerControls.printPause.disabled = true;
                    elements.printerControls.printPause.style.display = "inline-block";
                    elements.printerControls.printStop.disabled = true;
                    elements.printerControls.printStop.style.display = "inline-block";
                    elements.printerControls.printRestart.disabled = true;
                    elements.printerControls.printRestart.style.display = "none";
                    elements.printerControls.printResume.disabled = true;
                    elements.printerControls.printResume.style.display = "none";
                  } else {
                    if (printer.printerState.state === "Paused") {
                      PrinterManager.controls(false);
                      elements.printerControls.printStart.disabled = true;
                      elements.printerControls.printStart.style.display = "none";
                      elements.printerControls.printPause.disabled = true;
                      elements.printerControls.printPause.style.display = "none";
                      elements.printerControls.printStop.disabled = false;
                      elements.printerControls.printStop.style.display = "inline-block";
                      elements.printerControls.printRestart.disabled = false;
                      elements.printerControls.printRestart.style.display = "inline-block";
                      elements.printerControls.printResume.disabled = false;
                      elements.printerControls.printResume.style.display = "inline-block";
                    } else {
                      elements.printerControls.printStart.disabled = false;
                      elements.printerControls.printStart.style.display = "inline-block";
                      elements.printerControls.printPause.disabled = true;
                      elements.printerControls.printPause.style.display = "inline-block";
                      elements.printerControls.printStop.disabled = true;
                      elements.printerControls.printStop.style.display = "inline-block";
                      elements.printerControls.printRestart.disabled = true;
                      elements.printerControls.printRestart.style.display = "none";
                      elements.printerControls.printResume.disabled = true;
                      elements.printerControls.printResume.style.display = "none";
                    }
                  }
                } else if (printer.printerState.colour.category === "Offline" || printer.printerState.colour.category === "Disconnected") {
                  if (printer.printerState.state === "Error!") {
                    document.getElementById("pmSerialPort").disabled = false;
                    document.getElementById("pmBaudrate").disabled = false;
                    document.getElementById("pmProfile").disabled = false;
                  }

                  elements.connectPage.connectButton.value = "connect";
                  elements.connectPage.connectButton.innerHTML = "Connect";
                  elements.connectPage.connectButton.classList = "btn btn-success inline";
                  elements.connectPage.connectButton.disabled = false;
                  PrinterManager.controls(true);
                  elements.printerControls.printStart.disabled = true;
                  elements.printerControls.printStart.style.display = "inline-block";
                  elements.printerControls.printPause.disabled = true;
                  elements.printerControls.printPause.style.display = "inline-block";
                  elements.printerControls.printStop.disabled = true;
                  elements.printerControls.printStop.style.display = "inline-block";
                  elements.printerControls.printRestart.disabled = true;
                  elements.printerControls.printRestart.style.display = "none";
                  elements.printerControls.printResume.disabled = true;
                  elements.printerControls.printResume.style.display = "none";

                  if (printer.printerState.state.category === "Offline" || printer.state === "Shutdown" || printer.state === "Searching...") {
                    $("#printerManagerModal").modal("hide");
                  }
                }

                isScrolledToBottom = elements.terminal.terminalWindow.scrollHeight - elements.terminal.terminalWindow.clientHeight <= elements.terminal.terminalWindow.scrollTop + 1;
                elements.terminal.terminalWindow.innerHTML = "";

                if (typeof printer.terminal !== "undefined") {
                  waitCheck = document.getElementById("waitMessages").checked;
                  tempCheck = document.getElementById("tempMessages").checked;
                  sdCheck = document.getElementById("sdMessages").checked;

                  for (l = 0; l < printer.terminal.length; l++) {
                    tempMess = /(Send: (N\d+\s+)?M105)|(Recv:\s+(ok\s+)?.*(B|T\d*):\d+)/;
                    sdMess = /(Send: (N\d+\s+)?M27)|(Recv: SD printing byte)/;
                    sdMess2 = /Recv: Not SD printing/;
                    waitMess = /Recv: wait/;

                    if (printer.terminal[l].match(tempMess)) {
                      if (tempCheck) {
                        elements.terminal.terminalWindow.insertAdjacentHTML("beforeend", "\n          <div id=\"logLine".concat(l, "\" class=\"logLine temperatureMessage\">").concat(printer.terminal[l], "</div>\n        "));
                      } else {
                        elements.terminal.terminalWindow.insertAdjacentHTML("beforeend", "\n          <div id=\"logLine".concat(l, "\" class=\"logLine temperatureMessage d-none\">").concat(printer.terminal[l], "</div>\n        "));
                      }
                    } else if (printer.terminal[l].match(sdMess) || printer.terminal[l].match(sdMess2)) {
                      if (sdCheck) {
                        elements.terminal.terminalWindow.insertAdjacentHTML("beforeend", "\n          <div id=\"logLine".concat(l, "\" class=\"logLine sdMessage\">").concat(printer.terminal[l], "</div>\n        "));
                      } else {
                        elements.terminal.terminalWindow.insertAdjacentHTML("beforeend", "\n          <div id=\"logLine".concat(l, "\" class=\"logLine sdMessage d-none\">").concat(printer.terminal[l], "</div>\n        "));
                      }
                    } else if (printer.terminal[l].match(waitMess)) {
                      if (waitCheck) {
                        elements.terminal.terminalWindow.insertAdjacentHTML("beforeend", "\n          <div id=\"logLine".concat(l, "\" class=\"logLine waitMessage\">").concat(printer.terminal[l], "</div>\n        "));
                      } else {
                        elements.terminal.terminalWindow.insertAdjacentHTML("beforeend", "\n          <div id=\"logLine".concat(l, "\" class=\"logLine waitMessage d-none\">").concat(printer.terminal[l], "</div>\n        "));
                      }
                    } else {
                      elements.terminal.terminalWindow.insertAdjacentHTML("beforeend", "\n          <div id=\"logLine".concat(l, "\" class=\"logLine\">").concat(printer.terminal[l], "</div>\n        "));
                    }
                  }
                }

                if (isScrolledToBottom) {
                  elements.terminal.terminalWindow.scrollTop = elements.terminal.terminalWindow.scrollHeight - elements.terminal.terminalWindow.clientHeight;
                }

              case 21:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26);
      }));

      function applyState(_x30, _x31) {
        return _applyState.apply(this, arguments);
      }

      return applyState;
    }()
  }, {
    key: "applyTemps",
    value: function () {
      var _applyTemps = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(printer, elements) {
        var currentTemp, keys;
        return regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                if (printer.tools !== null) {
                  currentTemp = printer.tools[0];
                  elements.temperatures.tempTime.innerHTML = "Updated: <i class=\"far fa-clock\"></i> " + new Date(currentTemp.time * 1000).toTimeString().substring(1, 8);

                  if (currentTemp.bed.actual !== null) {
                    elements.temperatures.bed[0].innerHTML = currentTemp.bed.actual + "°C";
                    elements.temperatures.bed[1].placeholder = currentTemp.bed.target + "°C";
                  }

                  if (currentTemp.chamber.actual !== null) {
                    elements.temperatures.chamber[0].innerHTML = currentTemp.chamber.actual + "°C";
                    elements.temperatures.chamber[1].placeholder = currentTemp.chamber.target + "°C";
                  }

                  keys = Object.keys(currentTemp);
                  keys = keys.reverse();
                  keys.forEach(function (key) {
                    if (key.includes("tool")) {
                      elements.temperatures.tools.forEach(function (tool) {
                        if (tool.id.includes(key) && tool.id.includes("Actual")) {
                          tool.innerHTML = currentTemp[key].actual + "°C";
                        }

                        if (tool.id.includes(key) && tool.id.includes("Target")) {
                          tool.placeholder = currentTemp[key].target + "°C";
                        }
                      });
                    }
                  }); //Setup listeners
                }

              case 1:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27);
      }));

      function applyTemps(_x32, _x33) {
        return _applyTemps.apply(this, arguments);
      }

      return applyTemps;
    }()
  }, {
    key: "controls",
    value: function () {
      var _controls = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(enable, printing) {
        var elements, _elements2, filamentDrops, spool;

        return regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                _context28.next = 2;
                return PrinterManager.grabPage();

              case 2:
                elements = _context28.sent;
                _elements2 = elements, filamentDrops = _elements2.filamentDrops;
                elements = elements.printerControls;
                spool = true;

                if (!filamentManager) {
                  spool = false;
                }

                if (typeof printing !== "undefined" && printing) {
                  elements.feedRate.disabled = !printing;
                  elements.flowRate.disabled = !printing;
                  elements.fansOn.disabled = !printing;
                  elements.fansOff.disabled = !printing;
                  filamentDrops.forEach(function (drop) {
                    drop.disabled = spool;
                  });
                } else {
                  elements.feedRate.disabled = enable;
                  elements.flowRate.disabled = enable;
                  elements.fansOn.disabled = enable;
                  elements.fansOff.disabled = enable;
                  filamentDrops.forEach(function (drop) {
                    drop.disabled = enable;
                  });
                }

                elements.xPlus.disabled = enable;
                elements.xMinus.disabled = enable;
                elements.yPlus.disabled = enable;
                elements.yMinus.disabled = enable;
                elements.xyHome.disabled = enable;
                elements.zPlus.disabled = enable;
                elements.zMinus.disabled = enable;
                elements.zHome.disabled = enable;
                elements.step01.disabled = enable;
                elements.step1.disabled = enable;
                elements.step10.disabled = enable;
                elements.step100.disabled = enable;
                elements.motorsOff.disabled = enable;
                elements.extrude.disabled = enable;
                elements.retract.disabled = enable;

              case 23:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28);
      }));

      function controls(_x34, _x35) {
        return _controls.apply(this, arguments);
      }

      return controls;
    }()
  }]);

  return PrinterManager;
}();

exports["default"] = PrinterManager;

},{"../functions/calc.js":1,"../functions/ui.js":4,"../modules/fileSorting.js":12,"../octofarm.js":18,"../octoprint.js":19,"./customScripts.js":9,"./filamentGrab.js":10,"./fileManager.js":11}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

var _ui = _interopRequireDefault(require("../functions/ui.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var editMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\nUpdate any of the printer values below and press action when you've made your changes.\n</div>\n<div class=\"alert alert-warning\" role=\"alert\">\n OctoFarm will then update only the changed printers.\n</div>\n";
var deleteMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\nSelect which printers you'd like to delete. Press action when you have selected all the printers you'd like to remove.\n</div>\n<div class=\"alert alert-danger\" role=\"alert\">\n This is unrecoverable! If you remove the database entry for your printer, any links in the database will be lost... i.e. History/Statistics. Unless you have a backup in place.\n</div>\n";
var connectMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\nPlease select which printers you'd like to connect to from OctoPrint. Selected printers will attempt a connection with the preferred port settings from OctoPrint.\n</div>\n<div class=\"alert alert-warning\" role=\"alert\">\nThis can be updated in your printer settings on OctoFarm/OctoPrint. You will need to re-scan for OctoFarm to detect the changes if updated on OctoPrint.\n</div>\n<div class=\"alert alert-danger\" role=\"alert\">\n If this doesn't exist the connection attempt will fall back to AUTO and could fail/put your printer in an error state. \n</div>\n";
var disconnectMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\nPlease select which printers you'd like to disconnect from OctoPrint.\n</div>\n<div class=\"alert alert-warning\" role=\"alert\">\nThis will by default skip Active printers. This is not an emergency stop button!\n</div>\n\n";
var pluginInstallMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\nPlease select which printers you'd like to action a plugin installation on... You will be able to choose multiple plugins on the next pop up.\n</div>\n<div class=\"alert alert-warning\" role=\"alert\">\n  Your plugin installation will be skipped if it's already installed...\n</div>\n";
var powerOnOffMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\nPlease select your list of printers to action the power command on. You will be able to choose the actual command on the next pop up.\n</div>\n<div class=\"alert alert-danger\" role=\"alert\">\n  These commands will run without user interaction... It will skip by default any active printers.\n</div>\n";
var preHeatMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\n  Please select your list of printers to action the pre-heat command. You will configure the temperatures on the next pop up.\n</div>\n<div class=\"alert alert-danger\" role=\"alert\">\n  Due to this allowing for temps to be actioned on the fly it will not check printer state before doing so.\n</div>\n";
var controlPrintersMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\n  Please select your list of printers you'd like to bulk control.\n</div>\n<div class=\"alert alert-danger\" role=\"alert\">\n  Due to this allowing for temps to be actioned on the fly it will not check printer state before doing so.\n</div>\n";
var gcodePrintersMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\n  Please select your list of printers you'd like to send gcode commands to.\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\n  Commands split up by a new line will be sent sequentially to the terminal.\n</div>\n<div class=\"alert alert-danger\" role=\"alert\">\n  Due to this allowing for gcode commands to be sent on the fly it will not check printer state before doing so.\n</div>\n";
var printersTable = "\n<div class=\"row\">\n    <div class=\"col-lg-12\">\n      <div class=\"pb-2\" id=\"selectMessageBox\"></div>\n    </div>\n    <div class=\"col-md-3\">\n      <div class=\"input-group mb-3\">\n        <div class=\"input-group-prepend\">\n            <label class=\"input-group-text\" for=\"printerStateList\">State: </label>\n        </div>\n        <select class=\"custom-select\" id=\"printerStateList\" data-jplist-control=\"select-filter\" data-group=\"printer-list\" data-name=\"state\">\n          <option selected href=\"#\" data-value=\"all\"data-path=\"default\">\n            Filter\n          </option>\n          <option href=\"#\" value=\"active\" data-path=\".Active\">\n            Active\n          </option>\n          <option href=\"#\" value=\"idle\" data-path=\".Idle\">\n            Idle\n          </option>\n          <option href=\"#\" value=\"complete\" data-path=\".Complete\">\n            Complete\n          </option>\n          <option href=\"#\" value=\"disconnected\"data-path=\".Disconnected\">\n            Disconnected\n          </option>\n        </select>\n      </div>\n    </div>\n    <div class=\"col-md-3\">\n     <div class=\"input-group mb-3\">\n        <div class=\"input-group-prepend\">\n            <label class=\"input-group-text\" for=\"printerGroupList\">Group: </label>\n        </div>\n        <select class=\"custom-select\" id=\"printerGroupList\"\n                data-jplist-control=\"select-filter\"\n                data-group=\"printer-list\"\n                data-name=\"group\">\n<!--                            Filled dynamically -->\n        </select>\n      </div>\n    </div>\n    <div id=\"selectBtns\" class=\"col-md-3 text-center\">\n    </div>\n    <div id=\"actionBtn\" class=\"col-md-3  text-center\">\n    </div>\n</div>\n<table class=\"table table-dark\">\n  <thead>\n    <tr>\n      <th id=\"selectColumn\" scope=\"col\">Select</th>\n      <th scope=\"col\">Index</th>\n      <th scope=\"col\">Name</th>\n      <th scope=\"col\" id=\"urlColumn\" class=\"d-none\">Printer URL</th>\n      <th id=\"stateColumn\" scope=\"col\">State</th>\n      <th scope=\"col\">Group</th>\n      <th id=\"spoolColumn\" scope=\"col\">Spool</th>\n      <th id=\"cameraColumn\" scope=\"col\" class=\"d-none\">Camera URL</th>\n      <th id=\"apiColumn\" scope=\"col\" class=\"d-none\">API KEY</th>\n    </tr>\n  </thead>\n  <tbody id=\"printerSelectBody\" data-jplist-group=\"printer-list\">\n<!-- Filled dynamically -->\n  </tbody>\n</table>\n";

var PrinterSelect = /*#__PURE__*/function () {
  function PrinterSelect() {
    _classCallCheck(this, PrinterSelect);
  }

  _createClass(PrinterSelect, null, [{
    key: "getSelectableList",
    value: function getSelectableList(printer) {
      return "\n<tr id=\"".concat(printer.id, "\" class=\"").concat(printer.state, "\" data-jplist-item>\n    <td>\n        <div class=\"custom-control custom-checkbox\">\n            <input type=\"checkbox\" class=\"custom-control-input Idle\" id=\"checkBox-").concat(printer.id, "\" value=\"").concat(printer.id, "\">\n            <label class=\"custom-control-label\" for=\"checkBox-").concat(printer.id, "\">\n            </label>\n        </div>\n    </td>\n    <th scope=\"row\">").concat(printer.index, "</th>\n    <td>").concat(printer.name, "</td>\n    <td class=\"").concat(printer.state, "\">").concat(printer.state, "</td>\n    <td class=\"").concat(printer.group.replace(/\s/g, "_"), "\">").concat(printer.group, "</td>\n    <td>").concat(printer.spool, "</td>\n</tr>\n");
    }
  }, {
    key: "getEditableList",
    value: function getEditableList(printer) {
      return "\n<tr id=\"editPrinterCard-".concat(printer.id, "\" class=\"").concat(printer.state, "\" data-jplist-item>\n  <th scope=\"row\">").concat(printer.index, "</th>\n  <td><input id=\"editInputName-").concat(printer.id, "\" type=\"text\" class=\"form-control Idle\" placeholder=\"").concat(printer.name, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"></td>\n                          <td><input id=\"editInputURL-").concat(printer.id, "\" type=\"text\" class=\"form-control Idle\" placeholder=\"").concat(printer.printerURL, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"></td>\n                          <td class=\"").concat(printer.state, " d-none\">").concat(printer.state, "</td>\n                          <td><input id=\"editInputGroup-").concat(printer.id, "\" type=\"text\" class=\"form-control Idle\" placeholder=\"").concat(printer.group, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"></td>\n                          <td><input id=\"editInputCamera-").concat(printer.id, "\" type=\"text\" class=\"form-control Idle\" placeholder=\"").concat(printer.cameraURL, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"></td>\n                          <td><input id=\"editInputApikey-").concat(printer.id, "\" type=\"text\" class=\"form-control Idle\" placeholder=\"").concat(printer.apikey, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"></td>\n    </tr>");
    }
  }, {
    key: "isOffline",
    value: function isOffline(state, editable, override) {
      if (editable) {
        return true;
      } else if (override) {
        return true;
      } else {
        return state !== "Offline";
      }
    }
  }, {
    key: "create",
    value: function () {
      var _create = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(element, editable, action, callback) {
        var _this = this;

        var saveEditsBtn, messageBox, override, printersInfo, printers, groupList, printerList, groupListUnique, tableBody, printerGroupList, _tableBody;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                saveEditsBtn = document.getElementById("saveEditsBtn");

                if (saveEditsBtn) {
                  saveEditsBtn.remove();
                }

                if (action) {
                  document.getElementById("printerEditLabel").innerHTML = action;
                } //Setup elements


                element.innerHTML = "";
                element.innerHTML = printersTable;
                messageBox = document.getElementById("selectMessageBox");
                messageBox.innerHTML = "";
                override = false;

                if (action === "Printer Deletion") {
                  override = true;
                  messageBox.innerHTML = deleteMessage;
                } else if (action === "Edit Printers") {
                  messageBox.innerHTML = editMessage;
                } else if (action === "Disconnect Printers") {
                  messageBox.innerHTML = disconnectMessage;
                } else if (action === "Connect Printers") {
                  messageBox.innerHTML = connectMessage;
                } else if (action === "Install Plugins") {
                  messageBox.innerHTML = pluginInstallMessage;
                } else if (action === "Power On/Off Printers") {
                  messageBox.innerHTML = powerOnOffMessage;
                } else if (action === "Pre-Heat Printers") {
                  messageBox.innerHTML = preHeatMessage;
                } else if (action === "Control Printers") {
                  messageBox.innerHTML = controlPrintersMessage;
                } else if (action === "Send Gcode to Printers") {
                  messageBox.innerHTML = gcodePrintersMessage;
                }

                _context.next = 11;
                return _octofarm["default"].post("printers/printerInfo");

              case 11:
                printersInfo = _context.sent;
                _context.next = 14;
                return printersInfo.json();

              case 14:
                printers = _context.sent;
                groupList = [];
                printerList = [];
                printers.forEach(function (printer) {
                  if (typeof printer.printerState !== "undefined" && _this.isOffline(printer.printerState.colour.category, editable, override)) {
                    var spoolName = "";

                    if (printer.selectedFilament.length !== 0) {
                      printer.selectedFilament.forEach(function (spool, index) {
                        if (spool !== null) {
                          spoolName += "Tool ".concat(index, ": ").concat(spool.spools.name, " - ").concat(spool.spools.material, " <br>");
                        } else {
                          spoolName += "Tool ".concat(index, ": No Spool Selected <br>");
                        }
                      });
                    } else {
                      spoolName = "No Spool Selected";
                    }

                    var forList = {
                      id: printer._id,
                      index: printer.sortIndex,
                      name: printer.printerName,
                      printerURL: printer.printerURL,
                      state: printer.printerState.colour.category,
                      group: printer.group,
                      spool: spoolName,
                      cameraURL: printer.cameraURL,
                      apikey: printer.apikey
                    };
                    printerList.push(forList);
                  }

                  if (printer.group !== "") {
                    var group = {
                      display: printer.group,
                      tag: printer.group.replace(/\s/g, "_")
                    };
                    groupList.push(group);
                  }
                });
                groupListUnique = _.uniq(groupList, "tag");

                if (printerList.length !== 0) {
                  //Create printers table
                  tableBody = document.getElementById("printerSelectBody");

                  if (editable) {
                    document.getElementById("spoolColumn").classList.add("d-none");
                    document.getElementById("stateColumn").classList.add("d-none");
                    document.getElementById("cameraColumn").classList.remove("d-none");
                    document.getElementById("apiColumn").classList.remove("d-none");
                    document.getElementById("selectColumn").classList.add("d-none");
                    document.getElementById("urlColumn").classList.remove("d-none");
                    printerList.forEach(function (printer) {
                      tableBody.insertAdjacentHTML("beforeend", _this.getEditableList(printer));
                    });
                  } else {
                    printerList.forEach(function (printer) {
                      tableBody.insertAdjacentHTML("beforeend", _this.getSelectableList(printer));
                    });
                  }

                  printerGroupList = document.getElementById("printerGroupList");
                  printerGroupList.innerHTML = "";
                  printerGroupList.insertAdjacentHTML("beforeend", '<option selected value="all" data-path="default">Filter</option>');
                  groupListUnique.forEach(function (group, index) {
                    printerGroupList.insertAdjacentHTML("beforeend", "<option value=\"".concat(group.tag.toLowerCase(), "\" data-path=\".").concat(group.tag, "\">").concat(group.display, "</option>"));
                  }); // Printer group dropdown

                  printers.forEach(function (printer) {
                    var printerGroupAssignSelect = document.getElementById("editInputGroup-".concat(printer._id));
                    if (!printerGroupAssignSelect) return;
                    groupListUnique.forEach(function (group, index) {
                      printerGroupAssignSelect.insertAdjacentHTML("beforeend", "<option value=\"".concat(group.tag.toLowerCase(), "\" data-path=\".").concat(group.tag, "\">").concat(group.display, "</option>"));
                    });
                  });
                } else {
                  _tableBody = document.getElementById("printerSelectBody");

                  _tableBody.insertAdjacentHTML("beforeend", "<tr><td>No Online Printers</td></tr>");
                }

                PrinterSelect.addListeners(editable, callback);

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function create(_x, _x2, _x3, _x4) {
        return _create.apply(this, arguments);
      }

      return create;
    }()
  }, {
    key: "addListeners",
    value: function addListeners(editable, callback) {
      if (!editable) {
        document.getElementById("selectBtns").innerHTML = "\n                    <button id=\"selectAll\" type=\"button\" class=\"btn btn-secondary\"><i class=\"fas fa-check-square\"></i> Select All</button>\n                    <button id=\"selectNone\" type=\"button\" class=\"btn btn-secondary\"><i class=\"fas fa-square\"></i> Deselect All</button>\n            ";
        document.getElementById("selectAll").addEventListener("click", function (e) {
          var checkBoxes = document.querySelectorAll("input[type=\"checkbox\"]:not(:checked)");
          checkBoxes.forEach(function (box) {
            box.checked = true;
          });
        });
        document.getElementById("selectNone").addEventListener("click", function (e) {
          var checkBoxes = document.querySelectorAll('input[type="checkbox"]:checked');
          checkBoxes.forEach(function (box) {
            box.checked = false;
          });
        });
      } else {
        _ui["default"].addSelectListeners("editInput");
      }

      if (callback) {
        document.getElementById("actionBtn").insertAdjacentHTML("beforeend", "\n                      <button id=\"saveEditsBtn\" class=\"btn btn-success\" data-dismiss=\"modal\" aria-label=\"Close\">Action</button>\n      ");
        document.getElementById("saveEditsBtn").addEventListener("click", callback);
      }

      jplist.init();
    }
  }, {
    key: "getSelected",
    value: function getSelected() {
      var checkedBoxes = document.querySelectorAll("input[type=\"checkbox\"]:checked");
      var printers = [];
      checkedBoxes.forEach(function (box) {
        if (box.id.includes("checkBox")) {
          printers.push(box);
        }
      });
      return printers;
    }
  }, {
    key: "selectFilter",
    value: function selectFilter() {}
  }]);

  return PrinterSelect;
}();

exports["default"] = PrinterSelect;

},{"../functions/ui.js":4,"../octofarm.js":18}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkTemps = checkTemps;

function checkTemps(element, actual, target, tempTriggers, state) {
  actual = parseFloat(actual);
  target = parseFloat(target);

  if (isNaN(actual)) {
    actual = 0;
  }

  if (isNaN(target)) {
    target = 0;
  }

  if (state === "Complete") {
    if (actual > parseFloat(tempTriggers.coolDown)) {
      var string = "<i class=\"far fa-circle toolUnder\"></i> ".concat(actual, "\xB0C <i class=\"fas fa-bullseye\"></i> ").concat(target, "\xB0C");

      if (element.innerHTML !== string) {
        element.innerHTML = string;
      }
    } else {
      var _string = "<i class=\"far fa-circle toolUnder\"></i> ".concat(actual, "\xB0C <i class=\"fas fa-bullseye toolUnder\"></i> ").concat(target, "\xB0C");

      if (element.innerHTML !== _string) {
        element.innerHTML = _string;
      }
    }
  } else if (state === "Active") {
    if (actual > target - parseFloat(tempTriggers.heatingVariation) && actual < target + parseFloat(tempTriggers.heatingVariation)) {
      var _string2 = "<i class=\"far fa-circle toolOn\"></i> ".concat(actual, "\xB0C <i class=\"fas fa-bullseye toolOn\"></i> ").concat(target, "\xB0C");

      if (element.innerHTML !== _string2) {
        element.innerHTML = _string2;
      }
    } else if (actual < parseFloat(tempTriggers.heatingVariation)) {
      var _string3 = "<i class=\"far fa-circle\"></i> ".concat(actual, "\xB0C <i class=\"fas fa-bullseye\"></i> ").concat(target, "\xB0C");

      if (element.innerHTML !== _string3) {
        element.innerHTML = _string3;
      }
    } else {
      var _string4 = "<i class=\"far fa-circle toolOut\"></i> ".concat(actual, "\xB0C <i class=\"fas fa-bullseye toolOut\"></i> ").concat(target, "\xB0C");

      if (element.innerHTML !== _string4) {
        element.innerHTML = _string4;
      }
    }
  } else {
    var _string5 = "<i class=\"far fa-circle\"></i> ".concat(actual, "\xB0C <i class=\"fas fa-bullseye\"></i> ").concat(target, "\xB0C");

    if (element.innerHTML !== _string5) {
      element.innerHTML = _string5;
    }
  }
}

},{}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createWebWorker;

var _dragAndDrop = require("../functions/dragAndDrop.js");

var _printerManager = _interopRequireDefault(require("./printerManager.js"));

var _powerButton = _interopRequireDefault(require("./powerButton.js"));

var _ui = _interopRequireDefault(require("../functions/ui.js"));

var _calc = _interopRequireDefault(require("../functions/calc.js"));

var _actionButtons = require("./Printers/actionButtons.js");

var _octoprint = _interopRequireDefault(require("../octoprint.js"));

var _temperatureCheck = require("../modules/temperatureCheck.js");

var _filamentGrab = require("./filamentGrab.js");

var _currentOperations = _interopRequireDefault(require("./currentOperations"));

var _fullscreen = _interopRequireDefault(require("../functions/fullscreen.js"));

var _octofarm = _interopRequireDefault(require("../octofarm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var elems = [];
var powerTimer = 20000;
var printerInfo = null;
var printerControlList = null;
var worker = null;
var controlModal = false;
var printerManagerModal = document.getElementById("printerManagerModal");
var printerArea = document.getElementById("printerArea");
var currentView = null;
document.addEventListener("visibilitychange", handleVisibilityChange, false);
document.getElementById("filterStates").addEventListener("change", function (e) {
  _octofarm["default"].get("client/updateFilter/" + e.target.value);
});
document.getElementById("sortStates").addEventListener("change", function (e) {
  _octofarm["default"].get("client/updateSorting/" + e.target.value);
});

function handleVisibilityChange() {
  if (document.hidden) {
    if (worker !== null) {
      console.log("Screen Abandonded, closing web worker...");
      worker.terminate();
      worker = null;
    }
  } else {
    if (worker === null) {
      console.log("Screen resumed... opening web worker...");
      createWebWorker(currentView);
    }
  }
}

var returnPrinterInfo = function returnPrinterInfo(id) {
  if (typeof id !== "undefined") {
    var zeeIndex = _.findIndex(printerInfo, function (o) {
      return o._id == id;
    });

    return printerInfo[zeeIndex];
  } else {
    return printerInfo;
  }
};

function createWebWorker(view) {
  currentView = view;
  worker = new Worker("/assets/js/workers/monitoringViewsWorker.min.js");

  worker.onmessage = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(event) {
      var currentOperationsData;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(event.data != false)) {
                _context.next = 7;
                break;
              }

              //Update global variables with latest information...
              printerInfo = event.data.printersInformation;
              printerControlList = event.data.printerControlList; //Grab control modal element...

              if (!controlModal) {
                controlModal = document.getElementById("printerManagerModal");
              }

              _context.next = 6;
              return init(event.data.printersInformation, event.data.clientSettings, currentView);

            case 6:
              if (event.data.clientSettings.panelView.currentOp) {
                currentOperationsData = event.data.currentOperations;
                (0, _currentOperations["default"])(currentOperationsData.operations, currentOperationsData.count, printerInfo);
              }

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
}

function isHidden(state, clientSettings) {
  var hidden = "";

  if (state === "Offline" && clientSettings.panel.hideOff) {
    hidden = "hidden";
  } else if (state === "Disconnected" && clientSettings.panel.hideClosed) {
    hidden = "hidden";
  } // } else if (state === "Idle" && clientSettings.hideIdle) {
  //   hidden = "hidden";
  // }


  return hidden;
}

function isRotated(otherSettings) {
  var flipH = "";
  var flipV = "";
  var rotate90 = "";

  if (otherSettings.webCamSettings !== null) {
    if (otherSettings.webCamSettings.flipH) {
      flipH = "rotateY(180deg)";
    }

    if (otherSettings.webCamSettings.flipV) {
      flipV = "rotateX(180deg)";
    }

    if (otherSettings.webCamSettings.rotate90) {
      rotate90 = "rotate(90deg)";
    }
  }

  return {
    flipH: flipH,
    flipV: flipV,
    rotate90: rotate90
  };
}

function cleanName(printerName) {
  var name = printerName;

  if (name.includes("http://")) {
    name = name.replace("http://", "");
  } else if (name.includes("https://")) {
    name = name.replace("https://", "");
  }

  return name;
}

function checkPrinterRows(clientSettings) {
  if (typeof clientSettings !== "undefined" && typeof clientSettings.panelView !== "undefined" && typeof clientSettings.panelView.printerRows !== "undefined") {
    return clientSettings.panelView.printerRows;
  } else {
    return 2;
  }
}

function imageOrCamera(printer) {
  var drawCamera = function drawCamera(_ref2) {
    var url = _ref2.url,
        flipV = _ref2.flipV,
        flipH = _ref2.flipH,
        rotate90 = _ref2.rotate90;
    return "<img\n        loading=\"lazy\"\n        class=\"camImg\"\n        id=\"camera-".concat(printer._id, "\"\n        width=\"100%\"\n        style=\"transform: ").concat(flipH, " ").concat(flipV, " ").concat(rotate90, "\";\n        src=\"").concat(url, "\"\n    />");
  };

  var flip = isRotated(printer.otherSettings);
  var flipH = flip.flipH,
      flipV = flip.flipV,
      rotate90 = flip.rotate90; //Is octoprints camera settings enabled?

  if (printer.otherSettings !== null && printer.otherSettings.webCamSettings !== null && printer.otherSettings.webCamSettings.webcamEnabled) {
    //Check if URL actually exists...
    if (printer.cameraURL !== "") {
      return drawCamera({
        url: printer.cameraURL,
        flipV: flipV,
        flipH: flipH,
        rotate90: rotate90
      });
    } else {
      if (typeof printer.currentJob !== "undefined" && printer.currentJob.thumbnail != null) {
        return drawCamera({
          url: printer.printerURL + "/" + printer.currentJob.thumbnail,
          flipV: flipV,
          flipH: flipH,
          rotate90: rotate90
        });
      } else {
        return drawCamera({
          url: "../images/noCamera.jpg",
          flipV: flipV,
          flipH: flipH,
          rotate90: rotate90
        });
      }
    }
  } else {
    if (typeof printer.currentJob !== "undefined" && printer.currentJob.thumbnail != null) {
      return drawCamera({
        url: printer.printerURL + "/" + printer.currentJob.thumbnail,
        flipV: flipV,
        flipH: flipH,
        rotate90: rotate90
      });
    } else {
      return drawCamera({
        url: "",
        flipV: flipV,
        flipH: flipH,
        rotate90: rotate90
      });
    }
  }
}

function drawListView(printer, clientSettings) {
  var hidden = isHidden(printer, clientSettings);
  var name = cleanName(printer.printerName);
  var toolList = "";
  var environment = "";

  if (printer.currentProfile !== null) {
    for (var e = 0; e < printer.currentProfile.extruder.count; e++) {
      toolList += '<div class="btn-group btn-block m-0" role="group" aria-label="Basic example">';
      toolList += "<button type=\"button\" class=\"btn btn-secondary btn-sm\" disabled><b>Tool ".concat(e, " </b></button><button disabled id=\"").concat(printer._id, "-spool-").concat(e, "\" type=\"button\" class=\"btn btn-secondary  btn-sm\"> No Spool </button><button id=\"").concat(printer._id, "-temperature-").concat(e, "\" type=\"button\" class=\"btn btn-secondary btn-sm\" disabled><i class=\"far fa-circle \"></i> 0\xB0C <i class=\"fas fa-bullseye\"></i> 0\xB0C</button>");
      toolList += "</div>";
    }

    if (printer.currentProfile.heatedBed && printer.currentProfile.heatedChamber) {
      environment = "<small\n      id=\"bedTemp-".concat(printer._id, "\"\n    class=\"mb-0 float-right\"\n\n          </small><br><small\n      id=\"chamberTemp-").concat(printer._id, "\"\n    class=\"mb-0 float-right\"\n\n          </small>");
    } else if (printer.currentProfile.heatedBed) {
      environment = "<div\n      id=\"badTemp-".concat(printer._id, "\"\n    class=\"mb-0 float-left\"\n          >\n          </div>");
    } else if (printer.currentProfile.heatedChamber) {
      environment = "<div\n      id=\"chamberTemp-".concat(printer._id, "\"\n    class=\"mb-0 float-right\"\n        >\n          </div>");
    }
  }

  var stateCategory = printer.printerState.colour.category;

  if (stateCategory === "Error!") {
    stateCategory = "Offline";
  }

  return "\n        <tr\n          class=\"p-0 ".concat(stateCategory, " ").concat(hidden, "\"\n          id=\"panel-").concat(printer._id, "\">\n          <td id=\"name-").concat(printer._id, "\" class=\"py-auto\">\n            ").concat(name, "\n          </td>\n          <td id=\"state-").concat(printer._id, "\" class=\"py-auto\">\n           ").concat(printer.printerState.state, "\n          </td>\n          <td id=\"printerActionBtns-").concat(printer._id, "\" class=\"py-auto\">\n\n          </td>\n          <td class=\"py-auto\">\n            <button title=\"Start your current selected file\"\n              id=\"play-").concat(printer._id, "\"\n              type=\"button\"\n              class=\"tag btn btn-success btn-sm\"\n              disabled\n            >\n              <i class=\"fas fa-play\"></i>\n            </button>\n            <button title=\"Cancel your current print\"\n              id=\"cancel-").concat(printer._id, "\"\n              type=\"button\"\n              class=\"tag btn btn-danger btn-sm\"\n              disabled\n            >\n              <i class=\"fas fa-square\"></i>\n            </button>\n          </td>\n          <td class=\"py-auto\">\n          <p id=\"currentFile-").concat(printer._id, "\" title=\"Loading...\" class=\"mb-1 tag\">\n            <i class=\"fas fa-file-code\"></i> No File Selected </p>\n          </td>\n          <td class=\"p-1\">\n          <span id=\"printTimeElapsed-").concat(printer._id, "\">Loading...</span>\n          </td>\n          <td class=\"py-auto\">\n            <div class=\"progress m-0 p-0\">\n              <div id=\"progress-").concat(printer._id, "\" class=\"progress-bar progress-bar-striped bg-secondary percent\" role=\"progressbar progress-bar-striped\" style=\"width: 0%;\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\">0%</div>\n            </div>\n          </td>\n          <td class=\"p-1\">\n          <span id=\"remainingTime-").concat(printer._id, "\">\n                Loading...\n            </span>\n          </td>\n          <td class=\"py-auto\">\n           ").concat(toolList, "\n          </td>\n          <td class=\"py-auto\">\n            ").concat(environment, "\n          </td>\n        </tr>\n    ");
}

function drawPanelView(printer, clientSettings) {
  var hidden = isHidden(printer, clientSettings);
  var name = cleanName(printer.printerName);
  var printerRows = checkPrinterRows(clientSettings);
  var cameraElement = imageOrCamera(printer);
  var toolList = "";
  var environment = "";

  if (printer.currentProfile !== null) {
    for (var e = 0; e < printer.currentProfile.extruder.count; e++) {
      toolList += '<div class="btn-group btn-block m-0" role="group" aria-label="Basic example">';
      toolList += "<button type=\"button\" class=\"btn btn-secondary btn-sm\" disabled><b>Tool ".concat(e, " </b></button><button disabled id=\"").concat(printer._id, "-spool-").concat(e, "\" type=\"button\" class=\"btn btn-secondary  btn-sm\"> No Spool </button><button id=\"").concat(printer._id, "-temperature-").concat(e, "\" type=\"button\" class=\"btn btn-secondary btn-sm\" disabled><i class=\"far fa-circle \"></i> 0\xB0C <i class=\"fas fa-bullseye\"></i> 0\xB0C</button>");
      toolList += "</div>";
    }

    if (printer.currentProfile.heatedBed) {
      environment += "<small\n    class=\"mb-0 float-left\"\n          ><b>Bed: </b><span id=\"badTemp-".concat(printer._id, "\"><i class=\"far fa-circle \"></i> 0\xB0C <i class=\"fas fa-bullseye\"></i> 0\xB0C</span>\n          </small>");
    }

    if (printer.currentProfile.heatedChamber) {
      environment += "<small\n    class=\"mb-0 float-right\"\n        ><b>Chamber: </b><span  id=\"chamberTemp-".concat(printer._id, "\"><i class=\"far fa-circle \"></i> 0\xB0C <i class=\"fas fa-bullseye\"></i> 0\xB0C</span>\n          </small>");
    }
  }

  return "\n        <div class=\"col-sm-12 col-md-4 col-lg-3 col-xl-2 ".concat(hidden, "\" id=\"panel-").concat(printer._id, "\">\n        <div class=\"card mt-1 mb-1 ml-1 mr-1 text-center\">\n          <div class=\"card-header dashHeader\">\n           <button\n                id=\"name-").concat(printer._id, "\"\n                type=\"button\"\n                class=\"btn btn-secondary mb-0 btn-sm float-left\"\n                role=\"button\"\n                disabled\n              >\n                ").concat(name, "\n              </button>\n          <small class=\"float-right\" id=\"printerActionBtns-").concat(printer._id, "\">\n\n          </small>\n          </div>\n          <div class=\"card-body pt-1 pb-0 pl-2 pr-2\">\n            <div class=\"d-none index\">").concat(printer.sortIndex, "</div>\n            <button\n                    id=\"currentFile-").concat(printer._id, "\"\n                    type=\"button\"\n                    class=\"tag btn btn-block btn-secondary mb-0 text-truncate btn-sm\"\n                    role=\"button\"\n                    title=\"Loading...\"\n                    disabled\n            >\n                <i class=\"fas fa-file-code\" ></i> No File Selected\n            </button>\n            <div id=\"cameraContain-").concat(printer._id, "\" class=\"noBlue\">\n                ").concat(cameraElement, "\n            </div>\n            <div class=\"progress\">\n              <div\n                id=\"progress-").concat(printer._id, "\"\n                class=\"progress-bar progress-bar-striped bg-").concat(printer.printerState.colour.name, " percent\"\n                role=\"progressbar progress-bar-striped\"\n                style=\"width: 0%\"\n                aria-valuenow=\"0\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n              >\n                0%\n              </div>\n            </div>\n            <button\n              id=\"state-").concat(printer._id, "\"\n              type=\"button\"\n              class=\"btn btn-block mb-1 mt-1 btn-sm ").concat(printer.printerState.colour.category, "\"\n              role=\"button\"\n              disabled\n            >\n              ").concat(printer.printerState.state, "\n            </button>\n            <center>\n              <button\n                title=\"Start your currently selected print\"\n                id=\"play-").concat(printer._id, "\"\n                type=\"button\"\n                class=\"tag btn btn-success mt-1 mb-1 btn-sm\"\n                role=\"button\"\n                disabled\n              >\n                <i class=\"fas fa-print\"></i> Print\n              </button>\n              <button\n                      title=\"Pause your current print\"\n                id=\"pause-").concat(printer._id, "\"\n                type=\"button\"\n                class=\"tag btn btn-light mt-1 mb-1 btn-sm\"\n                role=\"button\"\n                disabled\n              >\n                <i class=\"fas fa-pause\"></i> Pause\n              </button>\n              <button\n                title=\"Restart your current print\"\n                id=\"restart-").concat(printer._id, "\"\n                type=\"button\"\n                class=\"tag btn btn-danger mt-1 mb-1 hidden btn-sm\"\n                role=\"button\"\n                disabled\n              >\n                <i class=\"fas fa-undo\"></i> Restart\n              </button>\n              <button\n                      title=\"Resume your current print\"\n                id=\"resume-").concat(printer._id, "\"\n                type=\"button\"\n                class=\"tag btn btn-success mt-1 mb-1 hidden btn-sm\"\n                role=\"button\"\n                disabled\n              >\n                <i class=\"fas fa-redo\"></i> Resume\n              </button>\n              <button\n                      title=\"Stop your current print\"\n                id=\"cancel-").concat(printer._id, "\"\n                type=\"button\"\n                class=\"tag btn btn-danger mt-1 mb-1 btn-sm\"\n                role=\"button\"\n                disabled\n              >\n                <i class=\"fas fa-square\"></i> Cancel\n              </button>\n            </center>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-6\">\n                       <span id=\"printTimeElapsed-").concat(printer._id, "\">Loading...</span>\n            </div>\n            <div class=\"col-6\">\n                      <span id=\"remainingTime-").concat(printer._id, "\">\n                Loading...\n            </span>\n            </div> \n\n          </div>\n          <div\n            id=\"listFilament-").concat(printer._id, "\" disabled\n            class=\"bg-dark\"\n          >\n           ").concat(toolList, "\n          </div>\n\n          <div class=\"card-footer text-muted dashFooter\">\n                ").concat(environment, "\n          </div>\n        </div>\n      </div>\n    ");
}

function drawCameraView(printer, clientSettings) {
  var hidden = isHidden(printer, clientSettings);

  if (printer.cameraURL === "") {
    hidden = "hidden";
  }

  var name = cleanName(printer.printerName);
  var printerRows = checkPrinterRows(clientSettings);
  var cameraElement = imageOrCamera(printer);
  var toolList = "";
  var environment = "";

  if (printer.currentProfile !== null) {
    for (var e = 0; e < printer.currentProfile.extruder.count; e++) {
      toolList += "<span><b>Tool ".concat(e, " </b></span> | <span id=\"").concat(printer._id, "-spool-").concat(e, "\"> No Spool </span> | <span id=\"").concat(printer._id, "-temperature-").concat(e, "\" ><i class=\"far fa-circle \"></i> 0\xB0C <i class=\"fas fa-bullseye\"></i> 0\xB0C</span><br>");
    }

    if (printer.currentProfile.heatedBed) {
      environment += "\n          <b>Bed: </b><span id=\"badTemp-".concat(printer._id, "\"><i class=\"far fa-circle \"></i> 0\xB0C <i class=\"fas fa-bullseye\"></i> 0\xB0C</span><br>\n");
    }

    if (printer.currentProfile.heatedChamber) {
      environment += "\n    class=\"mb-0\"\n        <b>Chamber: </b><span id=\"chamberTemp-".concat(printer._id, "\"><i class=\"far fa-circle \"></i> 0\xB0C <i class=\"fas fa-bullseye\"></i> 0\xB0C</span><br>\n ");
    }
  }

  return "\n  <div\n      id=\"panel-".concat(printer._id, "\"\n      class=\"col-md-4 col-lg-").concat(printerRows, " col-xl-").concat(printerRows, " ").concat(hidden, "\"\n    >\n      <div class=\"card text-center mb-0 mt-0 ml-0 mr-0\">\n        <div\n          class=\"card-header dashHeader p-0\"\n          id=\"camHeader-").concat(printer._id, "\"\n        >\n            <button\n              id=\"name-").concat(printer._id, "\"\n              type=\"button\"\n              class=\"btn btn-secondary float-left p-0 pl-2 pt-1\"\n              data-toggle=\"modal\"\n              data-target=\"#printerManagerModal\"\n              disabled\n            >\n                ").concat(name, "\n            </button>\n          <small id=\"printerActionBtns-").concat(printer._id, "\" class=\"float-right\">\n          </small>\n        </div>\n        <div\n          class=\"card-body cameraContain text-truncate noBlue\"\n          id=\"cameraContain-").concat(printer._id, "\"\n        >\n          <div class=\"camName\">\n            <small\n              class=\"mb-0 text-center\"\n              id=\"currentFile-").concat(printer._id, "\"\n            >\n              <i class=\"fas fa-file-code\"></i> Loading... \n            </small><br>\n          </div>\n          \n          <div class=\"camExtra\">\n            <div class=\" row\">\n\n              <div class=\"col-6\">\n                 <span\n                    class=\"mb-0 text-center\"\n                    id=\"printTimeElapsed-").concat(printer._id, "\"\n                  >\n\n                  </span>\n              </div>\n              <div class=\"col-6\">\n                          <span\n              class=\"mb-0 text-center\"\n              id=\"remainingTime-").concat(printer._id, "\"\n            >\n\n            </span>\n              </div>\n                          \n</div>\n          </div>\n                ").concat(cameraElement, "\n          <div class=\"camTemps\">\n            <small\n              id=\"toolTemps-").concat(printer._id, "\"\n              class=\"mb-0 text-center\"\n            >\n             ").concat(toolList, "\n             ").concat(environment, "\n            </small>\n          </div>\n          <div class=\"progress camProgress\">\n            <div class=\"d-none percent\">Loading...</div>\n            <div\n              id=\"progress-").concat(printer._id, "\"\n              class=\"progress-bar progress-bar-striped bg-").concat(printer.printerState.colour.category, " percent\"\n              role=\"progressbar\"\n              style=\"width: 0%\"\n              aria-valuenow=\"10\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n            >\n            0%\n            </div>\n          </div>\n          <small>\n            <button\n              title=\"Start your current selected print\"\n              class=\"tag btn btn-success camButtons hidden btn-sm\"\n              id=\"play-").concat(printer._id, "\"\n            >\n              Start\n            </button>\n            <button\n              title=\"Stop your current selected print\"\n              class=\"tag btn btn-danger camButtons btn-sm\"\n              id=\"cancel-").concat(printer._id, "\"\n            >\n              Cancel\n            </button>\n          </small>\n        </div>\n      </div>\n    </div>\n  ");
}

function addListeners(printer) {
  //For now Control has to be seperated
  document.getElementById("printerButton-".concat(printer._id)).addEventListener("click", function () {
    // eslint-disable-next-line no-underscore-dangle
    _printerManager["default"].init(printer._id, printerInfo, printerControlList);
  }); //Play button listeners

  var playBtn = document.getElementById("play-" + printer._id);

  if (playBtn) {
    playBtn.addEventListener("click", function (e) {
      e.target.disabled = true;
      var opts = {
        command: "start"
      };
      var print = returnPrinterInfo(printer._id);

      _octoprint["default"].jobAction(print, opts, e);
    });
  }

  var cancelBtn = document.getElementById("cancel-" + printer._id);

  if (cancelBtn) {
    cancelBtn.addEventListener("click", function (e) {
      var print = returnPrinterInfo(printer._id);
      var name = printer.printerName;
      bootbox.confirm({
        message: "".concat(name, ": <br>Are you sure you want to cancel the ongoing print?"),
        buttons: {
          cancel: {
            label: '<i class="fa fa-times"></i> Cancel'
          },
          confirm: {
            label: '<i class="fa fa-check"></i> Confirm'
          }
        },
        callback: function callback(result) {
          if (result) {
            e.target.disabled = true;
            var opts = {
              command: "cancel"
            };

            _octoprint["default"].jobAction(print, opts, e);
          }
        }
      });
    });
  }

  var restartBtn = document.getElementById("restart-" + printer._id);

  if (restartBtn) {
    restartBtn.addEventListener("click", function (e) {
      e.target.disabled = true;
      var opts = {
        command: "restart"
      };
      var print = returnPrinterInfo(printer._id);

      _octoprint["default"].jobAction(print, opts, e);
    });
  }

  var pauseBtn = document.getElementById("pause-" + printer._id);

  if (pauseBtn) {
    pauseBtn.addEventListener("click", function (e) {
      e.target.disabled = true;
      var opts = {
        command: "pause",
        action: "pause"
      };
      var print = returnPrinterInfo(printer._id);

      _octoprint["default"].jobAction(print, opts, e);
    });
  }

  var resumeBtn = document.getElementById("resume-" + printer._id);

  if (resumeBtn) {
    resumeBtn.addEventListener("click", function (e) {
      e.target.disabled = true;
      var opts = {
        command: "pause",
        action: "resume"
      };
      var print = returnPrinterInfo(printer._id);

      _octoprint["default"].jobAction(print, opts, e);
    });
  }

  var cameraContain = document.getElementById("cameraContain-" + printer._id);

  if (cameraContain) {
    cameraContain.addEventListener("dblclick", function (e) {
      (0, _fullscreen["default"])(e.target);
    });
  }

  return "done";
}

function grabElements(printer) {
  if (typeof elems[printer._id] !== "undefined") {
    return elems[printer._id];
  } else {
    elems[printer._id] = {
      row: document.getElementById("panel-" + printer._id),
      name: document.getElementById("name-" + printer._id),
      control: document.getElementById("printerButton-" + printer._id),
      connect: document.getElementById("printerQuickConnect-" + printer._id),
      start: document.getElementById("play-" + printer._id),
      stop: document.getElementById("cancel-" + printer._id),
      pause: document.getElementById("pause-" + printer._id),
      restart: document.getElementById("restart-" + printer._id),
      resume: document.getElementById("resume-" + printer._id),
      camera: document.getElementById("camera-" + printer._id),
      currentFile: document.getElementById("currentFile-" + printer._id),
      currentFilament: document.getElementById("currentFilament-" + printer._id),
      state: document.getElementById("state-" + printer._id),
      printTimeElapsed: document.getElementById("printTimeElapsed-" + printer._id),
      remainingPrintTime: document.getElementById("remainingTime-" + printer._id),
      cameraContain: document.getElementById("cameraContain-" + printer._id),
      progress: document.getElementById("progress-" + printer._id),
      bed: document.getElementById("badTemp-" + printer._id),
      chamber: document.getElementById("chamberTemp-" + printer._id)
    };
    return elems[printer._id];
  }
}

function updateState(_x2, _x3, _x4) {
  return _updateState.apply(this, arguments);
}

function _updateState() {
  _updateState = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(printer, clientSettings, view) {
    var elements, stateCategory, progress, printTimeElapsedFormat, remainingPrintTimeFormat, _printTimeElapsedFormat, _remainingPrintTimeFormat, _printTimeElapsedFormat2, _remainingPrintTimeFormat2, _printTimeElapsedFormat3, _remainingPrintTimeFormat3, toolKeys, t, toolNumber, spoolList, i, _tool, filamentManager, hideClosed, hideOffline;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            //Grab elements on page
            elements = grabElements(printer);

            if (!(typeof elements.row === "undefined")) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return");

          case 3:
            if (!printer.display) {
              _context2.next = 16;
              break;
            }

            if (!(elements.row.style.display === "none")) {
              _context2.next = 14;
              break;
            }

            _context2.t0 = view;
            _context2.next = _context2.t0 === "list" ? 8 : _context2.t0 === "panel" ? 10 : _context2.t0 === "camera" ? 12 : 14;
            break;

          case 8:
            elements.row.style.display = "table";
            return _context2.abrupt("break", 14);

          case 10:
            elements.row.style.display = "block";
            return _context2.abrupt("break", 14);

          case 12:
            elements.row.style.display = "block";
            return _context2.abrupt("break", 14);

          case 14:
            _context2.next = 18;
            break;

          case 16:
            if (elements.row.style.display !== "none") {
              elements.row.style.display = "none";
            }

            return _context2.abrupt("return");

          case 18:
            //Printer
            (0, _actionButtons.checkQuickConnectState)(printer);
            elements.control.disabled = printer.printerState.colour.category === "Offline";

            _ui["default"].doesElementNeedUpdating(printer.printerState.state, elements.state, "innerHTML");

            stateCategory = printer.printerState.colour.category;

            if (stateCategory === "Error!") {
              stateCategory = "Offline";
            }

            _ui["default"].doesElementNeedUpdating(cleanName(printer.printerName), elements.name, "innerHTML");

            _context2.t1 = view;
            _context2.next = _context2.t1 === "list" ? 27 : _context2.t1 === "panel" ? 29 : _context2.t1 === "camera" ? 31 : 33;
            break;

          case 27:
            _ui["default"].doesElementNeedUpdating(stateCategory, elements.row, "classList");

            return _context2.abrupt("break", 33);

          case 29:
            _ui["default"].doesElementNeedUpdating("btn btn-block ".concat(stateCategory, " mb-1 mt-1"), elements.state, "classList");

            return _context2.abrupt("break", 33);

          case 31:
            _ui["default"].doesElementNeedUpdating("card-body cameraContain text-truncate noBlue ".concat(stateCategory), elements.cameraContain, "classList");

            return _context2.abrupt("break", 33);

          case 33:
            //Progress
            _ui["default"].doesElementNeedUpdating("progress-bar progress-bar-striped bg-".concat(printer.printerState.colour.name), elements.progress, "classList");

            if (typeof printer.currentJob !== "undefined") {
              progress = 0;

              if (typeof printer.currentJob.progress === "number") {
                progress = printer.currentJob.progress.toFixed(0);
              }

              _ui["default"].doesElementNeedUpdating(progress + "%", elements.progress, "innerHTML");

              elements.progress.style.width = progress + "%";
              elements.currentFile.setAttribute("title", printer.currentJob.filePath);
              elements.currentFile.innerHTML = '<i class="fas fa-file-code"></i> ' + printer.currentJob.fileDisplay;

              if (printer.printerState.colour.category === "Active") {
                // Active Job
                printTimeElapsedFormat = "\n        <small title=\"Print Time Elapsed\">\n            <i class=\"fas fa-hourglass-start\"></i> ".concat(_calc["default"].generateTime(printer.currentJob.printTimeElapsed), "\n        </small>\n        <br>\n        <small title=\"Expected Print Time\">\n            <i class=\"fas fa-clock\"></i> ").concat(_calc["default"].generateTime(printer.currentJob.expectedPrintTime), "\n        </small>\n      ");
                remainingPrintTimeFormat = "\n        <small title=\"Print Time Remaining\">\n            <i class=\"fas fa-hourglass-end\"></i> ".concat(_calc["default"].generateTime(printer.currentJob.printTimeRemaining), "\n        </small>\n        <br>\n        <small title=\"Estimated Time of Arrival\">\n        <i class=\"fas fa-calendar-alt\"></i> ").concat(printer.currentJob.expectedCompletionDate, "\n        </small>\n      ");

                _ui["default"].doesElementNeedUpdating(printTimeElapsedFormat, elements.printTimeElapsed, "innerHTML");

                _ui["default"].doesElementNeedUpdating(remainingPrintTimeFormat, elements.remainingPrintTime, "innerHTML");
              } else if (printer.printerState.colour.category === "Complete") {
                _printTimeElapsedFormat = "\n        <small title=\"Print Time Elapsed\">\n            <i class=\"fas fa-hourglass-start\"></i> ".concat(_calc["default"].generateTime(printer.currentJob.printTimeElapsed), "\n        </small>\n        <br>\n        <small title=\"Expected Print Time\">\n            <i class=\"fas fa-clock\"></i> ").concat(_calc["default"].generateTime(printer.currentJob.expectedPrintTime), "\n        </small>\n      ");
                _remainingPrintTimeFormat = "\n        <small title=\"Print Time Remaining\">\n            <i class=\"fas fa-hourglass-end\"></i> 0\n        </small>\n        <br>\n        <small title=\"Estimated Time of Arrival\">\n        <i class=\"fas fa-calendar-alt\"></i> Complete!\n        </small>\n      ";

                _ui["default"].doesElementNeedUpdating(_printTimeElapsedFormat, elements.printTimeElapsed, "innerHTML");

                _ui["default"].doesElementNeedUpdating(_remainingPrintTimeFormat, elements.remainingPrintTime, "innerHTML");
              } else {
                _printTimeElapsedFormat2 = "\n        <small title=\"Print Time Elapsed\">\n            <i class=\"fas fa-hourglass-start\"></i> No Active Print\n        </small>\n        <br>\n        <small title=\"Expected Print Time\">\n            <i class=\"fas fa-clock\"></i> No Active Print\n        </small>\n      ";
                _remainingPrintTimeFormat2 = "\n        <small title=\"Print Time Remaining\">\n            <i class=\"fas fa-hourglass-end\"></i> No Active Print\n        </small>\n        <br>\n        <small title=\"Estimated Time of Arrival\">\n        <i class=\"fas fa-calendar-alt\"></i> No Active Print\n        </small>\n      ";

                _ui["default"].doesElementNeedUpdating(_printTimeElapsedFormat2, elements.printTimeElapsed, "innerHTML");

                _ui["default"].doesElementNeedUpdating(_remainingPrintTimeFormat2, elements.remainingPrintTime, "innerHTML");
              }
            } else {
              _printTimeElapsedFormat3 = "\n        <small title=\"Print Time Elapsed\">\n            <i class=\"fas fa-hourglass-start\"></i> No Active Print\n        </small>\n        <br>\n        <small title=\"Expected Print Time\">\n            <i class=\"fas fa-clock\"></i> No Active Print\n        </small>\n      ";
              _remainingPrintTimeFormat3 = "\n        <small title=\"Print Time Remaining\">\n            <i class=\"fas fa-hourglass-end\"></i> No Active Print\n        </small>\n        <br>\n        <small title=\"Estimated Time of Arrival\">\n        <i class=\"fas fa-calendar-alt\"></i> No Active Print\n        </small>\n      "; //No Job reset

              _ui["default"].doesElementNeedUpdating(0 + "%", elements.progress, "innerHTML");

              elements.progress.style.width = 0 + "%";

              _ui["default"].doesElementNeedUpdating(_printTimeElapsedFormat3, elements.printTimeElapsed, "innerHTML");

              _ui["default"].doesElementNeedUpdating(_remainingPrintTimeFormat3, elements.remainingPrintTime, "innerHTML");

              elements.currentFile.setAttribute("title", "No File Selected");
              elements.currentFile.innerHTML = '<i class="fas fa-file-code"></i> ' + "No File Selected";
            }

            if (printer.tools !== null) {
              toolKeys = Object.keys(printer.tools[0]);

              for (t = 0; t < toolKeys.length; t++) {
                if (toolKeys[t].includes("tool")) {
                  toolNumber = toolKeys[t].replace("tool", "");

                  if (document.getElementById(printer._id + "-temperature-" + toolNumber)) {
                    (0, _temperatureCheck.checkTemps)(document.getElementById(printer._id + "-temperature-" + toolNumber), printer.tools[0][toolKeys[t]].actual, printer.tools[0][toolKeys[t]].target, printer.otherSettings.temperatureTriggers, printer.printerState.colour.category);
                  } else {
                    (0, _temperatureCheck.checkTemps)(document.getElementById(printer._id + "-temperature-" + toolNumber), 0, 0, printer.otherSettings.temperatureTriggers, printer.printerState.colour.category);
                  }
                } else if (toolKeys[t].includes("bed")) {
                  if (elements.bed) {
                    (0, _temperatureCheck.checkTemps)(elements.bed, printer.tools[0][toolKeys[t]].actual, printer.tools[0][toolKeys[t]].target, printer.otherSettings.temperatureTriggers, printer.printerState.colour.category);
                  }
                } else if (toolKeys[t].includes("chamber")) {
                  if (elements.chamber) {
                    (0, _temperatureCheck.checkTemps)(elements.chamber, printer.tools[0][toolKeys[t]].actual, printer.tools[0][toolKeys[t]].target, printer.otherSettings.temperatureTriggers, printer.printerState.colour.category);
                  }
                }
              }
            }

            if (!Array.isArray(printer.selectedFilament)) {
              _context2.next = 54;
              break;
            }

            spoolList = "";
            i = 0;

          case 39:
            if (!(i < printer.selectedFilament.length)) {
              _context2.next = 52;
              break;
            }

            _tool = document.getElementById("".concat(printer._id, "-spool-").concat(i));

            if (!(printer.selectedFilament[i] !== null)) {
              _context2.next = 48;
              break;
            }

            _context2.next = 44;
            return (0, _filamentGrab.checkFilamentManager)();

          case 44:
            filamentManager = _context2.sent;

            if (filamentManager) {
              _tool.innerHTML = "".concat(printer.selectedFilament[i].spools.material);
            } else {
              _tool.innerHTML = "".concat(printer.selectedFilament[i].spools.material);
            }

            _context2.next = 49;
            break;

          case 48:
            _tool.innerHTML = "No Spool";

          case 49:
            i++;
            _context2.next = 39;
            break;

          case 52:
            _context2.next = 55;
            break;

          case 54:
            tool.innerHTML = "No Spool";

          case 55:
            hideClosed = "";
            hideOffline = "";

            if (typeof clientSettings.panelView.hideOff !== "undefined" && clientSettings.panelView.hideOff) {
              hideOffline = "hidden";
            }

            if (typeof clientSettings.panelView.hideClosed !== "undefined" && clientSettings.panelView.hideClosed) {
              hideClosed = "hidden";
            }

            if (printer.printerState.colour.category === "Active") {
              // Set the state
              if (elements.row.classList.contains(hideClosed)) {
                elements.row.classList.remove(hideClosed);
              }

              if (elements.row.classList.contains(hideOffline)) {
                elements.row.classList.remove(hideOffline);
              } //Set the buttons


              if (elements.start) {
                elements.start.disabled = true;

                if (view === "camera") {
                  elements.start.classList.add("hidden");
                  elements.stop.classList.remove("hidden");
                }
              }

              if (elements.stop) {
                elements.stop.disabled = false;
              }

              if (printer.printerState.state === "Pausing") {
                if (elements.start) {
                  if (view === "panel") {
                    elements.start.classList.remove("hidden");
                  }
                }

                if (elements.stop) {
                  elements.stop.disabled = false;
                }

                if (elements.resume) {
                  if (view === "panel") {
                    elements.resume.classList.add("hidden");
                  }
                }

                if (elements.pause) {
                  elements.pause.disabled = true;
                  elements.pause.classList.remove("hidden");
                }

                if (elements.restart) {
                  elements.restart.disabled = true;
                  elements.restart.classList.add("hidden");
                }
              } else if (printer.printerState.state === "Paused") {
                if (elements.start) {
                  if (view === "panel") {
                    elements.start.classList.add("hidden");
                  }
                }

                if (elements.resume) {
                  elements.resume.disabled = false;
                  elements.resume.classList.remove("hidden");
                }

                if (elements.pause) {
                  elements.pause.disabled = true;
                  elements.pause.classList.add("hidden");
                }

                if (elements.restart) {
                  elements.restart.disabled = false;
                  elements.restart.classList.remove("hidden");
                }
              } else {
                if (elements.start) {
                  if (view === "panel" && view === "camera") {
                    elements.start.classList.remove("hidden");
                  }
                }

                if (elements.resume) {
                  elements.resume.disabled = true;
                  elements.resume.classList.add("hidden");
                }

                if (elements.pause) {
                  elements.pause.disabled = false;
                  elements.pause.classList.remove("hidden");
                }

                if (elements.restart) {
                  elements.restart.disabled = true;
                  elements.restart.classList.add("hidden");
                }
              }
            } else if (printer.printerState.colour.category === "Idle" || printer.printerState.colour.category === "Complete") {
              if (elements.row.classList.contains(hideClosed)) {
                elements.row.classList.remove(hideClosed);
              }

              if (elements.row.classList.contains(hideOffline)) {
                elements.row.classList.remove(hideOffline);
              }

              if (printer.currentJob !== null && printer.currentJob.fileName !== "No File Selected") {
                if (view === "camera") {
                  elements.start.classList.remove("hidden");
                  elements.stop.classList.add("hidden");
                }

                if (elements.start) {
                  elements.start.disabled = false;
                }

                if (elements.stop) {
                  elements.stop.disabled = true;
                }

                if (elements.resume) {
                  elements.resume.disabled = true;
                }

                if (elements.pause) {
                  elements.pause.disabled = true;
                }

                if (elements.restart) {
                  elements.restart.disabled = true;
                }
              } else {
                if (elements.start) {
                  elements.start.disabled = true;
                }

                if (elements.stop) {
                  elements.stop.disabled = true;
                }

                if (elements.resume) {
                  elements.resume.disabled = true;
                }

                if (elements.pause) {
                  elements.pause.disabled = true;
                }

                if (elements.restart) {
                  elements.restart.disabled = true;
                }
              }

              if (printer.printerState.state === "Paused") {
                if (elements.start) {
                  if (view === "panel") {
                    elements.start.classList.add("hidden");
                  }
                }

                if (elements.stop) {
                  elements.stop.disabled = false;
                }

                if (elements.resume) {
                  elements.resume.disabled = false;
                  elements.resume.classList.remove("hidden");
                }

                if (elements.pause) {
                  elements.pause.disabled = true;
                  elements.pause.classList.add("hidden");
                }

                if (elements.restart) {
                  elements.restart.disabled = false;
                  elements.restart.classList.remove("hidden");
                }
              } else {
                if (elements.start) {
                  if (view === "panel") {
                    elements.start.classList.remove("hidden");
                  }
                }

                if (elements.resume) {
                  elements.resume.disabled = true;
                  elements.resume.classList.add("hidden");
                }

                if (elements.pause) {
                  elements.pause.disabled = true;
                  elements.pause.classList.remove("hidden");
                }

                if (elements.restart) {
                  elements.restart.disabled = true;
                  elements.restart.classList.add("hidden");
                }
              }
            } else if (printer.printerState.state === "Disconnected") {
              if (view === "camera") {
                elements.start.classList.remove("hidden");
                elements.stop.classList.add("hidden");
              }

              if (hideClosed !== "") {
                elements.row.classList.add(hideClosed);
              }

              if (elements.start) {
                elements.start.disabled = true;

                if (view === "panel") {
                  elements.start.classList.remove("hidden");
                }
              }

              if (elements.stop) {
                elements.stop.disabled = true;
              }

              if (elements.resume) {
                elements.resume.disabled = true;
                elements.resume.classList.add("hidden");
              }

              if (elements.pause) {
                elements.pause.disabled = true;
                elements.pause.classList.remove("hidden");
              }

              if (elements.restart) {
                elements.restart.disabled = true;
                elements.restart.classList.add("hidden");
              }
            } else if (printer.printerState.colour.category === "Offline") {
              if (view === "camera") {
                elements.start.classList.remove("hidden");
                elements.stop.classList.add("hidden");
              }

              if (hideOffline !== "") {
                elements.row.classList.add(hideOffline);
              }

              if (elements.start) {
                elements.start.disabled = true;

                if (view === "panel") {
                  elements.start.classList.remove("hidden");
                }
              }

              if (elements.stop) {
                elements.stop.disabled = true;
              }

              if (elements.resume) {
                elements.resume.disabled = true;
                elements.resume.classList.add("hidden");
              }

              if (elements.pause) {
                elements.pause.disabled = true;
                elements.pause.classList.remove("hidden");
              }

              if (elements.restart) {
                elements.restart.disabled = true;
                elements.restart.classList.add("hidden");
              }
            }

          case 60:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _updateState.apply(this, arguments);
}

function init(_x5, _x6, _x7) {
  return _init.apply(this, arguments);
}

function _init() {
  _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(printers, clientSettings, view) {
    var p, printerPanel, printerHTML, _printerHTML, _printerHTML2;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.t0 = printerManagerModal.classList.contains("show");
            _context3.next = _context3.t0 === true ? 3 : _context3.t0 === false ? 5 : 55;
            break;

          case 3:
            // Run printer manager updater
            _printerManager["default"].init("", printers, printerControlList);

            return _context3.abrupt("break", 55);

          case 5:
            p = 0;

          case 6:
            if (!(p < printers.length)) {
              _context3.next = 54;
              break;
            }

            printerPanel = document.getElementById("panel-" + printers[p]._id);

            if (printerPanel) {
              _context3.next = 38;
              break;
            }

            if (!(view === "panel")) {
              _context3.next = 16;
              break;
            }

            _context3.next = 12;
            return drawPanelView(printers[p], clientSettings, view);

          case 12:
            printerHTML = _context3.sent;
            printerArea.insertAdjacentHTML("beforeend", printerHTML);
            _context3.next = 28;
            break;

          case 16:
            if (!(view === "list")) {
              _context3.next = 23;
              break;
            }

            _context3.next = 19;
            return drawListView(printers[p], clientSettings, view);

          case 19:
            _printerHTML = _context3.sent;
            printerArea.insertAdjacentHTML("beforeend", _printerHTML);
            _context3.next = 28;
            break;

          case 23:
            if (!(view === "camera")) {
              _context3.next = 28;
              break;
            }

            _context3.next = 26;
            return drawCameraView(printers[p], clientSettings, view);

          case 26:
            _printerHTML2 = _context3.sent;
            printerArea.insertAdjacentHTML("beforeend", _printerHTML2);

          case 28:
            //Update the printer panel to the actual one
            printerPanel = document.getElementById("panel-" + printers[p]._id); //Setup Action Buttons

            _context3.next = 31;
            return (0, _actionButtons.init)(printers[p], "printerActionBtns-".concat(printers[p]._id));

          case 31:
            //Add page listeners
            addListeners(printers[p]); //Grab elements

            _context3.next = 34;
            return grabElements(printers[p]);

          case 34:
            _context3.next = 36;
            return (0, _dragAndDrop.dragAndDropEnable)(printerPanel, printers[p]);

          case 36:
            _context3.next = 51;
            break;

          case 38:
            if (printerManagerModal.classList.contains("show")) {
              _context3.next = 51;
              break;
            }

            _context3.next = 41;
            return (0, _dragAndDrop.dragCheck)();

          case 41:
            if (_context3.sent) {
              _context3.next = 44;
              break;
            }

            _context3.next = 44;
            return updateState(printers[p], clientSettings, view);

          case 44:
            if (!(powerTimer >= 20000)) {
              _context3.next = 50;
              break;
            }

            _context3.next = 47;
            return _powerButton["default"].applyBtn(printers[p], "powerBtn-");

          case 47:
            powerTimer = 0;
            _context3.next = 51;
            break;

          case 50:
            powerTimer += 500;

          case 51:
            p++;
            _context3.next = 6;
            break;

          case 54:
            return _context3.abrupt("break", 55);

          case 55:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _init.apply(this, arguments);
}

},{"../functions/calc.js":1,"../functions/dragAndDrop.js":2,"../functions/fullscreen.js":3,"../functions/ui.js":4,"../modules/temperatureCheck.js":16,"../octofarm":18,"../octoprint.js":19,"./Printers/actionButtons.js":6,"./currentOperations":8,"./filamentGrab.js":10,"./powerButton.js":13,"./printerManager.js":14}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var OctoFarmclient = /*#__PURE__*/function () {
  function OctoFarmclient() {
    _classCallCheck(this, OctoFarmclient);
  }

  _createClass(OctoFarmclient, null, [{
    key: "get",
    value: function get(item) {
      var url = "/".concat(item);
      return fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        }
      });
    }
  }, {
    key: "delete",
    value: function _delete(item) {
      var url = "/".concat(item);
      return fetch(url, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json"
        }
      });
    }
  }, {
    key: "post",
    value: function post(item, data) {
      var url = "/".concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      });
    }
  }]);

  return OctoFarmclient;
}();

exports["default"] = OctoFarmclient;

},{}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ui = _interopRequireDefault(require("./functions/ui.js"));

var _octofarm = _interopRequireDefault(require("./octofarm.js"));

var _validate = _interopRequireDefault(require("./functions/validate.js"));

var _filamentGrab = require("./modules/filamentGrab.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var OctoPrintClient = /*#__PURE__*/function () {
  function OctoPrintClient() {
    _classCallCheck(this, OctoPrintClient);
  }

  _createClass(OctoPrintClient, null, [{
    key: "get",
    value: function get(printer, item) {
      var url = "".concat(printer.printerURL, "/").concat(item);
      return fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        }
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "postNOAPI",
    value: function postNOAPI(printer, item, data) {
      var url = "".concat(printer.printerURL, "/").concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        },
        body: JSON.stringify(data)
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "post",
    value: function post(printer, item, data) {
      var url = "".concat(printer.printerURL, "/api/").concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        },
        body: JSON.stringify(data)
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "folder",
    value: function folder(printer, item, data) {
      var url = "".concat(printer.printerURL, "/api/files/").concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "X-Api-Key": printer.apikey
        },
        body: data
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "move",
    value: function move(printer, item, data) {
      var url = "".concat(printer.printerURL, "/api/").concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        },
        body: JSON.stringify(data)
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "delete",
    value: function _delete(printer, item) {
      var url = "".concat(printer.printerURL, "/api/").concat(item);
      return fetch(url, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        }
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "selectTool",
    value: function () {
      var _selectTool = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(printer, tool) {
        var opt, post;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                opt = {
                  command: "select",
                  tool: tool
                };
                _context.next = 3;
                return OctoPrintClient.post(printer, "printer/tool", opt);

              case 3:
                post = _context.sent;

                if (!(post.status === 204)) {
                  _context.next = 8;
                  break;
                }

                return _context.abrupt("return", true);

              case 8:
                return _context.abrupt("return", false);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function selectTool(_x, _x2) {
        return _selectTool.apply(this, arguments);
      }

      return selectTool;
    }()
  }, {
    key: "system",
    value: function () {
      var _system = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(printer, action) {
        var url;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                url = "system/commands/core/" + action;
                bootbox.confirm({
                  message: "Are your sure you want to ".concat(action, " ").concat(printer.printerName, "?"),
                  buttons: {
                    cancel: {
                      label: "<i class=\"fa fa-times\"></i> No"
                    },
                    confirm: {
                      label: "<i class=\"fa fa-check\"></i> Yes"
                    }
                  },
                  callback: function callback(result) {
                    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                      var post;
                      return regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              if (!result) {
                                _context2.next = 5;
                                break;
                              }

                              _context2.next = 3;
                              return OctoPrintClient.post(printer, url)["catch"](function (e) {
                                _ui["default"].createAlert("danger", e, 4000, "Clicked");
                              });

                            case 3:
                              post = _context2.sent;

                              if (post.status === 204) {
                                _ui["default"].createAlert("success", "".concat(printer.printerName, ": ").concat(action, " was successful"), 3000, "clicked");
                              } else {
                                _ui["default"].createAlert("error", "".concat(printer.printerName, ": ").concat(action, " was unsuccessful. Please make sure printer is connected and commands are setup in Settings -> Server."), 3000, "clicked");
                              }

                            case 5:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    }))();
                  }
                });

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function system(_x3, _x4) {
        return _system.apply(this, arguments);
      }

      return system;
    }()
  }, {
    key: "systemNoConfirm",
    value: function () {
      var _systemNoConfirm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(printer, action) {
        var url;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                url = "system/commands/core/" + action;
                _context4.next = 3;
                return OctoPrintClient.post(printer, url);

              case 3:
                return _context4.abrupt("return", _context4.sent);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function systemNoConfirm(_x5, _x6) {
        return _systemNoConfirm.apply(this, arguments);
      }

      return systemNoConfirm;
    }()
  }, {
    key: "move",
    value: function () {
      var _move = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(element, printer, action, axis, dir) {
        var flashReturn, url, post, amount, opt;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                flashReturn = function flashReturn() {
                  element.target.classList = "btn btn-light";
                };

                url = "printer/printhead";
                post = null;
                _context5.next = 5;
                return document.querySelectorAll("#pcAxisSteps > .btn.active");

              case 5:
                amount = _context5.sent;
                amount = amount[0].innerHTML;
                opt = null;

                if (action === "home") {
                  opt = {
                    command: action,
                    axes: axis
                  };
                } else if (action === "jog") {
                  if (dir != undefined) {
                    amount = Number(dir + amount);
                  } else {
                    amount = Number(amount);
                  }

                  opt = _defineProperty({
                    command: action
                  }, axis, amount);
                } else if (action === "feedrate") {
                  opt = {
                    command: action,
                    factor: amount
                  };
                }

                _context5.next = 11;
                return OctoPrintClient.post(printer, url, opt);

              case 11:
                post = _context5.sent;

                if (post.status === 204) {
                  element.target.classList = "btn btn-success";
                  setTimeout(flashReturn, 500);
                } else {
                  element.target.classList = "btn btn-danger";
                  setTimeout(flashReturn, 500);
                }

              case 13:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function move(_x7, _x8, _x9, _x10, _x11) {
        return _move.apply(this, arguments);
      }

      return move;
    }()
  }, {
    key: "file",
    value: function () {
      var _file2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(printer, fullPath, action, _file) {
        var url, post, opt, _opt2, flow, feed, _opt3, fileDel;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                url = "files/local/" + fullPath;
                post = null;

                if (!(action === "load")) {
                  _context6.next = 9;
                  break;
                }

                opt = {
                  command: "select",
                  print: false
                };
                _context6.next = 6;
                return OctoPrintClient.post(printer, url, opt);

              case 6:
                post = _context6.sent;
                _context6.next = 26;
                break;

              case 9:
                if (!(action === "print")) {
                  _context6.next = 22;
                  break;
                }

                _opt2 = {
                  command: "select",
                  print: true
                }; // Make sure feed/flow are set before starting print...

                flow = {
                  command: "flowrate",
                  factor: parseInt(printer.flowRate)
                };
                _context6.next = 14;
                return OctoPrintClient.post(printer, "printer/tool", flow);

              case 14:
                feed = {
                  command: "feedrate",
                  factor: parseInt(printer.feedRate)
                };
                _context6.next = 17;
                return OctoPrintClient.post(printer, "printer/printhead", feed);

              case 17:
                _context6.next = 19;
                return OctoPrintClient.post(printer, url, _opt2);

              case 19:
                post = _context6.sent;
                _context6.next = 26;
                break;

              case 22:
                if (!(action === "delete")) {
                  _context6.next = 26;
                  break;
                }

                _context6.next = 25;
                return OctoPrintClient["delete"](printer, url);

              case 25:
                post = _context6.sent;

              case 26:
                if (!(post.status === 204)) {
                  _context6.next = 38;
                  break;
                }

                if (!(action === "delete")) {
                  _context6.next = 35;
                  break;
                }

                _opt3 = {
                  i: printer,
                  fullPath: fullPath
                };
                _context6.next = 31;
                return _octofarm["default"].post("printers/removefile", _opt3);

              case 31:
                fileDel = _context6.sent;

                _ui["default"].createAlert("success", "".concat(printer.printerName, ": ").concat(action, " completed"), 3000, "clicked");

                _context6.next = 36;
                break;

              case 35:
                _ui["default"].createAlert("success", "".concat(printer.printerName, ": ").concat(action, " actioned"), 3000, "clicked");

              case 36:
                _context6.next = 39;
                break;

              case 38:
                _ui["default"].createAlert("error", "".concat(printer.printerName, ": ").concat(action, " failed"), 3000, "clicked");

              case 39:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function file(_x12, _x13, _x14, _x15) {
        return _file2.apply(this, arguments);
      }

      return file;
    }()
  }, {
    key: "jobAction",
    value: function () {
      var _jobAction = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(printer, opts, element) {
        var checkSettings, flow, feed, body, filamentCheck, printerCheck, post;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return _octofarm["default"].get("settings/server/get");

              case 2:
                checkSettings = _context8.sent;
                _context8.next = 5;
                return checkSettings.json();

              case 5:
                checkSettings = _context8.sent;
                // Make sure feed/flow are set before starting print...
                flow = {
                  command: "flowrate",
                  factor: parseInt(printer.flowRate)
                };
                _context8.next = 9;
                return OctoPrintClient.post(printer, "printer/tool", flow);

              case 9:
                feed = {
                  command: "feedrate",
                  factor: parseInt(printer.feedRate)
                };
                _context8.next = 12;
                return OctoPrintClient.post(printer, "printer/printhead", feed);

              case 12:
                body = {
                  i: printer._id
                };
                filamentCheck = false;

                if (typeof checkSettings.filament !== "undefined") {
                  filamentCheck = checkSettings.filament.filamentCheck;
                }

                printerCheck = false;

                if (printer.selectedFilament != null && Array.isArray(printer.selectedFilament)) {
                  printerCheck = printer.selectedFilament.every(function (e) {
                    return e !== null;
                  });
                }

                if (!(filamentCheck && !printerCheck && opts.command === "start")) {
                  _context8.next = 21;
                  break;
                }

                bootbox.confirm({
                  message: "You have spools in the inventory, but none selected. Would you like to select a spool?",
                  buttons: {
                    confirm: {
                      label: "Yes",
                      className: "btn-success"
                    },
                    cancel: {
                      label: "No",
                      className: "btn-danger"
                    }
                  },
                  callback: function callback(result) {
                    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                      var offset, _post, post;

                      return regeneratorRuntime.wrap(function _callee7$(_context7) {
                        while (1) {
                          switch (_context7.prev = _context7.next) {
                            case 0:
                              if (!result) {
                                _context7.next = 3;
                                break;
                              }

                              _context7.next = 15;
                              break;

                            case 3:
                              if (!(printer.selectedFilament != null && Array.isArray(printer.selectedFilament))) {
                                _context7.next = 9;
                                break;
                              }

                              offset = {
                                command: "offset",
                                offsets: {}
                              };
                              printer.selectedFilament.forEach(function (spool, index) {
                                if (spool != null) {
                                  offset.offsets["tool" + index] = spool.spools.tempOffset;
                                }
                              });
                              _context7.next = 8;
                              return OctoPrintClient.post(printer, "printer/tool", offset);

                            case 8:
                              _post = _context7.sent;

                            case 9:
                              _context7.next = 11;
                              return OctoPrintClient.post(printer, "printer/printhead", feed);

                            case 11:
                              _context7.next = 13;
                              return OctoPrintClient.post(printer, "job", opts);

                            case 13:
                              post = _context7.sent;
                              element.target.disabled = false;

                            case 15:
                            case "end":
                              return _context7.stop();
                          }
                        }
                      }, _callee7);
                    }))();
                  }
                });
                _context8.next = 27;
                break;

              case 21:
                _context8.next = 23;
                return OctoPrintClient.post(printer, "printer/printhead", feed);

              case 23:
                _context8.next = 25;
                return OctoPrintClient.post(printer, "job", opts);

              case 25:
                post = _context8.sent;
                element.target.disabled = false;

              case 27:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function jobAction(_x16, _x17, _x18) {
        return _jobAction.apply(this, arguments);
      }

      return jobAction;
    }()
  }, {
    key: "connect",
    value: function () {
      var _connect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(command, printer) {
        var opts, post;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                opts = null;

                if (command === "connect") {
                  opts = {
                    command: "connect",
                    port: document.getElementById("pmSerialPort").value,
                    baudrate: parseInt(document.getElementById("pmBaudrate").value),
                    printerProfile: document.getElementById("pmProfile").value,
                    save: true
                  };
                } else {
                  opts = {
                    command: "disconnect"
                  };
                }

                _context9.next = 4;
                return OctoPrintClient.post(printer, "connection", opts);

              case 4:
                post = _context9.sent;

                if (typeof post !== "undefined" && post.status === 204) {
                  _ui["default"].createAlert("success", "".concat(printer.printerName, ": ").concat(opts.command, "ion attempt was successful"), 3000, "click");

                  if (command === "connect") {
                    document.getElementById("pmSerialPort").disabled = true;
                    document.getElementById("pmBaudrate").disabled = true;
                    document.getElementById("pmProfile").disabled = true;
                  } else {
                    document.getElementById("pmSerialPort").disabled = false;
                    document.getElementById("pmBaudrate").disabled = false;
                    document.getElementById("pmProfile").disabled = false;
                  }
                } else {
                  document.getElementById("pmSerialPort").disabled = false;
                  document.getElementById("pmBaudrate").disabled = false;
                  document.getElementById("pmProfile").disabled = false;

                  _ui["default"].createAlert("error", "".concat(printer.printerName, ": could not ").concat(opts.command, "."), 3000, "click");
                }

              case 6:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function connect(_x19, _x20) {
        return _connect.apply(this, arguments);
      }

      return connect;
    }()
  }, {
    key: "power",
    value: function () {
      var _power = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(printer, url, action, command) {
        var post, _post2;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                if (url.includes("[PrinterURL]")) {
                  url = url.replace("[PrinterURL]", printer.printerURL);
                }

                if (url.includes("[PrinterAPI]")) {
                  url = url.replace("[PrinterAPI]", printer.apikey);
                }

                if (!(typeof command === "undefined" || command.length === 0)) {
                  _context10.next = 15;
                  break;
                }

                _context10.prev = 3;
                _context10.next = 6;
                return fetch(url, {
                  method: "GET",
                  headers: {
                    "Content-Type": "application/json",
                    "X-Api-Key": printer.apikey
                  }
                });

              case 6:
                post = _context10.sent;

                if (post.status !== 200 || post.status !== 204) {
                  _ui["default"].createAlert("error", "".concat(printer.printerName, ": Could not complete ").concat(action), 3000);
                } else {
                  _ui["default"].createAlert("success", "".concat(printer.printerName, ": Successfully completed ").concat(action), 3000);
                }

                _context10.next = 13;
                break;

              case 10:
                _context10.prev = 10;
                _context10.t0 = _context10["catch"](3);

                _ui["default"].createAlert("error", "".concat(printer.printerName, ": Could not complete ").concat(action, " - Error: ").concat(_context10.t0), 3000);

              case 13:
                _context10.next = 25;
                break;

              case 15:
                _context10.prev = 15;
                _context10.next = 18;
                return fetch(url, {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "X-Api-Key": printer.apikey
                  },
                  body: command
                });

              case 18:
                _post2 = _context10.sent;

                if (_post2.status !== 200 || _post2.status !== 204) {
                  _ui["default"].createAlert("error", "".concat(printer.printerName, ": Could not complete ").concat(action), 3000);
                } else {
                  _ui["default"].createAlert("success", "".concat(printer.printerName, ": Successfully completed ").concat(action), 3000);
                }

                _context10.next = 25;
                break;

              case 22:
                _context10.prev = 22;
                _context10.t1 = _context10["catch"](15);

                _ui["default"].createAlert("error", "".concat(printer.printerName, ": Could not complete ").concat(action, " - Error: ").concat(_context10.t1), 3000);

              case 25:
                return _context10.abrupt("return", "done");

              case 26:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, null, [[3, 10], [15, 22]]);
      }));

      function power(_x21, _x22, _x23, _x24) {
        return _power.apply(this, arguments);
      }

      return power;
    }()
  }, {
    key: "getPowerStatus",
    value: function () {
      var _getPowerStatus = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(printer, url, command) {
        var post, _post3, status, powerStatusPrinter;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                if (url.includes("[PrinterURL]")) {
                  url = url.replace("[PrinterURL]", printer.printerURL);
                }

                if (url.includes("[PrinterAPI]")) {
                  url = url.replace("[PrinterAPI]", printer.apikey);
                }

                if (!(typeof command === "undefined" || command === "" || command === null)) {
                  _context11.next = 16;
                  break;
                }

                _context11.next = 5;
                return fetch(url, {
                  method: "GET",
                  headers: {
                    "Content-Type": "application/json",
                    "X-Api-Key": printer.apikey
                  }
                });

              case 5:
                post = _context11.sent;

                if (!(post.status !== 200 || post.status !== 204)) {
                  _context11.next = 10;
                  break;
                }

                return _context11.abrupt("return", "No Status");

              case 10:
                _context11.next = 12;
                return post.json();

              case 12:
                post = _context11.sent;
                return _context11.abrupt("return", post);

              case 14:
                _context11.next = 32;
                break;

              case 16:
                _context11.prev = 16;
                _context11.next = 19;
                return fetch(url, {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "X-Api-Key": printer.apikey
                  },
                  body: command
                });

              case 19:
                _post3 = _context11.sent;
                status = "No Status";

                if (!(_post3.status === 200 || _post3.status === 204)) {
                  _context11.next = 25;
                  break;
                }

                _context11.next = 24;
                return _post3.json();

              case 24:
                status = _context11.sent;

              case 25:
                powerStatusPrinter = document.getElementById("printerStatus-" + printer._id);

                if (powerStatusPrinter) {
                  if (status === "No Status") {
                    powerStatusPrinter.style.color = "black";
                  } else if (status[Object.keys(status)[0]]) {
                    powerStatusPrinter.style.color = "green";
                  } else {
                    powerStatusPrinter.style.color = "red";
                  }
                }

                _context11.next = 32;
                break;

              case 29:
                _context11.prev = 29;
                _context11.t0 = _context11["catch"](16);
                console.log("Printer Power Check failed... classing offline:", _context11.t0);

              case 32:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, null, [[16, 29]]);
      }));

      function getPowerStatus(_x25, _x26, _x27) {
        return _getPowerStatus.apply(this, arguments);
      }

      return getPowerStatus;
    }()
  }]);

  return OctoPrintClient;
}();

exports["default"] = OctoPrintClient;

},{"./functions/ui.js":4,"./functions/validate.js":5,"./modules/filamentGrab.js":10,"./octofarm.js":18}],20:[function(require,module,exports){
"use strict";

var _viewUpdater = _interopRequireDefault(require("./lib/modules/viewUpdater.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

(0, _viewUpdater["default"])("list");

},{"./lib/modules/viewUpdater.js":17}]},{},[20]);
