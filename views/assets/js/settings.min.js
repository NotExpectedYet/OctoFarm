(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Calculation Functions
var Calculate = /*#__PURE__*/function () {
  function Calculate() {
    _classCallCheck(this, Calculate);
  }

  _createClass(Calculate, null, [{
    key: "randomString",
    // Generate a random string
    value: function randomString() {
      var random = Math.random().toString(36).substr(2, 5);
      return random;
    } // Apply tofixed if not null

  }, {
    key: "toFixed",
    value: function toFixed(amount, fractional) {
      if (typeof amount !== "undefined" && amount !== null) {
        return amount.toFixed(fractional);
      }

      return 0;
    } // Convert miliseconds to Days, Hours, Minutes

  }, {
    key: "generateTime",
    value: function generateTime(seconds) {
      var string = "";

      if (seconds === undefined || isNaN(seconds) || seconds === null) {
        string = "No Time Estimate";
      } else {
        var years = Math.floor(seconds / (360 * 365));
        var days = Math.floor(seconds / (3600 * 24));
        seconds -= days * 3600 * 24;
        var hrs = Math.floor(seconds / 3600);
        seconds -= hrs * 3600;
        var mnts = Math.floor(seconds / 60);
        seconds -= mnts * 60;
        seconds = Math.floor(seconds);
        string = "".concat(days, "d, ").concat(hrs, "h, ").concat(mnts, "m, ").concat(seconds, "s");

        if (mnts === 0) {
          if (string.includes("0m")) {
            string = string.replace(" 0m,", "");
          }
        }

        if (hrs === 0) {
          if (string.includes("0h")) {
            string = string.replace(" 0h,", "");
          }
        }

        if (days === 0) {
          if (string.includes("0d")) {
            string = string.replace("0d,", "");
          }
        }

        if (mnts === 0 && hrs === 0 && days === 0 && seconds === 0) {
          string = string.replace("0s", "Done");
        }
      }

      return string;
    } // Check if values are between another value.

  }, {
    key: "isBetween",
    value: function isBetween(n, a, b) {
      return (n - a) * (n - b) <= 0;
    }
  }, {
    key: "returnPrintCost",
    value: function returnPrintCost(costSettings, time) {
      if (typeof costSettings === "undefined") {
        // Attempt to update cost settings in history...
        return "No cost settings to calculate from";
      } // calculating electricity cost


      var powerConsumption = parseFloat(costSettings.powerConsumption);
      var costOfElectricity = parseFloat(costSettings.electricityCosts);
      var costPerHour = powerConsumption * costOfElectricity;
      var estimatedPrintTime = time / 3600; // h

      var electricityCost = costPerHour * estimatedPrintTime; // calculating printer cost

      var purchasePrice = parseFloat(costSettings.purchasePrice);
      var lifespan = parseFloat(costSettings.estimateLifespan);
      var depreciationPerHour = lifespan > 0 ? purchasePrice / lifespan : 0;
      var maintenancePerHour = parseFloat(costSettings.maintenanceCosts);
      var printerCost = (depreciationPerHour + maintenancePerHour) * estimatedPrintTime; // assembling string

      var estimatedCost = electricityCost + printerCost;
      return estimatedCost.toFixed(2);
    }
  }, {
    key: "bytes",
    value: function bytes(a, b) {
      var string = "";

      if (a === undefined || isNaN(a) || a === null) {
        return string = "No File Estimate";
      }

      if (a == 0) return "0 Bytes";
      var c = 1024;
      var d = b || 2;
      var e = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
      var f = Math.floor(Math.log(a) / Math.log(c));
      return "".concat(parseFloat((a / Math.pow(c, f)).toFixed(d)), " ").concat(e[f]);
    }
  }, {
    key: "dateClean",
    value: function dateClean(date) {
      date = new Date(date);
      var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
      var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
      return "".concat(days[date.getDay()], " ").concat(months[date.getMonth()], " ").concat(date.getFullYear(), " - ").concat(date.getHours(), ":").concat(date.getMinutes(), ":").concat(date.getSeconds());
    }
  }, {
    key: "generateCost",
    value: function generateCost(cost) {
      if (cost) {
        return cost.toFixed(2);
      } else {
        return 0;
      }
    }
  }]);

  return Calculate;
}();

exports["default"] = Calculate;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var FileOperations = /*#__PURE__*/function () {
  function FileOperations() {
    _classCallCheck(this, FileOperations);
  }

  _createClass(FileOperations, null, [{
    key: "download",
    //Download a generated file
    value: function download(filename, text) {
      try {
        var element = document.createElement("a");
        element.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(text));
        element.setAttribute("download", filename);
        element.style.display = "none";
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
      } catch (e) {
        console.log(e);
      }
    }
  }]);

  return FileOperations;
}();

exports["default"] = FileOperations;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var UI = /*#__PURE__*/function () {
  function UI() {
    _classCallCheck(this, UI);
  }

  _createClass(UI, null, [{
    key: "getColour",
    //Colour function
    value: function getColour(state) {
      if (state === "Operational") {
        return {
          name: "secondary",
          hex: "#262626",
          category: "Idle"
        };
      } else if (state === "Paused") {
        return {
          name: "warning",
          hex: "#583c0e",
          category: "Idle"
        };
      } else if (state === "Printing") {
        return {
          name: "warning",
          hex: "#583c0e",
          category: "Active"
        };
      } else if (state === "Pausing") {
        return {
          name: "warning",
          hex: "#583c0e",
          category: "Active"
        };
      } else if (state === "Cancelling") {
        return {
          name: "warning",
          hex: "#583c0e",
          category: "Active"
        };
      } else if (state === "Error") {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Idle"
        };
      } else if (state === "Offline") {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Offline"
        };
      } else if (state === "Searching...") {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Idle"
        };
      } else if (state === "Closed") {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Closed"
        };
      } else if (state === "Complete") {
        return {
          name: "success",
          hex: "#00330e",
          category: "Complete"
        };
      } else {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Offline"
        };
      }
    } //Create message

  }, {
    key: "createMessage",
    value: function createMessage(options, element) {
      var message = document.getElementById(element);
      var row = "\n      <div class=\"alert alert-".concat(options.type, " alert-dismissible fade show\" role=\"alert\">\n        ").concat(options.msg, "\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n    ");
      message.insertAdjacentHTML("beforeend", row);
    } //Create toast notification

  }, {
    key: "createAlert",
    value: function createAlert(type, message, delay, click) {
      if (click != undefined) {
        click = ["click"];
      } else {
        click = [];
      } //This needs a more elegant solution, I think noty is keeping the elements I remove with remove() from the DOM in memory somewhere...


      Noty.setMaxVisible(50);
      var alert = new Noty({
        type: type,
        theme: "bootstrap-v4",
        closeWith: click,
        timeout: delay,
        layout: "bottomRight",
        text: message
      });
      alert.show();
      return alert;
    }
  }, {
    key: "doesElementNeedUpdating",
    value: function doesElementNeedUpdating(value, element, meta) {
      //Quick check to see if the UI value differs, if so update.
      if (element) {
        if (JSON.stringify(value) !== JSON.stringify(element[meta])) {
          element[meta] = value;
        }
      }
    }
  }, {
    key: "clearSelect",
    value: function clearSelect(elementValue) {
      var inputBoxes = document.querySelectorAll("*[id^=" + elementValue + "]");
      inputBoxes.forEach(function (input) {
        input.value = "";
      });
    }
  }, {
    key: "addSelectListeners",
    value: function addSelectListeners(elementValue) {
      var inputBoxes = document.querySelectorAll("*[id^=" + elementValue + "]");
      inputBoxes.forEach(function (input) {
        input.addEventListener("focus", function (e) {
          if (input.value !== input.placeholder) {
            input.value = input.placeholder;
          }
        });
        input.addEventListener("focusout", function (e) {
          if (input.value !== input.placeholder) {
            input.placeholder = input.value;
          }
        });
      });
    }
  }]);

  return UI;
}();

exports["default"] = UI;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Validate = /*#__PURE__*/function () {
  function Validate() {
    _classCallCheck(this, Validate);
  }

  _createClass(Validate, null, [{
    key: "URL",
    //Check the validity of a URL
    value: function URL(u) {
      var elm;

      if (!elm) {
        elm = document.createElement('input');
        elm.setAttribute('type', 'url');
      }

      elm.value = u;
      return elm.validity.valid;
    }
  }, {
    key: "IP",
    value: function IP(ipaddress) {
      if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "JSON",
    value: function JSON(file) {
      if (/^[\],:{}\s]*$/.test(file.replace(/\\["\\\/bfnrtu]/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "getName",
    value: function getName(printer) {
      if (typeof printer.settingsAppearance != "undefined") {
        if (printer.settingsAppearance.name === "" || printer.settingsAppearance.name === null) {
          return printer.printerURL;
        } else {
          return printer.settingsAppearance.name;
        }
      } else {
        return printer.printerURL;
      }
    }
  }, {
    key: "stripHTML",
    value: function stripHTML(text) {
      var tmp = document.createElement("DIV");
      tmp.innerHTML = text;
      var res = tmp.textContent || tmp.innerText || '';
      res.replace("\u200B", ''); // zero width space

      res = res.trim();
      return res;
    }
  }]);

  return Validate;
}();

exports["default"] = Validate;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkFilamentManager = checkFilamentManager;
exports.returnDropDown = returnDropDown;
exports.selectFilament = selectFilament;

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function checkFilamentManager() {
  return _checkFilamentManager.apply(this, arguments);
} // export async function returnSelected(id, profiles) {
//   console.log("Return Selected");
//   let profileId = null;
//   const filamentManager = await checkFilamentManager();
//   if (filamentManager) {
//     profileId = _.findIndex(profiles, function (o) {
//       return o.profile.index == id.spools.profile;
//     });
//   } else {
//     profileId = _.findIndex(profiles, function (o) {
//       return o._id == id.spools.profile;
//     });
//   }
//   return `${id.spools.name} (${(id.spools.weight - id.spools.used).toFixed(
//     0
//   )}g) - ${profiles[profileId].profile.material}`;
// }


function _checkFilamentManager() {
  _checkFilamentManager = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var settings;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _octofarm["default"].get("settings/server/get");

          case 2:
            settings = _context.sent;
            _context.next = 5;
            return settings.json();

          case 5:
            settings = _context.sent;
            return _context.abrupt("return", settings.filamentManager);

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _checkFilamentManager.apply(this, arguments);
}

function returnDropDown(_x) {
  return _returnDropDown.apply(this, arguments);
}

function _returnDropDown() {
  _returnDropDown = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(history) {
    var dropDownLists;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _octofarm["default"].get("filament/get/dropDownList");

          case 2:
            dropDownLists = _context2.sent;
            _context2.next = 5;
            return dropDownLists.json();

          case 5:
            dropDownLists = _context2.sent;

            if (!history) {
              _context2.next = 10;
              break;
            }

            return _context2.abrupt("return", dropDownLists.selected.historyDropDown);

          case 10:
            return _context2.abrupt("return", dropDownLists.selected.normalDropDown);

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _returnDropDown.apply(this, arguments);
}

function selectFilament(_x2, _x3, _x4) {
  return _selectFilament.apply(this, arguments);
}

function _selectFilament() {
  _selectFilament = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(printerId, spoolId, tool) {
    var data, changedFilament;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            data = {
              tool: tool,
              printerId: printerId,
              spoolId: spoolId
            };
            _context3.next = 3;
            return _octofarm["default"].post("filament/select", data);

          case 3:
            changedFilament = _context3.sent;

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _selectFilament.apply(this, arguments);
}

},{"../octofarm.js":7}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ui = _interopRequireDefault(require("../functions/ui.js"));

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n                           <tr class=\"d-none\">\n\n                </td>\n                <td>  \n                </td>\n                <td>  \n\n                </td> \n                <td>    \n                    No Alerts Found\n                </td>\n                <td>    \n\n                </td>\n                <td>\n\n                </td>\n                </tr>"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _alertsDrop = "\n                                                         <option selected value=\"0\">Choose...</option>\n                                                            <option value=\"done\">Print Done</option>\n                                                            <option value=\"failed\">Print Failed</option>\n                                                            <option value=\"paused\">Print Paused</option>\n                                                            <option value=\"cooldown\">Print Cooled</option>\n                                                            <option value=\"error\">Print Error</option>\n";
var testScriptBtn = document.getElementById("testScript");

if (testScriptBtn) {
  testScriptBtn.addEventListener('click', function (event) {
    event.preventDefault();
    event.stopPropagation();
    var elements = Script.grabPage();
    var errors = Script.checkPage(elements);

    if (errors.length > 0) {
      _ui["default"].createAlert("warning", "There are issues with your input, please correct the highlighted fields", 3000, "Clicked");

      errors.forEach(function (error) {
        if (error === "script") {
          elements.script.style.borderColor = "red";
        }

        if (error === "message") {
          elements.message.style.borderColor = "red";
        }

        if (error === "trigger") {
          elements.trigger.style.borderColor = "red";
        }
      });
    } else {
      elements.script.style.borderColor = "green";
      elements.message.style.borderColor = "green";
      elements.trigger.style.borderColor = "green";
      Script.test(elements.script.value, elements.message.value);
    }
  });
}

var alertsTriggers = document.getElementById("alertsTrigger");

if (alertsTriggers) {
  alertsTriggers.insertAdjacentHTML('beforeend', _alertsDrop);
}

var saveScriptBtn = document.getElementById("saveScript");

if (saveScriptBtn) {
  saveScriptBtn.addEventListener('click', function (event) {
    event.preventDefault();
    event.stopPropagation();
    var elements = Script.grabPage();
    var errors = Script.checkPage(elements);

    if (errors.length > 0) {
      _ui["default"].createAlert("warning", "There are issues with your input, please correct the highlighted fields", 3000, "Clicked");

      errors.forEach(function (error) {
        if (error === "script") {
          elements.script.style.borderColor = "red";
        }

        if (error === "message") {
          elements.message.style.borderColor = "red";
        }

        if (error === "trigger") {
          elements.trigger.style.borderColor = "red";
        }
      });
    } else {
      elements.script.style.borderColor = "green";
      elements.message.style.borderColor = "green";
      elements.trigger.style.borderColor = "green";
      var newAlert = {
        active: true,
        trigger: elements.trigger.value,
        script: elements.script.value,
        message: elements.message.value
      };
      Script.save(newAlert);
    }
  });
}

var Script = /*#__PURE__*/function () {
  function Script() {
    _classCallCheck(this, Script);
  }

  _createClass(Script, null, [{
    key: "alertsDrop",
    value: function () {
      var _alertsDrop2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", _alertsDrop);

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function alertsDrop() {
        return _alertsDrop2.apply(this, arguments);
      }

      return alertsDrop;
    }()
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var post, alertsTable;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _octofarm["default"].get("scripts/get");

              case 2:
                post = _context2.sent;
                _context2.next = 5;
                return post.json();

              case 5:
                post = _context2.sent;
                alertsTable = document.getElementById("alertsTable");
                alertsTable.innerHTML = "";

                if (post.status === 200) {
                  post.alerts.forEach(function (alert) {
                    if (alert.printer.length === 0) {
                      alert.printer = "All Printers";
                    }

                    alertsTable.insertAdjacentHTML('beforeend', "\n                <tr id=\"alertList-".concat(alert._id, "\">\n                <td class=\"d-none\">\n                    ").concat(alert._id, "\n                </td>\n                <td> \n                 <form class=\"was-validated\">\n                      <div class=\"custom-control custom-checkbox mb-3\">\n                            <input type=\"checkbox\" class=\"custom-control-input\" id=\"active-").concat(alert._id, "\" required>\n                            <label class=\"custom-control-label\" for=\"active-").concat(alert._id, "\"></label>\n\n                        </div>\n                    </form>\n                </td>\n                <td>  \n                      <select class=\"custom-select\" id=\"trigger-").concat(alert._id, "\" disabled>\n\n                       </select>\n                </td> \n                <td >    \n                        <div id=\"scriptLocation-").concat(alert._id, "\" contenteditable=\"false\"> ").concat(alert.scriptLocation, "  </div>\n                </td>\n                <td>    \n                        <div  id=\"message-").concat(alert._id, "\" contenteditable=\"false\"> ").concat(alert.message, "</div>\n                </td>\n                <td id=\"printers-").concat(alert._id, "\">\n                        ").concat(alert.printer, "\n                </td>\n                 <td>\n                    <button id=\"edit-").concat(alert._id, "\" type=\"button\" class=\"btn btn-sm btn-info edit\">\n                    <i class=\"fas fa-edit editIcon\"></i>\n                  </button>\n                  <button id=\"save-").concat(alert._id, "\" type=\"button\" class=\"btn btn-sm d-none btn-success save\">\n                    <i class=\"fas fa-save saveIcon\"></i>\n                  </button>\n                  <button id=\"delete-").concat(alert._id, "\" type=\"button\" class=\"btn btn-sm btn-danger delete\">\n                    <i class=\"fas fa-trash deleteIcon\"></i>\n                  </button>\n                </td>\n                </tr>\n           "));
                    var alertsTrigger = document.getElementById('trigger-' + alert._id);
                    alertsTrigger.innerHTML = _alertsDrop;
                    alertsTrigger.value = alert.trigger;
                    document.getElementById('active-' + alert._id).checked = alert.active;
                    document.getElementById('edit-' + alert._id).addEventListener('click', function (event) {
                      Script.edit(alert._id);
                    });
                    document.getElementById('save-' + alert._id).addEventListener('click', function (event) {
                      var newAlert = {
                        active: document.getElementById("active-" + alert._id).checked,
                        trigger: document.getElementById("trigger-" + alert._id).value,
                        script: document.getElementById("scriptLocation-" + alert._id).innerHTML.trim(),
                        message: document.getElementById("message-" + alert._id).innerHTML.trim()
                      };
                      Script.saveEdit(alert._id, newAlert);
                    });
                    document.getElementById('delete-' + alert._id).addEventListener('click', function (event) {
                      Script["delete"](alert._id);
                    });
                  });
                } else {
                  alertsTable.insertAdjacentHTML('beforeend'(_templateObject()));
                }

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function get() {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: "edit",
    value: function () {
      var _edit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(id) {
        var row, editable;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                row = document.getElementById("alertList-" + id);
                editable = row.querySelectorAll("[contenteditable]");
                editable.forEach(function (edit) {
                  edit.contentEditable = true;
                  edit.classList.add("contentEditable");
                });
                document.getElementById("save-" + id).classList.remove("d-none");
                document.getElementById("edit-" + id).classList.add("d-none");
                document.getElementById("trigger-" + id).disabled = false;

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function edit(_x) {
        return _edit.apply(this, arguments);
      }

      return edit;
    }()
  }, {
    key: "saveEdit",
    value: function () {
      var _saveEdit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(id, newAlert) {
        var opts, post, row, editable;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                opts = {
                  id: id,
                  active: newAlert.active,
                  trigger: newAlert.trigger,
                  scriptLocation: newAlert.script,
                  message: newAlert.message
                };
                _context4.next = 3;
                return _octofarm["default"].post("scripts/edit", opts);

              case 3:
                post = _context4.sent;
                _context4.next = 6;
                return post.json();

              case 6:
                post = _context4.sent;

                if (post.status !== 200) {
                  _ui["default"].createAlert("error", "Failed to save your alert!", 3000, "Clicked");
                } else {
                  _ui["default"].createAlert("success", "Successfully saved your alert!", 3000, "Clicked");

                  Script.get();
                }

                row = document.getElementById("alertList-" + id);
                editable = row.querySelectorAll("[contenteditable]");
                editable.forEach(function (edit) {
                  edit.contentEditable = false;
                  edit.classList.remove("contentEditable");
                });
                document.getElementById("save-" + id).classList.add("d-none");
                document.getElementById("edit-" + id).classList.remove("d-none");
                document.getElementById("trigger-" + id).disabled = true;

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function saveEdit(_x2, _x3) {
        return _saveEdit.apply(this, arguments);
      }

      return saveEdit;
    }()
  }, {
    key: "save",
    value: function () {
      var _save = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(newAlert) {
        var opts, post;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                opts = {
                  active: newAlert.active,
                  trigger: newAlert.trigger,
                  scriptLocation: newAlert.script,
                  message: newAlert.message,
                  printer: []
                };
                _context5.next = 3;
                return _octofarm["default"].post("scripts/save", opts);

              case 3:
                post = _context5.sent;
                _context5.next = 6;
                return post.json();

              case 6:
                post = _context5.sent;

                if (post.status !== 200) {
                  _ui["default"].createAlert("error", "Failed to save your alert!", 3000, "Clicked");
                } else {
                  _ui["default"].createAlert("success", "Successfully saved your alert!", 3000, "Clicked");

                  Script.get();
                }

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function save(_x4) {
        return _save.apply(this, arguments);
      }

      return save;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(id) {
        var post;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return _octofarm["default"]["delete"]("scripts/delete/" + id);

              case 2:
                post = _context6.sent;
                _context6.next = 5;
                return post.json();

              case 5:
                post = _context6.sent;

                if (post.status === 200) {
                  _ui["default"].createAlert("error", "Failed to delete your alert.", 3000, "Clicked");

                  document.getElementById("alertList-" + id).remove();
                } else {
                  _ui["default"].createAlert("success", "Successfully deleted your alert.", 3000, "Clicked");
                }

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function _delete(_x5) {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "test",
    value: function () {
      var _test = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(scriptLocation, message) {
        var opts, post;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                opts = {
                  scriptLocation: scriptLocation,
                  message: message
                };
                _context7.next = 3;
                return _octofarm["default"].post("scripts/test", opts);

              case 3:
                post = _context7.sent;
                _context7.next = 6;
                return post.json();

              case 6:
                post = _context7.sent;

                if (_typeof(post.testFire) === "object") {
                  _ui["default"].createAlert("error", post.testFire.stderr, 3000, "Clicked");
                } else {
                  _ui["default"].createAlert("success", post.testFire, 3000, "Clicked");
                }

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function test(_x6, _x7) {
        return _test.apply(this, arguments);
      }

      return test;
    }()
  }, {
    key: "checkPage",
    value: function checkPage(elements) {
      var errors = [];

      if (elements.script.value === "") {
        errors.push("script");
      }

      if (elements.trigger.value === "0") {
        errors.push("trigger");
      }

      if (elements.message.value === "") {
        errors.push("message");
      }

      return errors;
    }
  }, {
    key: "grabPage",
    value: function grabPage() {
      return {
        trigger: document.getElementById("alertsTrigger"),
        script: document.getElementById("scriptLocation"),
        message: document.getElementById("scriptMessage")
      };
    }
  }]);

  return Script;
}();

exports["default"] = Script;

},{"../functions/ui.js":3,"../octofarm.js":7}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var OctoFarmclient = /*#__PURE__*/function () {
  function OctoFarmclient() {
    _classCallCheck(this, OctoFarmclient);
  }

  _createClass(OctoFarmclient, null, [{
    key: "get",
    value: function get(item) {
      var url = "/".concat(item);
      return fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        }
      });
    }
  }, {
    key: "delete",
    value: function _delete(item) {
      var url = "/".concat(item);
      return fetch(url, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json"
        }
      });
    }
  }, {
    key: "post",
    value: function post(item, data) {
      var url = "/".concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      });
    }
  }]);

  return OctoFarmclient;
}();

exports["default"] = OctoFarmclient;

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ui = _interopRequireDefault(require("./functions/ui.js"));

var _octofarm = _interopRequireDefault(require("./octofarm.js"));

var _validate = _interopRequireDefault(require("./functions/validate.js"));

var _filamentGrab = require("./modules/filamentGrab.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var OctoPrintClient = /*#__PURE__*/function () {
  function OctoPrintClient() {
    _classCallCheck(this, OctoPrintClient);
  }

  _createClass(OctoPrintClient, null, [{
    key: "get",
    value: function get(printer, item) {
      var url = "".concat(printer.printerURL, "/").concat(item);
      return fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        }
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "postNOAPI",
    value: function postNOAPI(printer, item, data) {
      var url = "".concat(printer.printerURL, "/").concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        },
        body: JSON.stringify(data)
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "post",
    value: function post(printer, item, data) {
      var url = "".concat(printer.printerURL, "/api/").concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        },
        body: JSON.stringify(data)
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "folder",
    value: function folder(printer, item, data) {
      var url = "".concat(printer.printerURL, "/api/files/").concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "X-Api-Key": printer.apikey
        },
        body: data
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "move",
    value: function move(printer, item, data) {
      var url = "".concat(printer.printerURL, "/api/").concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        },
        body: JSON.stringify(data)
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "delete",
    value: function _delete(printer, item) {
      var url = "".concat(printer.printerURL, "/api/").concat(item);
      return fetch(url, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        }
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "selectTool",
    value: function () {
      var _selectTool = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(printer, tool) {
        var opt, post;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                opt = {
                  command: "select",
                  tool: tool
                };
                _context.next = 3;
                return OctoPrintClient.post(printer, "printer/tool", opt);

              case 3:
                post = _context.sent;

                if (!(post.status === 204)) {
                  _context.next = 8;
                  break;
                }

                return _context.abrupt("return", true);

              case 8:
                return _context.abrupt("return", false);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function selectTool(_x, _x2) {
        return _selectTool.apply(this, arguments);
      }

      return selectTool;
    }()
  }, {
    key: "system",
    value: function () {
      var _system = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(printer, action) {
        var url;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                url = "system/commands/core/" + action;
                bootbox.confirm({
                  message: "Are your sure you want to ".concat(action, " ").concat(printer.printerName, "?"),
                  buttons: {
                    cancel: {
                      label: "<i class=\"fa fa-times\"></i> No"
                    },
                    confirm: {
                      label: "<i class=\"fa fa-check\"></i> Yes"
                    }
                  },
                  callback: function callback(result) {
                    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                      var post;
                      return regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              if (!result) {
                                _context2.next = 5;
                                break;
                              }

                              _context2.next = 3;
                              return OctoPrintClient.post(printer, url)["catch"](function (e) {
                                _ui["default"].createAlert("danger", e, 4000, "Clicked");
                              });

                            case 3:
                              post = _context2.sent;

                              if (post.status === 204) {
                                _ui["default"].createAlert("success", "".concat(printer.printerName, ": ").concat(action, " was successful"), 3000, "clicked");
                              } else {
                                _ui["default"].createAlert("error", "".concat(printer.printerName, ": ").concat(action, " was unsuccessful. Please make sure printer is connected and commands are setup in Settings -> Server."), 3000, "clicked");
                              }

                            case 5:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    }))();
                  }
                });

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function system(_x3, _x4) {
        return _system.apply(this, arguments);
      }

      return system;
    }()
  }, {
    key: "systemNoConfirm",
    value: function () {
      var _systemNoConfirm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(printer, action) {
        var url;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                url = "system/commands/core/" + action;
                _context4.next = 3;
                return OctoPrintClient.post(printer, url);

              case 3:
                return _context4.abrupt("return", _context4.sent);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function systemNoConfirm(_x5, _x6) {
        return _systemNoConfirm.apply(this, arguments);
      }

      return systemNoConfirm;
    }()
  }, {
    key: "move",
    value: function () {
      var _move = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(element, printer, action, axis, dir) {
        var flashReturn, url, post, amount, opt;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                flashReturn = function flashReturn() {
                  element.target.classList = "btn btn-light";
                };

                url = "printer/printhead";
                post = null;
                _context5.next = 5;
                return document.querySelectorAll("#pcAxisSteps > .btn.active");

              case 5:
                amount = _context5.sent;
                amount = amount[0].innerHTML;
                opt = null;

                if (action === "home") {
                  opt = {
                    command: action,
                    axes: axis
                  };
                } else if (action === "jog") {
                  if (dir != undefined) {
                    amount = Number(dir + amount);
                  } else {
                    amount = Number(amount);
                  }

                  opt = _defineProperty({
                    command: action
                  }, axis, amount);
                } else if (action === "feedrate") {
                  opt = {
                    command: action,
                    factor: amount
                  };
                }

                _context5.next = 11;
                return OctoPrintClient.post(printer, url, opt);

              case 11:
                post = _context5.sent;

                if (post.status === 204) {
                  element.target.classList = "btn btn-success";
                  setTimeout(flashReturn, 500);
                } else {
                  element.target.classList = "btn btn-danger";
                  setTimeout(flashReturn, 500);
                }

              case 13:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function move(_x7, _x8, _x9, _x10, _x11) {
        return _move.apply(this, arguments);
      }

      return move;
    }()
  }, {
    key: "file",
    value: function () {
      var _file2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(printer, fullPath, action, _file) {
        var url, post, opt, _opt2, flow, feed, _opt3, fileDel;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                url = "files/local/" + fullPath;
                post = null;

                if (!(action === "load")) {
                  _context6.next = 9;
                  break;
                }

                opt = {
                  command: "select",
                  print: false
                };
                _context6.next = 6;
                return OctoPrintClient.post(printer, url, opt);

              case 6:
                post = _context6.sent;
                _context6.next = 26;
                break;

              case 9:
                if (!(action === "print")) {
                  _context6.next = 22;
                  break;
                }

                _opt2 = {
                  command: "select",
                  print: true
                }; // Make sure feed/flow are set before starting print...

                flow = {
                  command: "flowrate",
                  factor: parseInt(printer.flowRate)
                };
                _context6.next = 14;
                return OctoPrintClient.post(printer, "printer/tool", flow);

              case 14:
                feed = {
                  command: "feedrate",
                  factor: parseInt(printer.feedRate)
                };
                _context6.next = 17;
                return OctoPrintClient.post(printer, "printer/printhead", feed);

              case 17:
                _context6.next = 19;
                return OctoPrintClient.post(printer, url, _opt2);

              case 19:
                post = _context6.sent;
                _context6.next = 26;
                break;

              case 22:
                if (!(action === "delete")) {
                  _context6.next = 26;
                  break;
                }

                _context6.next = 25;
                return OctoPrintClient["delete"](printer, url);

              case 25:
                post = _context6.sent;

              case 26:
                if (!(post.status === 204)) {
                  _context6.next = 38;
                  break;
                }

                if (!(action === "delete")) {
                  _context6.next = 35;
                  break;
                }

                _opt3 = {
                  i: printer,
                  fullPath: fullPath
                };
                _context6.next = 31;
                return _octofarm["default"].post("printers/removefile", _opt3);

              case 31:
                fileDel = _context6.sent;

                _ui["default"].createAlert("success", "".concat(printer.printerName, ": ").concat(action, " completed"), 3000, "clicked");

                _context6.next = 36;
                break;

              case 35:
                _ui["default"].createAlert("success", "".concat(printer.printerName, ": ").concat(action, " actioned"), 3000, "clicked");

              case 36:
                _context6.next = 39;
                break;

              case 38:
                _ui["default"].createAlert("error", "".concat(printer.printerName, ": ").concat(action, " failed"), 3000, "clicked");

              case 39:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function file(_x12, _x13, _x14, _x15) {
        return _file2.apply(this, arguments);
      }

      return file;
    }()
  }, {
    key: "jobAction",
    value: function () {
      var _jobAction = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(printer, opts, element) {
        var checkSettings, flow, feed, body, filamentCheck, printerCheck, post;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return _octofarm["default"].get("settings/server/get");

              case 2:
                checkSettings = _context8.sent;
                _context8.next = 5;
                return checkSettings.json();

              case 5:
                checkSettings = _context8.sent;
                // Make sure feed/flow are set before starting print...
                flow = {
                  command: "flowrate",
                  factor: parseInt(printer.flowRate)
                };
                _context8.next = 9;
                return OctoPrintClient.post(printer, "printer/tool", flow);

              case 9:
                feed = {
                  command: "feedrate",
                  factor: parseInt(printer.feedRate)
                };
                _context8.next = 12;
                return OctoPrintClient.post(printer, "printer/printhead", feed);

              case 12:
                body = {
                  i: printer._id
                };
                filamentCheck = false;

                if (typeof checkSettings.filament !== "undefined") {
                  filamentCheck = checkSettings.filament.filamentCheck;
                }

                printerCheck = false;

                if (printer.selectedFilament != null && Array.isArray(printer.selectedFilament)) {
                  printerCheck = printer.selectedFilament.every(function (e) {
                    return e !== null;
                  });
                }

                if (!(filamentCheck && !printerCheck && opts.command === "start")) {
                  _context8.next = 21;
                  break;
                }

                bootbox.confirm({
                  message: "You have spools in the inventory, but none selected. Would you like to select a spool?",
                  buttons: {
                    confirm: {
                      label: "Yes",
                      className: "btn-success"
                    },
                    cancel: {
                      label: "No",
                      className: "btn-danger"
                    }
                  },
                  callback: function callback(result) {
                    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                      var offset, _post, post;

                      return regeneratorRuntime.wrap(function _callee7$(_context7) {
                        while (1) {
                          switch (_context7.prev = _context7.next) {
                            case 0:
                              if (!result) {
                                _context7.next = 3;
                                break;
                              }

                              _context7.next = 15;
                              break;

                            case 3:
                              if (!(printer.selectedFilament != null && Array.isArray(printer.selectedFilament))) {
                                _context7.next = 9;
                                break;
                              }

                              offset = {
                                command: "offset",
                                offsets: {}
                              };
                              printer.selectedFilament.forEach(function (spool, index) {
                                if (spool != null) {
                                  offset.offsets["tool" + index] = spool.spools.tempOffset;
                                }
                              });
                              _context7.next = 8;
                              return OctoPrintClient.post(printer, "printer/tool", offset);

                            case 8:
                              _post = _context7.sent;

                            case 9:
                              _context7.next = 11;
                              return OctoPrintClient.post(printer, "printer/printhead", feed);

                            case 11:
                              _context7.next = 13;
                              return OctoPrintClient.post(printer, "job", opts);

                            case 13:
                              post = _context7.sent;
                              element.target.disabled = false;

                            case 15:
                            case "end":
                              return _context7.stop();
                          }
                        }
                      }, _callee7);
                    }))();
                  }
                });
                _context8.next = 27;
                break;

              case 21:
                _context8.next = 23;
                return OctoPrintClient.post(printer, "printer/printhead", feed);

              case 23:
                _context8.next = 25;
                return OctoPrintClient.post(printer, "job", opts);

              case 25:
                post = _context8.sent;
                element.target.disabled = false;

              case 27:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function jobAction(_x16, _x17, _x18) {
        return _jobAction.apply(this, arguments);
      }

      return jobAction;
    }()
  }, {
    key: "connect",
    value: function () {
      var _connect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(command, printer) {
        var opts, post;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                opts = null;

                if (command === "connect") {
                  opts = {
                    command: "connect",
                    port: document.getElementById("pmSerialPort").value,
                    baudrate: parseInt(document.getElementById("pmBaudrate").value),
                    printerProfile: document.getElementById("pmProfile").value,
                    save: true
                  };
                } else {
                  opts = {
                    command: "disconnect"
                  };
                }

                _context9.next = 4;
                return OctoPrintClient.post(printer, "connection", opts);

              case 4:
                post = _context9.sent;

                if (typeof post !== "undefined" && post.status === 204) {
                  _ui["default"].createAlert("success", "".concat(printer.printerName, ": ").concat(opts.command, "ion attempt was successful"), 3000, "click");

                  if (command === "connect") {
                    document.getElementById("pmSerialPort").disabled = true;
                    document.getElementById("pmBaudrate").disabled = true;
                    document.getElementById("pmProfile").disabled = true;
                  } else {
                    document.getElementById("pmSerialPort").disabled = false;
                    document.getElementById("pmBaudrate").disabled = false;
                    document.getElementById("pmProfile").disabled = false;
                  }
                } else {
                  document.getElementById("pmSerialPort").disabled = false;
                  document.getElementById("pmBaudrate").disabled = false;
                  document.getElementById("pmProfile").disabled = false;

                  _ui["default"].createAlert("error", "".concat(printer.printerName, ": could not ").concat(opts.command, "."), 3000, "click");
                }

              case 6:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function connect(_x19, _x20) {
        return _connect.apply(this, arguments);
      }

      return connect;
    }()
  }, {
    key: "power",
    value: function () {
      var _power = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(printer, url, action, command) {
        var post, _post2;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                if (url.includes("[PrinterURL]")) {
                  url = url.replace("[PrinterURL]", printer.printerURL);
                }

                if (url.includes("[PrinterAPI]")) {
                  url = url.replace("[PrinterAPI]", printer.apikey);
                }

                if (!(typeof command === "undefined" || command.length === 0)) {
                  _context10.next = 15;
                  break;
                }

                _context10.prev = 3;
                _context10.next = 6;
                return fetch(url, {
                  method: "GET",
                  headers: {
                    "Content-Type": "application/json",
                    "X-Api-Key": printer.apikey
                  }
                });

              case 6:
                post = _context10.sent;

                if (post.status !== 200 || post.status !== 204) {
                  _ui["default"].createAlert("error", "".concat(printer.printerName, ": Could not complete ").concat(action), 3000);
                } else {
                  _ui["default"].createAlert("success", "".concat(printer.printerName, ": Successfully completed ").concat(action), 3000);
                }

                _context10.next = 13;
                break;

              case 10:
                _context10.prev = 10;
                _context10.t0 = _context10["catch"](3);

                _ui["default"].createAlert("error", "".concat(printer.printerName, ": Could not complete ").concat(action, " - Error: ").concat(_context10.t0), 3000);

              case 13:
                _context10.next = 25;
                break;

              case 15:
                _context10.prev = 15;
                _context10.next = 18;
                return fetch(url, {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "X-Api-Key": printer.apikey
                  },
                  body: command
                });

              case 18:
                _post2 = _context10.sent;

                if (_post2.status !== 200 || _post2.status !== 204) {
                  _ui["default"].createAlert("error", "".concat(printer.printerName, ": Could not complete ").concat(action), 3000);
                } else {
                  _ui["default"].createAlert("success", "".concat(printer.printerName, ": Successfully completed ").concat(action), 3000);
                }

                _context10.next = 25;
                break;

              case 22:
                _context10.prev = 22;
                _context10.t1 = _context10["catch"](15);

                _ui["default"].createAlert("error", "".concat(printer.printerName, ": Could not complete ").concat(action, " - Error: ").concat(_context10.t1), 3000);

              case 25:
                return _context10.abrupt("return", "done");

              case 26:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, null, [[3, 10], [15, 22]]);
      }));

      function power(_x21, _x22, _x23, _x24) {
        return _power.apply(this, arguments);
      }

      return power;
    }()
  }, {
    key: "getPowerStatus",
    value: function () {
      var _getPowerStatus = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(printer, url, command) {
        var post, _post3, status, powerStatusPrinter;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                if (url.includes("[PrinterURL]")) {
                  url = url.replace("[PrinterURL]", printer.printerURL);
                }

                if (url.includes("[PrinterAPI]")) {
                  url = url.replace("[PrinterAPI]", printer.apikey);
                }

                if (!(typeof command === "undefined" || command === "" || command === null)) {
                  _context11.next = 16;
                  break;
                }

                _context11.next = 5;
                return fetch(url, {
                  method: "GET",
                  headers: {
                    "Content-Type": "application/json",
                    "X-Api-Key": printer.apikey
                  }
                });

              case 5:
                post = _context11.sent;

                if (!(post.status !== 200 || post.status !== 204)) {
                  _context11.next = 10;
                  break;
                }

                return _context11.abrupt("return", "No Status");

              case 10:
                _context11.next = 12;
                return post.json();

              case 12:
                post = _context11.sent;
                return _context11.abrupt("return", post);

              case 14:
                _context11.next = 32;
                break;

              case 16:
                _context11.prev = 16;
                _context11.next = 19;
                return fetch(url, {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "X-Api-Key": printer.apikey
                  },
                  body: command
                });

              case 19:
                _post3 = _context11.sent;
                status = "No Status";

                if (!(_post3.status === 200 || _post3.status === 204)) {
                  _context11.next = 25;
                  break;
                }

                _context11.next = 24;
                return _post3.json();

              case 24:
                status = _context11.sent;

              case 25:
                powerStatusPrinter = document.getElementById("printerStatus-" + printer._id);

                if (powerStatusPrinter) {
                  if (status === "No Status") {
                    powerStatusPrinter.style.color = "black";
                  } else if (status[Object.keys(status)[0]]) {
                    powerStatusPrinter.style.color = "green";
                  } else {
                    powerStatusPrinter.style.color = "red";
                  }
                }

                _context11.next = 32;
                break;

              case 29:
                _context11.prev = 29;
                _context11.t0 = _context11["catch"](16);
                console.log("Printer Power Check failed... classing offline:", _context11.t0);

              case 32:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, null, [[16, 29]]);
      }));

      function getPowerStatus(_x25, _x26, _x27) {
        return _getPowerStatus.apply(this, arguments);
      }

      return getPowerStatus;
    }()
  }]);

  return OctoPrintClient;
}();

exports["default"] = OctoPrintClient;

},{"./functions/ui.js":3,"./functions/validate.js":4,"./modules/filamentGrab.js":5,"./octofarm.js":7}],9:[function(require,module,exports){
"use strict";

var _octofarm = _interopRequireDefault(require("./lib/octofarm.js"));

var _ui = _interopRequireDefault(require("./lib/functions/ui.js"));

var _calc = _interopRequireDefault(require("./lib/functions/calc.js"));

var _scriptCheck = _interopRequireDefault(require("./lib/modules/scriptCheck.js"));

var _octoprint = _interopRequireDefault(require("./lib/octoprint"));

var _file = _interopRequireDefault(require("./lib/functions/file.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// Add listeners to settings
document.getElementById("saveServerSettings").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.update();
});
document.getElementById("saveSettings").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ClientSettings.update();
});
document.getElementById("nukeEverything").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.nukeDatabases("nukeEverything");
});
document.getElementById("nukeAlerts").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.nukeDatabases("AlertsDB");
});
document.getElementById("nukeClientSettings").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.nukeDatabases("ClientSettingsDB");
});
document.getElementById("nukeFilament").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.nukeDatabases("FilamentDB");
});
document.getElementById("nukeHistory").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.nukeDatabases("HistoryDB");
});
document.getElementById("nukePrinters").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.nukeDatabases("PrinterDB");
});
document.getElementById("nukeRoomData").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.nukeDatabases("roomDataDB");
});
document.getElementById("nukeServerSettings").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.nukeDatabases("ServerSettingsDB");
});
document.getElementById("nukeUsers").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.nukeDatabases("UserDB");
});
document.getElementById("exportAlerts").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.exportDatabases("AlertsDB");
});
document.getElementById("exportClientSettings").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.exportDatabases("ClientSettingsDB");
});
document.getElementById("exportFilament").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.exportDatabases("FilamentDB");
});
document.getElementById("exportHistory").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.exportDatabases("HistoryDB");
});
document.getElementById("exportPrinters").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.exportDatabases("PrinterDB");
});
document.getElementById("exportRoomData").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.exportDatabases("roomDataDB");
});
document.getElementById("exportServerSettings").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.exportDatabases("ServerSettingsDB");
});
document.getElementById("exportUsers").addEventListener("click", function (e) {
  // Validate Printer Form, then Add
  ServerSettings.exportDatabases("UserDB");
});
document.getElementById("setupTimelapseOctoPrint").addEventListener("click", function (e) {
  setupOctoPrintClientsforTimelapse();
});

function setupOctoPrintClientsforTimelapse() {
  return _setupOctoPrintClientsforTimelapse.apply(this, arguments);
}

function _setupOctoPrintClientsforTimelapse() {
  _setupOctoPrintClientsforTimelapse = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
    var printers;
    return regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _octofarm["default"].post("printers/printerInfo");

          case 2:
            printers = _context9.sent;

            if (!(printers.status === 200)) {
              _context9.next = 10;
              break;
            }

            _context9.next = 6;
            return printers.json();

          case 6:
            printers = _context9.sent;
            bootbox.confirm({
              title: "Are you sure?",
              message: "If you press yes below your timelapse settings will automatically be updated to work with OctoFarms setup. The script will update any online instances and there shouldn't be a restart necassary. It does however presume you have your ffmpeg path setup with your snapshot URL inputted into OctoPrint.",
              buttons: {
                confirm: {
                  label: "Yes",
                  className: "btn-success"
                },
                cancel: {
                  label: "No",
                  className: "btn-danger"
                }
              },
              callback: function () {
                var _callback = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(result) {
                  var settings, timelapse, i, sett, time;
                  return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          if (!result) {
                            _context8.next = 19;
                            break;
                          }

                          settings = {
                            webcam: {
                              ffmpegVideoCodec: "libx264",
                              webcamEnabled: true
                            }
                          };
                          timelapse = {
                            type: "zchange"
                          };
                          i = 0;

                        case 4:
                          if (!(i < printers.length)) {
                            _context8.next = 19;
                            break;
                          }

                          if (!(printers[i].printerState.colour.category !== "Offline")) {
                            _context8.next = 16;
                            break;
                          }

                          _context8.next = 8;
                          return _octoprint["default"].post(printers[i], "settings", settings);

                        case 8:
                          sett = _context8.sent;

                          if (sett.status === 200) {
                            _ui["default"].createAlert("success", printers[i].printerName + ": Updated your web camera settings!", 1000, "Clicked");
                          } else {
                            _ui["default"].createAlert("danger", printers[i].printerName + ": Failed to update the settings!", 1000, "Clicked");
                          }

                          _context8.next = 12;
                          return _octoprint["default"].post(printers[i], "timelapse", timelapse);

                        case 12:
                          time = _context8.sent;

                          if (time.status === 200) {
                            _ui["default"].createAlert("success", printers[i].printerName + ": Updated your timelapse settings!", 1000, "Clicked");
                          } else {
                            _ui["default"].createAlert("danger", printers[i].printerName + ": Failed to timelapse settings!", 1000, "Clicked");
                          }

                          _context8.next = 16;
                          break;

                        case 16:
                          i++;
                          _context8.next = 4;
                          break;

                        case 19:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8);
                }));

                function callback(_x5) {
                  return _callback.apply(this, arguments);
                }

                return callback;
              }()
            });
            _context9.next = 11;
            break;

          case 10:
            _ui["default"].createAlert("error", "Sorry OctoFarm is not responding...", 3000, "Clicked");

          case 11:
            _octoprint["default"].post;

          case 12:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _setupOctoPrintClientsforTimelapse.apply(this, arguments);
}

document.getElementById("resetDashboardBtn").addEventListener("click", function (e) {
  var dashData = localStorage.getItem("dashboardConfiguration");
  var serializedData = JSON.parse(dashData);

  if (serializedData !== null && serializedData.length !== 0) {
    localStorage.removeItem("dashboardConfiguration");
  }

  _ui["default"].createAlert("success", "Dashboard data cleared from browser", 3000, "clicked");
});
var oldServerSettings = {};
var optionsMemory = {
  title: {
    text: "Memory",
    align: "center",
    margin: 1,
    offsetX: 0,
    offsetY: 0,
    floating: false,
    style: {
      fontSize: "14px",
      fontWeight: "bold",
      fontFamily: undefined,
      color: "#fff"
    }
  },
  chart: {
    type: "donut",
    height: "100%",
    width: "100%",
    animations: {
      enabled: false
    },
    background: "#303030"
  },
  theme: {
    mode: "dark"
  },
  plotOptions: {
    pie: {
      expandOnClick: true,
      dataLabels: {
        offset: 10,
        minAngleToShowLabel: 15
      }
    }
  },
  stroke: {
    show: false
  },
  tooltip: {
    y: {
      formatter: function formatter(val) {
        return _calc["default"].bytes(val);
      }
    }
  },
  noData: {
    text: "Loading..."
  },
  dataLabels: {
    enabled: false
  },
  series: [],
  labels: ["Other", "OctoFarm", "Free"],
  colors: ["#f39c12", "#3498db", "#00bc8c"],
  legend: {
    show: true,
    showForSingleSeries: false,
    showForNullSeries: true,
    showForZeroSeries: true,
    position: "bottom",
    horizontalAlign: "center",
    floating: false,
    fontSize: "11px",
    fontFamily: "Helvetica, Arial",
    fontWeight: 400,
    formatter: undefined,
    inverseOrder: false,
    width: undefined,
    height: undefined,
    tooltipHoverFormatter: undefined,
    offsetX: -25,
    offsetY: 0,
    labels: {
      colors: undefined,
      useSeriesColors: false
    },
    markers: {
      width: 9,
      height: 9,
      strokeWidth: 0,
      strokeColor: "#fff",
      fillColors: undefined,
      radius: 1,
      customHTML: undefined,
      onClick: undefined,
      offsetX: 0,
      offsetY: 0
    },
    itemMargin: {
      horizontal: 1,
      vertical: 0
    },
    onItemClick: {
      toggleDataSeries: false
    },
    onItemHover: {
      highlightDataSeries: false
    }
  }
};
var optionsCPU = {
  title: {
    text: "CPU",
    align: "center",
    margin: 1,
    offsetX: 0,
    offsetY: 0,
    floating: false,
    style: {
      fontSize: "14px",
      fontWeight: "bold",
      fontFamily: undefined,
      color: "#fff"
    }
  },
  chart: {
    type: "donut",
    height: "100%",
    width: "100%",
    animations: {
      enabled: true
    },
    background: "#303030"
  },
  theme: {
    mode: "dark"
  },
  plotOptions: {
    pie: {
      expandOnClick: false,
      dataLabels: {
        offset: 10,
        minAngleToShowLabel: 15
      }
    }
  },
  stroke: {
    show: false
  },
  tooltip: {
    y: {
      formatter: function formatter(val) {
        return "".concat(Math.round(val * 10) / 10, "%");
      }
    }
  },
  noData: {
    text: "Loading..."
  },
  dataLabels: {
    enabled: false
  },
  series: [],
  labels: ["System", "OctoFarm", "User", "Free"],
  colors: ["#f39c12", "#3498db", "#375a7f", "#00bc8c"],
  legend: {
    show: true,
    showForSingleSeries: false,
    showForNullSeries: true,
    showForZeroSeries: true,
    position: "bottom",
    horizontalAlign: "center",
    floating: false,
    fontSize: "11px",
    fontFamily: "Helvetica, Arial",
    fontWeight: 400,
    formatter: undefined,
    inverseOrder: false,
    width: undefined,
    height: undefined,
    tooltipHoverFormatter: undefined,
    offsetX: -25,
    offsetY: 0,
    labels: {
      colors: undefined,
      useSeriesColors: false
    },
    markers: {
      width: 9,
      height: 9,
      strokeWidth: 0,
      strokeColor: "#fff",
      fillColors: undefined,
      radius: 1,
      customHTML: undefined,
      onClick: undefined,
      offsetX: 0,
      offsetY: 0
    },
    itemMargin: {
      horizontal: 1,
      vertical: 0
    },
    onItemClick: {
      toggleDataSeries: false
    },
    onItemHover: {
      highlightDataSeries: false
    }
  }
};
var systemChartCPU = new ApexCharts(document.querySelector("#systemChartCPU"), optionsCPU);
systemChartCPU.render();
var systemChartMemory = new ApexCharts(document.querySelector("#systemChartMemory"), optionsMemory);
systemChartMemory.render();
setInterval( /*#__PURE__*/function () {
  var _updateStatus = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var systemInfo, cpuLoad, octoLoad, userLoad, remain, otherRAM, octoRAM, freeRAM;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _octofarm["default"].get("settings/sysInfo");

          case 2:
            systemInfo = _context.sent;
            _context.next = 5;
            return systemInfo.json();

          case 5:
            systemInfo = _context.sent;

            if (Object.keys(systemInfo).length === 0 && systemInfo.constructor === Object) {} else {
              document.getElementById("systemUptime").innerHTML = _calc["default"].generateTime(systemInfo.sysUptime.uptime);
              document.getElementById("processUpdate").innerHTML = _calc["default"].generateTime(systemInfo.processUptime); // labels: ['System', 'OctoFarm', 'User', 'Free'],

              cpuLoad = systemInfo.cpuLoad.currentload_system;
              octoLoad = systemInfo.sysProcess.pcpu;
              userLoad = systemInfo.cpuLoad.currentload_user;
              remain = cpuLoad + octoLoad + userLoad;
              systemChartCPU.updateSeries([cpuLoad, octoLoad, userLoad, 100 - remain]);
              otherRAM = systemInfo.memoryInfo.total - systemInfo.memoryInfo.free;
              octoRAM = systemInfo.memoryInfo.total / 100 * systemInfo.sysProcess.pmem;
              freeRAM = systemInfo.memoryInfo.free;
              systemChartMemory.updateSeries([otherRAM, octoRAM, freeRAM]);
            }

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  function updateStatus() {
    return _updateStatus.apply(this, arguments);
  }

  return updateStatus;
}(), 5000);

var ClientSettings = /*#__PURE__*/function () {
  function ClientSettings() {
    _classCallCheck(this, ClientSettings);
  }

  _createClass(ClientSettings, null, [{
    key: "init",
    value: function init() {
      _octofarm["default"].get("settings/client/get").then(function (res) {
        return res.json();
      }).then(function (res) {
        // localStorage.setItem("clientSettings", JSON.stringify(res));
        document.getElementById("panelCurrentOpOn").checked = res.panelView.currentOp;
        document.getElementById("panelHideOffline").checked = res.panelView.hideOff;
        document.getElementById("panelHideClosed").checked = res.panelView.hideClosed; // document.getElementById("panelHideIdle").checked =
        //   res.panelView.hideIdle;

        if (res.panelView.printerRows) {
          document.getElementById("selectCameraGrid").value = res.panelView.printerRows;
        } else {
          document.getElementById("selectCameraGrid").value = 2;
        }

        if (typeof res.dashboard !== "undefined") {
          document.getElementById("currentOperations").checked = res.dashboard.farmActivity.currentOperations;
          document.getElementById("cumulativeTimes").checked = res.dashboard.farmActivity.cumulativeTimes;
          document.getElementById("averageTimes").checked = res.dashboard.farmActivity.averageTimes;
          document.getElementById("printerState").checked = res.dashboard.printerStates.printerState;
          document.getElementById("printerTemps").checked = res.dashboard.printerStates.printerProgress;
          document.getElementById("printerUtilisation").checked = res.dashboard.printerStates.printerUtilisation;
          document.getElementById("printerProgress").checked = res.dashboard.printerStates.printerProgress;
          document.getElementById("currentStatus").checked = res.dashboard.printerStates.currentStatus;
          document.getElementById("currentUtilisation").checked = res.dashboard.farmUtilisation.currentUtilisation;
          document.getElementById("farmUtilisation").checked = res.dashboard.farmUtilisation.farmUtilisation;
          document.getElementById("weeklyUtilisation").checked = res.dashboard.historical.weeklyUtilisation;
          document.getElementById("hourlyTotalTemperatures").checked = res.dashboard.historical.hourlyTotalTemperatures;
          document.getElementById("environmentalHistory").checked = res.dashboard.historical.environmentalHistory;
          document.getElementById("filamentUsageCheck").checked = res.dashboard.historical.filamentUsageByDay;
          document.getElementById("printCompletionCheck").checked = res.dashboard.historical.historyCompletionByDay;
          document.getElementById("filamentUsageOverTimeCheck").checked = res.dashboard.historical.filamentUsageOverTime;
        }

        if (typeof res.controlSettings !== "undefined") {
          document.getElementById("printerControlFilesFirst").checked = res.controlSettings.filesTop;
        }
      });
    }
  }, {
    key: "update",
    value: function () {
      var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var opts;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                opts = {
                  panelView: {
                    currentOp: document.getElementById("panelCurrentOpOn").checked,
                    hideOff: document.getElementById("panelHideOffline").checked,
                    hideClosed: document.getElementById("panelHideClosed").checked // hideIdle: document.getElementById("panelHideIdle").checked,

                  },
                  cameraView: {
                    cameraRows: document.getElementById("selectCameraGrid").value
                  },
                  controlSettings: {
                    filesTop: document.getElementById("printerControlFilesFirst").checked
                  },
                  dashboard: {
                    defaultLayout: [{
                      x: 0,
                      y: 0,
                      width: 2,
                      height: 5,
                      id: "currentUtil"
                    }, {
                      x: 5,
                      y: 0,
                      width: 3,
                      height: 5,
                      id: "farmUtil"
                    }, {
                      x: 8,
                      y: 0,
                      width: 2,
                      height: 5,
                      id: "averageTimes"
                    }, {
                      x: 10,
                      y: 0,
                      width: 2,
                      height: 5,
                      id: "cumulativeTimes"
                    }, {
                      x: 2,
                      y: 0,
                      width: 3,
                      height: 5,
                      id: "currentStat"
                    }, {
                      x: 6,
                      y: 5,
                      width: 3,
                      height: 5,
                      id: "printerTemps"
                    }, {
                      x: 9,
                      y: 5,
                      width: 3,
                      height: 5,
                      id: "printerUtilisation"
                    }, {
                      x: 0,
                      y: 5,
                      width: 3,
                      height: 5,
                      id: "printerStatus"
                    }, {
                      x: 3,
                      y: 5,
                      width: 3,
                      height: 5,
                      id: "printerProgress"
                    }, {
                      x: 6,
                      y: 10,
                      width: 6,
                      height: 9,
                      id: "hourlyTemper"
                    }, {
                      x: 0,
                      y: 10,
                      width: 6,
                      height: 9,
                      id: "weeklyUtil"
                    }, {
                      x: 0,
                      y: 19,
                      width: 12,
                      height: 8,
                      id: "enviroData"
                    }, {
                      x: 0,
                      y: 19,
                      width: 12,
                      height: 8,
                      id: "filamentUsageOverTime"
                    }, {
                      x: 0,
                      y: 19,
                      width: 12,
                      height: 8,
                      id: "filamentUsageByDay"
                    }, {
                      x: 0,
                      y: 19,
                      width: 12,
                      height: 8,
                      id: "historyCompletionByDay"
                    }],
                    savedLayout: localStorage.getItem("dashboardConfiguration"),
                    farmActivity: {
                      currentOperations: document.getElementById("currentOperations").checked,
                      cumulativeTimes: document.getElementById("cumulativeTimes").checked,
                      averageTimes: document.getElementById("averageTimes").checked
                    },
                    printerStates: {
                      printerState: document.getElementById("printerState").checked,
                      printerTemps: document.getElementById("printerTemps").checked,
                      printerUtilisation: document.getElementById("printerUtilisation").checked,
                      printerProgress: document.getElementById("printerProgress").checked,
                      currentStatus: document.getElementById("currentStatus").checked
                    },
                    farmUtilisation: {
                      currentUtilisation: document.getElementById("currentUtilisation").checked,
                      farmUtilisation: document.getElementById("farmUtilisation").checked
                    },
                    historical: {
                      weeklyUtilisation: document.getElementById("weeklyUtilisation").checked,
                      hourlyTotalTemperatures: document.getElementById("hourlyTotalTemperatures").checked,
                      environmentalHistory: document.getElementById("environmentalHistory").checked,
                      historyCompletionByDay: document.getElementById("printCompletionCheck").checked,
                      filamentUsageByDay: document.getElementById("filamentUsageCheck").checked,
                      filamentUsageOverTime: document.getElementById("filamentUsageOverTimeCheck").checked
                    }
                  }
                };
                _context2.next = 3;
                return _octofarm["default"].post("settings/client/update", opts);

              case 3:
                localStorage.setItem("clientSettings", JSON.stringify(opts));

                _ui["default"].createAlert("success", "Client settings updated", 3000, "clicked");

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function update() {
        return _update.apply(this, arguments);
      }

      return update;
    }()
  }, {
    key: "get",
    value: function get() {// return JSON.parse(localStorage.getItem("clientSettings"));
    }
  }]);

  return ClientSettings;
}();

var ServerSettings = /*#__PURE__*/function () {
  function ServerSettings() {
    _classCallCheck(this, ServerSettings);
  }

  _createClass(ServerSettings, null, [{
    key: "nukeDatabases",
    value: function nukeDatabases(database) {
      _octofarm["default"].get("settings/server/delete/database/" + database).then(function (res) {
        return res.json();
      }).then(function (res) {
        _ui["default"].createAlert("success", res.message, 3000);
      });
    }
  }, {
    key: "exportDatabases",
    value: function exportDatabases(database) {
      _octofarm["default"].get("settings/server/get/database/" + database).then(function (res) {
        return res.json();
      }).then(function (res) {
        if (res.databases[0].length !== 0) {
          _file["default"].download(database + ".json", JSON.stringify(res.databases));
        } else {
          _ui["default"].createAlert("warning", "Database is empty, will not export...", 3000, "clicked");
        }
      });
    }
  }, {
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        var logList, logTable;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _octofarm["default"].get("settings/server/get").then(function (res) {
                  return res.json();
                }).then(function (res) {
                  oldServerSettings = res;
                  document.getElementById("webSocketThrottle").value = res.onlinePolling.seconds;
                  document.getElementById("serverPortNo").value = res.server.port;
                  document.getElementById("requireLogin").checked = res.server.loginRequired;
                  document.getElementById("requireRegistration").checked = res.server.registration;
                  document.getElementById("webSocketRetry").value = res.timeout.webSocketRetry / 1000;
                  document.getElementById("APITimeout").value = res.timeout.apiTimeout / 1000;
                  document.getElementById("APIRetryTimeout").value = res.timeout.apiRetryCutoff / 1000;
                  document.getElementById("APIRetry").value = res.timeout.apiRetry / 1000;

                  if (typeof res.filament !== "undefined") {
                    document.getElementById("checkFilament").checked = res.filament.filamentCheck;
                  }

                  if (!res.filamentManager) {
                    var filManager = document.getElementById("filamentManagerSyncBtn");
                    filManager.addEventListener("click", /*#__PURE__*/function () {
                      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(event) {
                        var post;
                        return regeneratorRuntime.wrap(function _callee3$(_context3) {
                          while (1) {
                            switch (_context3.prev = _context3.next) {
                              case 0:
                                filManager.innerHTML = '<i class="fas fa-sync fa-spin"></i> <br> Syncing <br> Please Wait...';
                                _context3.next = 3;
                                return _octofarm["default"].post("filament/filamentManagerSync", {
                                  activate: true
                                });

                              case 3:
                                post = _context3.sent;
                                _context3.next = 6;
                                return post.json();

                              case 6:
                                post = _context3.sent;

                                if (post.status) {
                                  filManager.innerHTML = '<i class="fas fa-sync"></i> <br> Sync Filament Manager';
                                  filManager.disabled = true;

                                  _ui["default"].createAlert("success", "Filament Manager Plugin successfully synced", 3000);
                                } else {
                                  filManager.innerHTML = '<i class="fas fa-sync"></i> <br> Sync Filament Manager';
                                  filManager.disabled = false;

                                  _ui["default"].createAlert("error", "Something went wrong, please check the filament manager logs.", 3000);
                                }

                              case 8:
                              case "end":
                                return _context3.stop();
                            }
                          }
                        }, _callee3);
                      }));

                      return function (_x) {
                        return _ref.apply(this, arguments);
                      };
                    }());
                  } else if (res.filamentManager) {
                    var _filManager = document.getElementById("resync-FilamentManager");

                    _filManager.addEventListener("click", /*#__PURE__*/function () {
                      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(event) {
                        var post;
                        return regeneratorRuntime.wrap(function _callee4$(_context4) {
                          while (1) {
                            switch (_context4.prev = _context4.next) {
                              case 0:
                                _filManager.disabled = true;
                                _filManager.innerHTML = '<i class="fas fa-sync fa-spin"></i> <br> Syncing... <br> Please Wait...';
                                _context4.next = 4;
                                return _octofarm["default"].post("filament/filamentManagerReSync");

                              case 4:
                                post = _context4.sent;
                                _context4.next = 7;
                                return post.json();

                              case 7:
                                post = _context4.sent;

                                if (post.status) {
                                  _filManager.innerHTML = '<i class="fas fa-sync"></i> <br> Re-Sync Database';
                                  _filManager.disabled = false;
                                } else {
                                  _filManager.innerHTML = '<i class="fas fa-sync"></i> <br> Re-Sync Database';
                                  _filManager.disabled = false;
                                }

                              case 9:
                              case "end":
                                return _context4.stop();
                            }
                          }
                        }, _callee4);
                      }));

                      return function (_x2) {
                        return _ref2.apply(this, arguments);
                      };
                    }());

                    var disableFilManager = document.getElementById("disable-FilamentManager");
                    disableFilManager.addEventListener("click", /*#__PURE__*/function () {
                      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(event) {
                        var post;
                        return regeneratorRuntime.wrap(function _callee5$(_context5) {
                          while (1) {
                            switch (_context5.prev = _context5.next) {
                              case 0:
                                _context5.next = 2;
                                return _octofarm["default"].post("filament/disableFilamentPlugin", {
                                  activate: true
                                });

                              case 2:
                                post = _context5.sent;
                                _context5.next = 5;
                                return post.json();

                              case 5:
                                post = _context5.sent;

                              case 6:
                              case "end":
                                return _context5.stop();
                            }
                          }
                        }, _callee5);
                      }));

                      return function (_x3) {
                        return _ref3.apply(this, arguments);
                      };
                    }());
                  }

                  if (typeof res.history !== "undefined") {
                    document.getElementById("thumbOnComplete").checked = res.history.thumbnails.onComplete;
                    document.getElementById("thumbOnFailure").checked = res.history.thumbnails.onFailure;
                    document.getElementById("snapOnComplete").checked = res.history.snapshot.onComplete;
                    document.getElementById("snapOnFailure").checked = res.history.snapshot.onFailure;

                    if (typeof res.history.timelapse !== "undefined") {
                      document.getElementById("timelapseOnComplete").checked = res.history.timelapse.onComplete;
                      document.getElementById("timelapseOnFailure").checked = res.history.timelapse.onFailure;
                      document.getElementById("timelapseDelete").checked = res.history.timelapse.deleteAfter;
                    }
                  } else {
                    document.getElementById("thumbOnComplete").checked = true;
                    document.getElementById("thumbOnFailure").checked = true;
                    document.getElementById("snapOnComplete").checked = true;
                    document.getElementById("snapOnFailure").checked = true;
                  }

                  if (typeof res.influxExport !== "undefined") {
                    document.getElementById("infActivateInfluxExport").checked = res.influxExport.active;

                    if (res.influxExport.host !== null) {
                      document.getElementById("infHostIP").value = res.influxExport.host;
                    }

                    if (res.influxExport.username !== null) {
                      document.getElementById("infUsername").value = res.influxExport.username;
                    }

                    if (res.influxExport.password !== null) {
                      document.getElementById("infPassword").value = res.influxExport.password;
                    }

                    if (res.influxExport.database !== null) {
                      document.getElementById("infDatabase").value = res.influxExport.database;
                    }

                    document.getElementById("infHostPort").value = res.influxExport.port;
                    document.getElementById("infDuration").value = res.influxExport.retentionPolicy.duration;
                    document.getElementById("infReplication").value = res.influxExport.retentionPolicy.replication;
                    document.getElementById("infRetention").checked = res.influxExport.retentionPolicy.defaultRet;
                  } else {
                    document.getElementById("infRetention").checked = true;
                    oldServerSettings.influxExport = {
                      active: false,
                      host: null,
                      port: 8086,
                      database: "OctoFarmExport",
                      username: null,
                      password: null,
                      retentionPolicy: {
                        duration: "365d",
                        replication: 1,
                        defaultRet: true
                      }
                    };
                  }
                });

                _context7.next = 3;
                return _octofarm["default"].get("settings/server/get/logs");

              case 3:
                logList = _context7.sent;
                _context7.next = 6;
                return logList.json();

              case 6:
                logList = _context7.sent;
                logTable = document.getElementById("serverLogs");
                logList.forEach(function (logs) {
                  logTable.insertAdjacentHTML("beforeend", "\n            <tr>\n                <td>".concat(logs.name, "</td>\n                <td>").concat(new Date(logs.modified).toString().substring(0, 21), "</td>\n                <td>").concat(_calc["default"].bytes(logs.size), "</td>\n                <td><button id=\"").concat(logs.name, "\" type=\"button\" class=\"btn btn-sm btn-primary\"><i class=\"fas fa-download\"></i></button></td>\n            </tr>\n        "));
                  document.getElementById(logs.name).addEventListener("click", /*#__PURE__*/function () {
                    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(event) {
                      var body;
                      return regeneratorRuntime.wrap(function _callee6$(_context6) {
                        while (1) {
                          switch (_context6.prev = _context6.next) {
                            case 0:
                              body = {
                                logName: logs.name
                              };
                              window.open("/settings/server/download/logs/".concat(logs.name));

                            case 2:
                            case "end":
                              return _context6.stop();
                          }
                        }
                      }, _callee6);
                    }));

                    return function (_x4) {
                      return _ref4.apply(this, arguments);
                    };
                  }());
                });

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "update",
    value: function update() {
      var reboot = false;
      var onlinePoll = document.getElementById("webSocketThrottle").value;
      var onlinePolling = {
        seconds: onlinePoll
      };
      var server = {
        port: parseInt(document.getElementById("serverPortNo").value),
        loginRequired: document.getElementById("requireLogin").checked,
        registration: document.getElementById("requireRegistration").checked
      };
      var timeout = {
        webSocketRetry: document.getElementById("webSocketRetry").value * 1000,
        apiTimeout: document.getElementById("APITimeout").value * 1000,
        apiRetryCutoff: document.getElementById("APIRetryTimeout").value * 1000,
        apiRetry: document.getElementById("APIRetry").value * 1000
      };
      var filament = {
        filamentCheck: document.getElementById("checkFilament").checked
      };
      var history = {
        snapshot: {
          onComplete: document.getElementById("snapOnComplete").checked,
          onFailure: document.getElementById("snapOnFailure").checked
        },
        thumbnails: {
          onComplete: document.getElementById("thumbOnComplete").checked,
          onFailure: document.getElementById("thumbOnFailure").checked
        },
        timelapse: {
          onComplete: document.getElementById("timelapseOnComplete").checked,
          onFailure: document.getElementById("timelapseOnFailure").checked,
          deleteAfter: document.getElementById("timelapseDelete").checked
        }
      };
      var influxExport = {
        active: document.getElementById("infActivateInfluxExport").checked,
        host: document.getElementById("infHostIP").value,
        port: document.getElementById("infHostPort").value,
        database: document.getElementById("infDatabase").value,
        username: document.getElementById("infUsername").value,
        password: document.getElementById("infPassword").value,
        retentionPolicy: {
          duration: document.getElementById("infDuration").value,
          replication: document.getElementById("infReplication").value,
          defaultRet: document.getElementById("infRetention").checked
        }
      };

      if (oldServerSettings.server.port !== server.port || oldServerSettings.server.loginRequired !== server.loginRequired || oldServerSettings.server.registration !== server.registration || oldServerSettings.timeout.webSocketRetry !== timeout.webSocketRetry || oldServerSettings.timeout.apiTimeout !== timeout.apiTimeout || oldServerSettings.timeout.apiRetryCutoff !== timeout.apiRetryCutoff || oldServerSettings.timeout.apiRetry !== timeout.apiRetry || oldServerSettings.influxExport.active !== influxExport.active || oldServerSettings.influxExport.host !== influxExport.host || oldServerSettings.influxExport.port !== influxExport.port || oldServerSettings.influxExport.database !== influxExport.database || oldServerSettings.influxExport.username !== influxExport.username || oldServerSettings.influxExport.password !== influxExport.password || oldServerSettings.influxExport.retentionPolicy.duration !== influxExport.retentionPolicy.duration || oldServerSettings.influxExport.retentionPolicy.replication !== influxExport.retentionPolicy.replication || oldServerSettings.influxExport.retentionPolicy.defaultRet !== influxExport.retentionPolicy.defaultRet) {
        reboot = true;
      }

      _octofarm["default"].post("settings/server/update", {
        onlinePolling: onlinePolling,
        server: server,
        timeout: timeout,
        filament: filament,
        history: history,
        influxExport: influxExport
      }).then(function (res) {
        return res.json();
      }).then(function (res) {
        _ui["default"].createAlert("".concat(res.status), "".concat(res.msg), 3000, "Clicked");

        if (reboot) {
          bootbox.confirm({
            message: "Your settings changes require a restart, would you like to do this now?",
            buttons: {
              cancel: {
                label: '<i class="fa fa-times"></i> Cancel'
              },
              confirm: {
                label: '<i class="fa fa-check"></i> Confirm'
              }
            },
            callback: function callback(result) {
              if (result) {
                _octofarm["default"].get("settings/server/restart");

                _ui["default"].createAlert("warning", "Performing a server restart, please wait for it to come back online.", 6000, "Clicked");
              }
            }
          });
        }
      });
    }
  }]);

  return ServerSettings;
}(); // Initialise Settings


ServerSettings.init();
ClientSettings.init();

_scriptCheck["default"].get();

},{"./lib/functions/calc.js":1,"./lib/functions/file.js":2,"./lib/functions/ui.js":3,"./lib/modules/scriptCheck.js":6,"./lib/octofarm.js":7,"./lib/octoprint":8}]},{},[9]);
