(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Calculation Functions
var Calculate = /*#__PURE__*/function () {
  function Calculate() {
    _classCallCheck(this, Calculate);
  }

  _createClass(Calculate, null, [{
    key: "randomString",
    // Generate a random string
    value: function randomString() {
      var random = Math.random().toString(36).substr(2, 5);
      return random;
    } // Apply tofixed if not null

  }, {
    key: "toFixed",
    value: function toFixed(amount, fractional) {
      if (typeof amount !== "undefined" && amount !== null) {
        return amount.toFixed(fractional);
      }

      return 0;
    } // Convert miliseconds to Days, Hours, Minutes

  }, {
    key: "generateTime",
    value: function generateTime(seconds) {
      var string = "";

      if (seconds === undefined || isNaN(seconds) || seconds === null) {
        string = "No Time Estimate";
      } else {
        var years = Math.floor(seconds / (360 * 365));
        var days = Math.floor(seconds / (3600 * 24));
        seconds -= days * 3600 * 24;
        var hrs = Math.floor(seconds / 3600);
        seconds -= hrs * 3600;
        var mnts = Math.floor(seconds / 60);
        seconds -= mnts * 60;
        seconds = Math.floor(seconds);
        string = "".concat(days, "d, ").concat(hrs, "h, ").concat(mnts, "m, ").concat(seconds, "s");

        if (mnts === 0) {
          if (string.includes("0m")) {
            string = string.replace(" 0m,", "");
          }
        }

        if (hrs === 0) {
          if (string.includes("0h")) {
            string = string.replace(" 0h,", "");
          }
        }

        if (days === 0) {
          if (string.includes("0d")) {
            string = string.replace("0d,", "");
          }
        }

        if (mnts === 0 && hrs === 0 && days === 0 && seconds === 0) {
          string = string.replace("0s", "Done");
        }
      }

      return string;
    } // Check if values are between another value.

  }, {
    key: "isBetween",
    value: function isBetween(n, a, b) {
      return (n - a) * (n - b) <= 0;
    }
  }, {
    key: "returnPrintCost",
    value: function returnPrintCost(costSettings, time) {
      if (typeof costSettings === "undefined") {
        // Attempt to update cost settings in history...
        return "No cost settings to calculate from";
      } // calculating electricity cost


      var powerConsumption = parseFloat(costSettings.powerConsumption);
      var costOfElectricity = parseFloat(costSettings.electricityCosts);
      var costPerHour = powerConsumption * costOfElectricity;
      var estimatedPrintTime = time / 3600; // h

      var electricityCost = costPerHour * estimatedPrintTime; // calculating printer cost

      var purchasePrice = parseFloat(costSettings.purchasePrice);
      var lifespan = parseFloat(costSettings.estimateLifespan);
      var depreciationPerHour = lifespan > 0 ? purchasePrice / lifespan : 0;
      var maintenancePerHour = parseFloat(costSettings.maintenanceCosts);
      var printerCost = (depreciationPerHour + maintenancePerHour) * estimatedPrintTime; // assembling string

      var estimatedCost = electricityCost + printerCost;
      return estimatedCost.toFixed(2);
    }
  }, {
    key: "bytes",
    value: function bytes(a, b) {
      var string = "";

      if (a === undefined || isNaN(a) || a === null) {
        return string = "No File Estimate";
      }

      if (a == 0) return "0 Bytes";
      var c = 1024;
      var d = b || 2;
      var e = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
      var f = Math.floor(Math.log(a) / Math.log(c));
      return "".concat(parseFloat((a / Math.pow(c, f)).toFixed(d)), " ").concat(e[f]);
    }
  }, {
    key: "dateClean",
    value: function dateClean(date) {
      date = new Date(date);
      var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
      var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
      return "".concat(days[date.getDay()], " ").concat(months[date.getMonth()], " ").concat(date.getFullYear(), " - ").concat(date.getHours(), ":").concat(date.getMinutes(), ":").concat(date.getSeconds());
    }
  }, {
    key: "generateCost",
    value: function generateCost(cost) {
      if (cost) {
        return cost.toFixed(2);
      } else {
        return 0;
      }
    }
  }]);

  return Calculate;
}();

exports["default"] = Calculate;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dragCheck = dragCheck;
exports.dragAndDropEnable = dragAndDropEnable;
exports.dragAndDropEnableMultiplePrinters = dragAndDropEnableMultiplePrinters;
exports.handleFiles = handleFiles;

var _fileManager = _interopRequireDefault(require("../modules/fileManager.js"));

var _ui = _interopRequireDefault(require("./ui.js"));

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var activeFile = false;

function dragCheck() {
  return _dragCheck.apply(this, arguments);
}

function _dragCheck() {
  _dragCheck = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", activeFile);

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _dragCheck.apply(this, arguments);
}

function dragAndDropEnable(element, printer) {
  var dropArea = document.getElementById(element.id); // Prevent default drag behaviors

  ["dragenter", "dragover", "dragleave", "drop"].forEach(function (eventName) {
    dropArea.addEventListener(eventName, preventDefaults, false);
    document.body.addEventListener(eventName, preventDefaults, false);
  }); // Highlight drop area when item is dragged over it

  ["dragenter", "dragover"].forEach(function (eventName) {
    dropArea.addEventListener(eventName, function (event) {
      activeFile = true;
      highlight(event, element);
    }, false);
  });
  ["dragleave", "drop"].forEach(function (eventName) {
    dropArea.addEventListener(eventName, function (event) {
      activeFile = false;
      unhighlight(event, element);
    }, false);
  });
  dropArea.addEventListener("drop", function (event) {
    handleDrop(event, printer);
  }, false);
}

function dragAndDropEnableMultiplePrinters(element, printers) {
  var dropArea = document.getElementById(element.id); // Prevent default drag behaviors

  ["dragenter", "dragover", "dragleave", "drop"].forEach(function (eventName) {
    dropArea.addEventListener(eventName, preventDefaults, false);
    document.body.addEventListener(eventName, preventDefaults, false);
  }); // Highlight drop area when item is dragged over it

  ["dragenter", "dragover"].forEach(function (eventName) {
    dropArea.addEventListener(eventName, function (event) {
      activeFile = true;
      highlight(event, element);
    }, false);
  });
  ["dragleave", "drop"].forEach(function (eventName) {
    dropArea.addEventListener(eventName, function (event) {
      activeFile = false;
      unhighlight(event, element);
    }, false);
  });
  dropArea.addEventListener("drop", function (event) {
    var selectedOnlyPrinters = printers.filter(function (p) {
      return !!p.isSelected;
    });
    handleMassDrop(event, selectedOnlyPrinters);
  }, false);
}

function preventDefaults(e) {
  e.preventDefault();
  e.stopPropagation();
}

function highlight(e, currentElement) {
  currentElement.classList.add("highlight");
}

function unhighlight(e, currentElement) {
  currentElement.classList.remove("highlight");
}

function handleDrop(e, currentPrinter, currentElement) {
  var dt = e.dataTransfer;
  var files = dt.files;
  handleFiles(files, [currentPrinter], currentElement);
}

function handleMassDrop(e, printers, currentElement) {
  var dt = e.dataTransfer;
  var files = dt.files;
  handleFiles(files, printers, currentElement);
}

function sendFilesToPrinter(singleFileOnly, printAfterUpload, uploadableFiles, printer) {
  _ui["default"].createAlert("warning", "".concat(_validate["default"].getName(printer), ": started upload"), 3000, "Clicked"); // Only single files can be sent to be printed immediately after upload


  if (printAfterUpload && singleFileOnly) {
    _fileManager["default"].handleFiles(uploadableFiles, printer, "print");
  } else {
    _fileManager["default"].handleFiles(uploadableFiles, printer);
  }
}

function handleFiles(uploadableFiles, printerArray) {
  if (!printerArray || printerArray.length === 0) {
    return;
  }

  var singleFileOnly = uploadableFiles.length === 1;

  if (singleFileOnly) {
    bootbox.confirm({
      message: "Would you like to print upon upload?",
      buttons: {
        confirm: {
          label: "Yes",
          className: "btn-success"
        },
        cancel: {
          label: "No",
          className: "btn-danger"
        }
      },
      callback: function callback(bootBoxConfirmed) {
        printerArray.forEach(function (printer) {
          sendFilesToPrinter(true, bootBoxConfirmed, uploadableFiles, printer);
        });
      }
    });
  } else {
    printerArray.forEach(function (printer) {
      sendFilesToPrinter(false, false, uploadableFiles, printer);
    });
  }
}

},{"../modules/fileManager.js":10,"./ui.js":4,"./validate.js":5}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var FileOperations = /*#__PURE__*/function () {
  function FileOperations() {
    _classCallCheck(this, FileOperations);
  }

  _createClass(FileOperations, null, [{
    key: "download",
    //Download a generated file
    value: function download(filename, text) {
      var element = document.createElement('a');
      element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
      element.setAttribute('download', filename);
      element.style.display = 'none';
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    }
  }]);

  return FileOperations;
}();

exports["default"] = FileOperations;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var UI = /*#__PURE__*/function () {
  function UI() {
    _classCallCheck(this, UI);
  }

  _createClass(UI, null, [{
    key: "getColour",
    //Colour function
    value: function getColour(state) {
      if (state === "Operational") {
        return {
          name: "secondary",
          hex: "#262626",
          category: "Idle"
        };
      } else if (state === "Paused") {
        return {
          name: "warning",
          hex: "#583c0e",
          category: "Idle"
        };
      } else if (state === "Printing") {
        return {
          name: "warning",
          hex: "#583c0e",
          category: "Active"
        };
      } else if (state === "Pausing") {
        return {
          name: "warning",
          hex: "#583c0e",
          category: "Active"
        };
      } else if (state === "Cancelling") {
        return {
          name: "warning",
          hex: "#583c0e",
          category: "Active"
        };
      } else if (state === "Error") {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Idle"
        };
      } else if (state === "Offline") {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Offline"
        };
      } else if (state === "Searching...") {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Idle"
        };
      } else if (state === "Closed") {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Closed"
        };
      } else if (state === "Complete") {
        return {
          name: "success",
          hex: "#00330e",
          category: "Complete"
        };
      } else {
        return {
          name: "danger",
          hex: "#2e0905",
          category: "Offline"
        };
      }
    } //Create message

  }, {
    key: "createMessage",
    value: function createMessage(options, element) {
      var message = document.getElementById(element);
      var row = "\n      <div class=\"alert alert-".concat(options.type, " alert-dismissible fade show\" role=\"alert\">\n        ").concat(options.msg, "\n      <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n    ");
      message.insertAdjacentHTML("beforeend", row);
    } //Create toast notification

  }, {
    key: "createAlert",
    value: function createAlert(type, message, delay, click) {
      if (click != undefined) {
        click = ["click"];
      } else {
        click = [];
      } //This needs a more elegant solution, I think noty is keeping the elements I remove with remove() from the DOM in memory somewhere...


      Noty.setMaxVisible(50);
      var alert = new Noty({
        type: type,
        theme: "bootstrap-v4",
        closeWith: click,
        timeout: delay,
        layout: "bottomRight",
        text: message
      });
      alert.show();
      return alert;
    }
  }, {
    key: "doesElementNeedUpdating",
    value: function doesElementNeedUpdating(value, element, meta) {
      //Quick check to see if the UI value differs, if so update.
      if (element) {
        if (JSON.stringify(value) !== JSON.stringify(element[meta])) {
          element[meta] = value;
        }
      }
    }
  }, {
    key: "clearSelect",
    value: function clearSelect(elementValue) {
      var inputBoxes = document.querySelectorAll("*[id^=" + elementValue + "]");
      inputBoxes.forEach(function (input) {
        input.value = "";
      });
    }
  }, {
    key: "addSelectListeners",
    value: function addSelectListeners(elementValue) {
      var inputBoxes = document.querySelectorAll("*[id^=" + elementValue + "]");
      inputBoxes.forEach(function (input) {
        input.addEventListener("focus", function (e) {
          if (input.value !== input.placeholder) {
            input.value = input.placeholder;
          }
        });
        input.addEventListener("focusout", function (e) {
          if (input.value !== input.placeholder) {
            input.placeholder = input.value;
          }
        });
      });
    }
  }]);

  return UI;
}();

exports["default"] = UI;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Validate = /*#__PURE__*/function () {
  function Validate() {
    _classCallCheck(this, Validate);
  }

  _createClass(Validate, null, [{
    key: "URL",
    //Check the validity of a URL
    value: function URL(u) {
      var elm;

      if (!elm) {
        elm = document.createElement('input');
        elm.setAttribute('type', 'url');
      }

      elm.value = u;
      return elm.validity.valid;
    }
  }, {
    key: "IP",
    value: function IP(ipaddress) {
      if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "JSON",
    value: function JSON(file) {
      if (/^[\],:{}\s]*$/.test(file.replace(/\\["\\\/bfnrtu]/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "getName",
    value: function getName(printer) {
      if (typeof printer.settingsAppearance != "undefined") {
        if (printer.settingsAppearance.name === "" || printer.settingsAppearance.name === null) {
          return printer.printerURL;
        } else {
          return printer.settingsAppearance.name;
        }
      } else {
        return printer.printerURL;
      }
    }
  }, {
    key: "stripHTML",
    value: function stripHTML(text) {
      var tmp = document.createElement("DIV");
      tmp.innerHTML = text;
      var res = tmp.textContent || tmp.innerText || '';
      res.replace("\u200B", ''); // zero width space

      res = res.trim();
      return res;
    }
  }]);

  return Validate;
}();

exports["default"] = Validate;

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.printerQuickConnected = printerQuickConnected;
exports.printerQuickDisconnected = printerQuickDisconnected;
exports.checkQuickConnectState = checkQuickConnectState;

var _powerButton = _interopRequireDefault(require("../powerButton.js"));

var _ui = _interopRequireDefault(require("../../functions/ui"));

var _octoprint = _interopRequireDefault(require("../../octoprint"));

var _octofarm = _interopRequireDefault(require("../../octofarm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function printerControlBtn(id) {
  return "\n    <button  \n         title=\"Control Your Printer\"\n         id=\"printerButton-".concat(id, "\"\n         type=\"button\"\n         class=\"tag btn btn-primary btn-sm\"\n         data-toggle=\"modal\"\n         data-target=\"#printerManagerModal\" disabled\n         >\n            <i class=\"fas fa-print\"></i>\n    </button>\n    ");
}

function printerWebBtn(id, webURL) {
  return "\n            <a title=\"Open OctoPrint\"\n               id=\"printerWeb-".concat(id, "\"\n               type=\"button\"\n               class=\"tag btn btn-info btn-sm\"\n               target=\"_blank\"\n               href=\"").concat(webURL, "\" role=\"button\"><i class=\"fas fa-globe-europe\"></i></a>\n    ");
}

function printerReSyncBtn(id) {
  return "\n            <button  \n                     title=\"Re-Sync your printer\"\n                     id=\"printerSyncButton-".concat(id, "\"\n                     type=\"button\"\n                     class=\"tag btn btn-success btn-sm\"\n            >\n                <i class=\"fas fa-sync\"></i>\n            </button>\n    ");
}

function printerQuickConnect(id) {
  return "\n    <button  \n         title=\"Quickly connect/disconnect your printer\"\n         id=\"printerQuickConnect-".concat(id, "\"\n         type=\"button\"\n         class=\"tag btn btn-danger btn-sm\"\n         >\n            <i class=\"fas fa-toggle-off\"></i>\n    </button>\n    ");
}

function powerBtnHolder(id) {
  return "\n      <div class=\"btn-group\" id=\"powerBtn-".concat(id, "\">\n      \n      </div>\n  ");
}

function printerQuickConnected(id) {
  var connectBtn = document.getElementById("printerQuickConnect-" + id);
  connectBtn.innerHTML = '<i class="fas fa-toggle-on"></i>';
  connectBtn.classList.remove("btn-danger");
  connectBtn.classList.add("btn-success");
  connectBtn.title = "Press to connect your printer!";
}

function printerQuickDisconnected(id) {
  var connectBtn = document.getElementById("printerQuickConnect-" + id);
  connectBtn.innerHTML = '<i class="fas fa-toggle-off"></i>';
  connectBtn.classList.remove("btn-success");
  connectBtn.classList.add("btn-danger");
  connectBtn.title = "Press to connect your printer!";
}

function init(_x, _x2) {
  return _init.apply(this, arguments);
}

function _init() {
  _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(printer, element) {
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            document.getElementById(element).innerHTML = "\n    ".concat(printerControlBtn(printer._id), "  \n    ").concat(printerWebBtn(printer._id, printer.printerURL), "  \n    ").concat(printerReSyncBtn(printer._id), "  \n    ").concat(printerQuickConnect(printer._id), "  \n    ").concat(powerBtnHolder(printer._id), "  \n  ");
            _context4.next = 3;
            return _powerButton["default"].applyBtn(printer, "powerBtn-");

          case 3:
            if (printer.currentConnection != null && printer.currentConnection.port != null && printer.printerState.colour.category != "Offline") {
              printerQuickConnected(printer._id);
            } else {
              printerQuickDisconnected(printer._id);
            }

            if (printer.printerState.colour.category === "Offline") {
              document.getElementById("printerQuickConnect-" + printer._id).disabled = true;
            } else {
              document.getElementById("printerQuickConnect-" + printer._id).disabled = false;
            }

            addEventListeners(printer);
            return _context4.abrupt("return", true);

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _init.apply(this, arguments);
}

function addEventListeners(printer) {
  //Quick Connect
  document.getElementById("printerQuickConnect-".concat(printer._id)).addEventListener("click", /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(e) {
      var data, post;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              e.disabled = true;

              if (!document.getElementById("printerQuickConnect-" + printer._id).classList.contains("btn-danger")) {
                _context2.next = 10;
                break;
              }

              data = {};

              if (typeof printer.connectionOptions !== "undefined") {
                data = {
                  command: "connect",
                  port: printer.connectionOptions.portPreference,
                  baudrate: parseInt(printer.connectionOptions.baudratePreference),
                  printerProfile: printer.connectionOptions.printerProfilePreference
                };
              } else {
                _ui["default"].createAlert("warning", "".concat(printer.printerName, " has no preferences saved, defaulting to AUTO..."), 8000, "Clicked");

                data.command = "connect";
                data.port = "AUTO";
                data.baudrate = "AUTO";
                data.printerProfile = "_default";
              }

              _context2.next = 6;
              return _octoprint["default"].post(printer, "connection", data);

            case 6:
              post = _context2.sent;

              if (typeof post !== "undefined") {
                if (post.status === 204) {
                  _ui["default"].createAlert("success", "Successfully made connection attempt to ".concat(printer.printerName, "..."), 3000, "Clicked");
                } else {
                  _ui["default"].createAlert("error", "There was an issue connecting to ".concat(printer.printerName, " it's either not online, or the connection options supplied are not available..."), 3000, "Clicked");
                }
              } else {
                _ui["default"].createAlert("error", "No response from ".concat(printer.printerName, ", is it online???"), 3000, "Clicked");
              }

              _context2.next = 11;
              break;

            case 10:
              bootbox.confirm({
                message: "Are you sure you want to disconnect your printer?",
                buttons: {
                  confirm: {
                    label: "Yes",
                    className: "btn-success"
                  },
                  cancel: {
                    label: "No",
                    className: "btn-danger"
                  }
                },
                callback: function () {
                  var _callback = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(result) {
                    var _data, _post;

                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            if (!result) {
                              _context.next = 6;
                              break;
                            }

                            _data = {
                              command: "disconnect"
                            };
                            _context.next = 4;
                            return _octoprint["default"].post(printer, "connection", _data);

                          case 4:
                            _post = _context.sent;

                            if (typeof _post !== "undefined") {
                              if (_post.status === 204) {
                                _ui["default"].createAlert("success", "Successfully made disconnect attempt to ".concat(printer.printerName, "..."), 3000, "Clicked");
                              } else {
                                _ui["default"].createAlert("error", "There was an issue disconnecting to ".concat(printer.printerName, " are you sure it's online?"), 3000, "Clicked");
                              }
                            } else {
                              _ui["default"].createAlert("error", "No response from ".concat(printer.printerName, ", is it online???"), 3000, "Clicked");
                            }

                          case 6:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  function callback(_x4) {
                    return _callback.apply(this, arguments);
                  }

                  return callback;
                }()
              });

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3) {
      return _ref.apply(this, arguments);
    };
  }()); //Re-Sync printer

  document.getElementById("printerSyncButton-".concat(printer._id)).addEventListener("click", /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(e) {
      var data, post;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              e.target.innerHTML = "<i class='fas fa-sync fa-spin'></i>";
              e.target.disabled = true;
              data = {
                id: printer._id
              };
              _context3.next = 5;
              return _octofarm["default"].post("printers/reScanOcto", data);

            case 5:
              post = _context3.sent;
              _context3.next = 8;
              return post.json();

            case 8:
              post = _context3.sent;

              if (post.msg.status !== "error") {
                _ui["default"].createAlert("success", post.msg.msg, 3000, "clicked");
              } else {
                _ui["default"].createAlert("error", post.msg.msg, 3000, "clicked");
              }

              e.target.innerHTML = "<i class='fas fa-sync'></i>";
              e.target.disabled = false;

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x5) {
      return _ref2.apply(this, arguments);
    };
  }());
}

function checkQuickConnectState(printer) {
  document.getElementById("printerQuickConnect-" + printer._id).disabled = printer.printerState.colour.category === "Offline";

  if (typeof printer.connectionOptions !== "undefined") {
    if (printer.connectionOptions.portPreference === null || printer.connectionOptions.baudratePreference === null || printer.connectionOptions.printerProfilePreference === null) {
      document.getElementById("printerQuickConnect-" + printer._id).disabled = true;
    }
  } else {
    document.getElementById("printerQuickConnect-" + printer._id).disabled = true;
  }

  if (printer.printerState.colour.category !== "Offline" && printer.printerState.colour.category === "Disconnected" || printer.printerState.colour.category === "Error!") {
    printerQuickDisconnected(printer._id);
  } else if (printer.printerState.colour.category !== "Offline" && printer.printerState.colour.category !== "Disconnected" && !printer.printerState.colour.category !== "Error!") {
    printerQuickConnected(printer._id);
  } else {
    printerQuickDisconnected(printer._id);
  }
}

},{"../../functions/ui":4,"../../octofarm":18,"../../octoprint":19,"../powerButton.js":12}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Queue = /*#__PURE__*/function () {
  function Queue() {
    _classCallCheck(this, Queue);

    this.data = [];
  }

  _createClass(Queue, [{
    key: "add",
    value: function add(record) {
      record.active = false;
      this.data.push(record);
    }
  }, {
    key: "remove",
    value: function remove() {
      this.data.shift();
    }
  }, {
    key: "first",
    value: function first() {
      return this.data[0];
    }
  }, {
    key: "activate",
    value: function activate(index) {
      this.data[index].active = true;
    }
  }, {
    key: "size",
    value: function size() {
      return this.data.length;
    }
  }, {
    key: "all",
    value: function all() {
      var _this = this;

      var res = [];
      this.data.forEach(function (d, index) {
        res.push(_this.data[index]);
      });
      return res;
    }
  }]);

  return Queue;
}();

exports["default"] = Queue;

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

var _octoprint = _interopRequireDefault(require("../octoprint.js"));

var _ui = _interopRequireDefault(require("../functions/ui.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function getButton(button) {
  return "\n    <button id=\"gcode-".concat(button._id, "\" title=\"").concat(button.description, "\" type=\"button\" class=\"btn btn-primary\">").concat(button.name, "</button>\n    ");
}

var CustomGenerator = /*#__PURE__*/function () {
  function CustomGenerator() {
    _classCallCheck(this, CustomGenerator);
  }

  _createClass(CustomGenerator, null, [{
    key: "generateButtons",
    value: function () {
      var _generateButtons = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(printers) {
        var _this = this;

        var customScripts, area;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _octofarm["default"].get("settings/customGcode");

              case 2:
                customScripts = _context.sent;
                _context.next = 5;
                return customScripts.json();

              case 5:
                customScripts = _context.sent;
                //Draw Scripts
                area = document.getElementById("customGcodeCommandsArea");

                if (area) {
                  customScripts.forEach(function (scripts) {
                    var button = getButton(scripts);
                    area.insertAdjacentHTML("beforeend", button);
                    document.getElementById("gcode-" + scripts._id).addEventListener("click", function (e) {
                      _this.fireCommand(scripts._id, scripts.gcode, printers);
                    });
                  });
                }

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function generateButtons(_x) {
        return _generateButtons.apply(this, arguments);
      }

      return generateButtons;
    }()
  }, {
    key: "fireCommand",
    value: function () {
      var _fireCommand = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(id, script, printers) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                printers.forEach( /*#__PURE__*/function () {
                  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(printer) {
                    var opt, post;
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            opt = {
                              commands: script
                            };
                            _context2.next = 3;
                            return _octoprint["default"].post(printer, "printer/command", opt);

                          case 3:
                            post = _context2.sent;

                            if (post.status === 204) {
                              _ui["default"].createAlert("success", "Your gcode commands have successfully been sent!", 3000, "Clicked");
                            } else {
                              _ui["default"].createAlert("danger", "Your gcode failed to send! Please check the printer is able to receive these commands.", 3000, "Clicked");
                            }

                          case 5:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  }));

                  return function (_x5) {
                    return _ref.apply(this, arguments);
                  };
                }());

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function fireCommand(_x2, _x3, _x4) {
        return _fireCommand.apply(this, arguments);
      }

      return fireCommand;
    }()
  }]);

  return CustomGenerator;
}();

exports["default"] = CustomGenerator;

},{"../functions/ui.js":4,"../octofarm.js":18,"../octoprint.js":19}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkFilamentManager = checkFilamentManager;
exports.returnDropDown = returnDropDown;
exports.selectFilament = selectFilament;

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function checkFilamentManager() {
  return _checkFilamentManager.apply(this, arguments);
} // export async function returnSelected(id, profiles) {
//   console.log("Return Selected");
//   let profileId = null;
//   const filamentManager = await checkFilamentManager();
//   if (filamentManager) {
//     profileId = _.findIndex(profiles, function (o) {
//       return o.profile.index == id.spools.profile;
//     });
//   } else {
//     profileId = _.findIndex(profiles, function (o) {
//       return o._id == id.spools.profile;
//     });
//   }
//   return `${id.spools.name} (${(id.spools.weight - id.spools.used).toFixed(
//     0
//   )}g) - ${profiles[profileId].profile.material}`;
// }


function _checkFilamentManager() {
  _checkFilamentManager = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var settings;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _octofarm["default"].get("settings/server/get");

          case 2:
            settings = _context.sent;
            _context.next = 5;
            return settings.json();

          case 5:
            settings = _context.sent;
            return _context.abrupt("return", settings.filamentManager);

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _checkFilamentManager.apply(this, arguments);
}

function returnDropDown(_x) {
  return _returnDropDown.apply(this, arguments);
}

function _returnDropDown() {
  _returnDropDown = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(history) {
    var dropDownLists;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _octofarm["default"].get("filament/get/dropDownList");

          case 2:
            dropDownLists = _context2.sent;
            _context2.next = 5;
            return dropDownLists.json();

          case 5:
            dropDownLists = _context2.sent;

            if (!history) {
              _context2.next = 10;
              break;
            }

            return _context2.abrupt("return", dropDownLists.selected.historyDropDown);

          case 10:
            return _context2.abrupt("return", dropDownLists.selected.normalDropDown);

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _returnDropDown.apply(this, arguments);
}

function selectFilament(_x2, _x3, _x4) {
  return _selectFilament.apply(this, arguments);
}

function _selectFilament() {
  _selectFilament = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(printerId, spoolId, tool) {
    var data, changedFilament;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            data = {
              tool: tool,
              printerId: printerId,
              spoolId: spoolId
            };
            _context3.next = 3;
            return _octofarm["default"].post("filament/select", data);

          case 3:
            changedFilament = _context3.sent;

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _selectFilament.apply(this, arguments);
}

},{"../octofarm.js":18}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileActions = exports["default"] = void 0;

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

var _octoprint = _interopRequireDefault(require("../octoprint.js"));

var _clientQueue = _interopRequireDefault(require("./clientQueue.js"));

var _calc = _interopRequireDefault(require("../functions/calc.js"));

var _ui = _interopRequireDefault(require("../functions/ui.js"));

var _dragAndDrop = require("../functions/dragAndDrop.js");

var _fileSorting = _interopRequireDefault(require("./fileSorting.js"));

var _printerSelect = _interopRequireDefault(require("./printerSelect.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fileUploads = new _clientQueue["default"]();
var fileSortInit = false;
var sortableFileList = null;
setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var current, currentDate, file, post, update, fileCounts, allUploads;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(fileUploads.size() > 0)) {
            _context.next = 20;
            break;
          }

          current = fileUploads.first();

          if (current.active) {
            _context.next = 20;
            break;
          }

          fileUploads.activate(0);
          currentDate = new Date();
          _context.next = 7;
          return current.upload(current);

        case 7:
          file = _context.sent;
          file = JSON.parse(file);
          file.index = current.index;
          file.uploadDate = currentDate.getTime() / 1000;
          _context.next = 13;
          return _octofarm["default"].post("printers/newFiles", file);

        case 13:
          post = _context.sent;
          _context.next = 16;
          return FileManager.drawFile(file);

        case 16:
          update = _context.sent;
          fileUploads.remove();
          fileCounts = document.getElementById("fileCounts-".concat(current.index));

          if (fileCounts && fileCounts.innerHTML == 1) {
            fileCounts.innerHTML = " ".concat(0);
          }

        case 20:
          allUploads = fileUploads.all();
          allUploads.forEach(function (uploads) {
            var currentCount = allUploads.reduce(function (n, up) {
              return n + (up.index == uploads.index);
            }, 0);
            var fileCounts = document.getElementById("fileCounts-".concat(uploads.index));

            if (fileCounts) {
              fileCounts.innerHTML = " ".concat(currentCount);
            }
          });

        case 22:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})), 1000);

var FileManager = /*#__PURE__*/function () {
  function FileManager() {
    _classCallCheck(this, FileManager);
  }

  _createClass(FileManager, null, [{
    key: "handleFiles",
    value: function () {
      var _handleFiles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(Afiles, printerInfo, print) {
        var i, newObject, spinner, currentFolder;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                Afiles = _toConsumableArray(Afiles);

                for (i = 0; i < Afiles.length; i++) {
                  newObject = {};
                  spinner = document.getElementById("fileUploadCountSpinner");

                  if (spinner) {
                    if (spinner.classList.contains("fa-spin")) {} else {
                      spinner.classList = "fas fa-spinner fa-spin";
                    }
                  }

                  newObject.file = Afiles[i];

                  if (typeof print !== "undefined") {
                    newObject.print = true;
                  }

                  newObject.index = printerInfo._id;
                  newObject.printerInfo = printerInfo;
                  currentFolder = document.getElementById("currentFolder");

                  if (currentFolder) {
                    newObject.currentFolder = currentFolder.innerHTML;
                  } else {
                    newObject.currentFolder = "local/";
                  }

                  newObject.upload = FileManager.fileUpload;
                  fileUploads.add(newObject);
                }

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function handleFiles(_x, _x2, _x3) {
        return _handleFiles.apply(this, arguments);
      }

      return handleFiles;
    }()
  }, {
    key: "createUpload",
    value: function createUpload(index, fileName, loaded, total) {
      var uploadSize = fileUploads.size();
      var upCount = document.getElementById("fileUploadCount");

      if (upCount) {
        upCount.innerHTML = "File Queue: ".concat(uploadSize);

        if (uploadSize < 1) {
          upCount.innerHTML = "File Queue: 0";
          var spinner = document.getElementById("fileUploadCountSpinner");

          if (spinner.classList.contains("fa-spin")) {
            spinner.classList = "fas fa-spinner";
          }
        }
      }

      var progress = document.getElementById("fileProgress-".concat(index));

      if (progress) {
        progress.classList = "progress-bar progress-bar-striped bg-warning";
        var percentLoad = loaded / total * 100;

        if (isNaN(percentLoad)) {
          percentLoad = 0;
        }

        progress.innerHTML = "".concat(Math.floor(percentLoad), "%");
        progress.style.width = "".concat(percentLoad, "%");

        if (percentLoad == 100) {
          progress.classList = "progress-bar progress-bar-striped bg-success";
        }
      }
    }
  }, {
    key: "fileUpload",
    value: function fileUpload(file) {
      return new Promise(function (resolve, reject) {
        // Grab folder location
        var _file = file,
            currentFolder = _file.currentFolder; // Grab Client Info

        var _file2 = file,
            index = _file2.index;
        var _file3 = file,
            printerInfo = _file3.printerInfo; // XHR doesn't like posting without it been a form, can't use offical octoprint api way...
        // Create form data

        var formData = new FormData();
        var path = "";

        if (currentFolder.includes("local/")) {
          path = currentFolder.replace("local/", "");
        }

        formData.append("file", file.file);
        formData.append("path", path);

        if (file.print) {
          formData.append("print", true);
        }

        var url = "".concat(printerInfo.printerURL, "/api/files/local");
        var xhr = new XMLHttpRequest();
        file = file.file;
        xhr.open("POST", url);

        xhr.upload.onprogress = function (e) {
          if (e.lengthComputable) {
            FileManager.createUpload(printerInfo._id, file.name, e.loaded, e.total);
          }
        }; // xhr.setRequestHeader("Content-Type", "multipart/form-data");


        xhr.setRequestHeader("X-Api-Key", printerInfo.apikey);

        xhr.onloadstart = function (e) {
          FileManager.createUpload(printerInfo._id, file.name, e.loaded, e.total);
        };

        xhr.onloadend = /*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(e) {
            var spinnerIcon, fileCounts;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    spinnerIcon = "<i class=\"fas fa-spinner fa-pulse\"></i> Checking Octoprint for information... <br>";
                    FileManager.createUpload(printerInfo._id, file.name, e.loaded, e.total);
                    setTimeout(function () {
                      FileManager.createUpload(printerInfo._id, file.name, e.loaded, e.total);
                    }, 5000);

                    if (this.status >= 200 && this.status < 300) {
                      resolve(xhr.response);

                      _ui["default"].createAlert("success", "".concat(file.name, " has finished uploading to Printer: ").concat(printerInfo.printerName), 3000, "clicked");

                      setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                        var updatePrinter;
                        return regeneratorRuntime.wrap(function _callee5$(_context5) {
                          while (1) {
                            switch (_context5.prev = _context5.next) {
                              case 0:
                                _context5.next = 2;
                                return _octofarm["default"].post("printers/printerInfo", {
                                  i: printerInfo._id
                                });

                              case 2:
                                updatePrinter = _context5.sent;
                                _context5.next = 5;
                                return updatePrinter.json();

                              case 5:
                                updatePrinter = _context5.sent;
                                FileManager.refreshFiles(updatePrinter, spinnerIcon);
                                setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                                  var updatePrinter;
                                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                    while (1) {
                                      switch (_context4.prev = _context4.next) {
                                        case 0:
                                          _context4.next = 2;
                                          return _octofarm["default"].post("printers/printerInfo", {
                                            i: printerInfo._id
                                          });

                                        case 2:
                                          updatePrinter = _context4.sent;
                                          _context4.next = 5;
                                          return updatePrinter.json();

                                        case 5:
                                          updatePrinter = _context4.sent;
                                          FileManager.refreshFiles(updatePrinter, spinnerIcon);
                                          setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                                            var updatePrinter;
                                            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                                              while (1) {
                                                switch (_context3.prev = _context3.next) {
                                                  case 0:
                                                    _context3.next = 2;
                                                    return _octofarm["default"].post("printers/printerInfo", {
                                                      i: printerInfo._id
                                                    });

                                                  case 2:
                                                    updatePrinter = _context3.sent;
                                                    _context3.next = 5;
                                                    return updatePrinter.json();

                                                  case 5:
                                                    updatePrinter = _context3.sent;
                                                    FileManager.refreshFiles(updatePrinter, "");

                                                  case 7:
                                                  case "end":
                                                    return _context3.stop();
                                                }
                                              }
                                            }, _callee3);
                                          })), 5000);

                                        case 8:
                                        case "end":
                                          return _context4.stop();
                                      }
                                    }
                                  }, _callee4);
                                })), 5000);

                              case 8:
                              case "end":
                                return _context5.stop();
                            }
                          }
                        }, _callee5);
                      })), 5500);
                    } else {
                      fileUploads.remove();
                      fileCounts = document.getElementById("fileCounts-".concat(index));

                      if (fileCounts && fileCounts.innerHTML == 1) {
                        fileCounts.innerHTML = " ".concat(0);
                      }

                      resolve(xhr.response);

                      _ui["default"].createAlert("error", "Sorry but ".concat(file.name, " could not be uploaded... is CORS enabled and OctoPrint online?"), 3000, "clicked");
                    }

                  case 4:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          return function (_x4) {
            return _ref2.apply(this, arguments);
          };
        }();

        xhr.onerror = function () {
          resolve(xhr.response);

          _ui["default"].createAlert("error", "Sorry but ".concat(file.name, " could not be uploaded... is CORS enabled and OctoPrint online?"), 3000, "");
        };

        if (file.name.includes(".gcode")) {
          xhr.send(formData);
        } else {
          _ui["default"].createAlert("error", "Sorry but ".concat(file.name, " is not a gcode file, could not be uploading."), 3000, "");
        }
      });
    }
  }, {
    key: "actionBtnGate",
    value: function actionBtnGate(printer, btn) {
      var data = btn.split("*");
      var action = data[1];
      var filePath = data[2];

      if (action === "fileActionStart") {
        FileActions.startPrint(printer, filePath);
      } else if (action === "fileActionSelect") {
        FileActions.selectFile(printer, filePath);
      } else if (action === "fileActionUpdate") {
        FileActions.updateFile(printer, btn, filePath);
      } else if (action === "fileActionMove") {
        FileActions.moveFile(printer, filePath);
      } else if (action === "fileActionDownload") {} else if (action === "fileActionDelete") {
        FileActions.deleteFile(printer, filePath);
      } else if (action === "folderActionMove") {
        FileActions.moveFolder(printer, filePath);
      } else if (action === "folderActionDelete") {
        FileActions.deleteFolder(printer, filePath);
      }
    }
  }, {
    key: "reSyncFiles",
    value: function () {
      var _reSyncFiles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(e, printer) {
        var done, how, flashReturn;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                e.target.innerHTML = "<i class='fas fa-sync fa-spin'></i> Re-Syncing...";
                _context7.next = 3;
                return _octofarm["default"].post("printers/resyncFile", {
                  i: printer._id
                });

              case 3:
                done = _context7.sent;
                _context7.next = 6;
                return done.json();

              case 6:
                how = _context7.sent;

                flashReturn = function flashReturn() {
                  e.target.classList = "btn btn-primary mb-0";
                  e.target.innerHTML = "<i class='fas fa-sync'></i> Re-Sync";
                };

                if (how) {
                  e.target.classList = "btn btn-primary mb-0";
                  e.target.innerHTML = "<i class='fas fa-sync'></i> Re-Sync";
                  setTimeout(flashReturn, 500);
                } else {
                  e.target.classList = "btn btn-primary mb-0";
                  e.target.innerHTML = "<i class='fas fa-sync'></i> Re-Sync";
                  setTimeout(flashReturn, 500);
                }

                FileManager.updateFileList(printer._id);

              case 10:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function reSyncFiles(_x5, _x6) {
        return _reSyncFiles.apply(this, arguments);
      }

      return reSyncFiles;
    }()
  }, {
    key: "updateFileList",
    value: function () {
      var _updateFileList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(index) {
        var printer;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return _octofarm["default"].post("printers/printerInfo", {
                  i: index
                });

              case 2:
                printer = _context8.sent;
                _context8.next = 5;
                return printer.json();

              case 5:
                printer = _context8.sent;

                _fileSorting["default"].loadSort(printer); //FileManager.drawFiles(printer);


                return _context8.abrupt("return", "done");

              case 8:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function updateFileList(_x7) {
        return _updateFileList.apply(this, arguments);
      }

      return updateFileList;
    }()
  }, {
    key: "openFolder",
    value: function openFolder(folder, target, printer) {
      if (typeof target !== "undefined" && target.type === "button") {
        return;
      }

      if (typeof folder !== "undefined") {
        folder = folder.replace("file-", "");
        document.getElementById("currentFolder").innerHTML = "local/".concat(folder);
        FileManager.updateFileList(printer._id);
      } else {
        var currentFolder = document.getElementById("currentFolder").innerHTML;

        if (currentFolder != "local") {
          var previousFolder = currentFolder.substring(0, currentFolder.lastIndexOf("/"));
          document.getElementById("currentFolder").innerHTML = previousFolder;
          FileManager.updateFileList(printer._id);
        }
      }
    }
  }, {
    key: "drawFile",
    value: function () {
      var _drawFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(file) {
        var fileElem, fileDate, dateString, timeString, f, printer, fileActionBtns;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.prev = 0;
                fileElem = document.getElementById("fileList-".concat(file.index));
                fileDate = new Date(file.uploadDate * 1000);
                dateString = fileDate.toDateString();
                timeString = fileDate.toTimeString().substring(0, 8);
                fileDate = "".concat(dateString, " ").concat(timeString);
                f = " <div\n            id=\"file-".concat(file.files.local.path, "\"\n            href=\"#\"\n          class=\"list-group-item list-group-item-action flex-column align-items-start bg-secondary\"\n            style=\"display: block;\n            padding: 0.7rem 0.1rem;\"\n            >\n            <div class=\"row\">\n                <div\n                id=\"fileThumbnail-").concat(file.files.local.path, "\"\n          class=\"col-lg-2\"\n            style=\"display:flex; justify-content:center; align-items:center;\"\n                >\n                <center><i class=\"fas fa-file-code fa-2x\"></i></center>\n                </div>\n                <div class=\"col-lg-10\">\n                <div class=\"row\">\n                <div class=\"col-12\">\n                <h5 class=\"mb-1 name\">").concat(file.files.local.name.replace("/_/g", " "), "</h5>         \n                </div>\n                </div>\n                <div class=\"row\">\n                <div class=\"col-12\">\n                <p class=\"mb-1 float-right\">\n                  <span title=\"File specific success / failure rate from OctoPrint\" id=\"fileHistoryRate-").concat(file.files.local.path, "\"><i class=\"fas fa-thumbs-up\"></i> <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i> / <i class=\"fas fa-thumbs-down\"></i> <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i></span><br>\n                <i class=\"fas fa-stopwatch\"></i> \n                <span class=\"time\" id=\"fileTime-").concat(file.files.local.path, "\">\n                <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i></span> <br> \n                <i class=\"fas fa-dollar-sign\"></i> \n                <span title=\"Expected Printer Cost\" class=\"cost\" id=\"fileCost-").concat(file.files.local.path, "\">  <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i></span>  </span>    <br> \n            <span title=\"Expected Filament Cost\" > </span>\n\n                </p>\n                <p class=\"mb-1 float-left\">\n                <i class=\"fas fa-clock\"></i><span id=\"fileDateClean-").concat(file.files.local.path, "\" class=\"date d-none\"> ").concat(file.uploadDate, "</span><span id=\"fileDate-").concat(file.files.local.path, "\"> ").concat(fileDate, "</span><br>\n                <i class=\"fas fa-hdd\"></i><span class=\"size\" id=\"fileSize-").concat(file.files.local.path, "\">  <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i></span> </span> <br>\n            <span class=\"usage\" title=\"Expected Filament Usage/Cost\" id=\"fileTool-").concat(file.files.local.path, "\">  <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i></span>  </span>\n                </p> \n                </div>\n                </div>\n                </div>\n                <div class=\"col-lg-12\">\n                <div\n          class=\"d-flex btn-group flex-wrap btn-group-sm\"\n            role=\"group\"\n            aria-label=\"Basic example\"\n                >\n                <button\n            title=\"Re-Sync File\"\n            id=\"").concat(file.index, "*fileActionUpdate*").concat(file.files.local.path, "\"\n            role=\"button\"\n          class=\"btn btn-dark\"\n                >\n                <i class=\"fas fa-sync\"></i> Re-Sync\n                </button>\n                <button           title=\"Start printing file\"\n            id=\"").concat(file.index, "*fileActionStart*").concat(file.files.local.path, "\" type=\"button\" class=\"btn btn-success\">\n          <i class=\"fas fa-play\"></i> Start\n              </button>\n              <button  title=\"Select file\" id=\"").concat(file.index, "*fileActionSelect*").concat(file.files.local.path, "\" type=\"button\" class=\"btn btn-info\">\n        <i class=\"fas fa-file-upload\"></i> Select\n            </button>\n            <button          title=\"Move file\" id=\"").concat(file.index, "*fileActionMove*").concat(file.files.local.path, "\" type=\"button\" class=\"btn btn-warning\">\n      <i class=\"fas fa-people-carry\"></i> Move\n          </button>\n          <button          title=\"Download file\" onclick=\"window.open('").concat(file.files.local.refs.download, "')\" type=\"button\" class=\"btn btn-dark\">\n    <i class=\"fas fa-download\"></i> Download\n        </button>\n        <button title=\"Delete file\" id=\"").concat(file.index, "*fileActionDelete*").concat(file.files.local.path, "\" type=\"button\" class=\"btn btn-danger\">\n  <i class=\"fas fa-trash-alt\"></i> Delete\n      </button>\n      </div>\n      </div>\n      </div>\n      </div>\n      </div>");
                fileElem.insertAdjacentHTML("afterbegin", f);
                _context10.next = 10;
                return _octofarm["default"].post("printers/printerInfo", {
                  i: file.index
                });

              case 10:
                printer = _context10.sent;
                _context10.next = 13;
                return printer.json();

              case 13:
                printer = _context10.sent;
                fileActionBtns = document.querySelectorAll("[id*='*fileAction']");
                fileActionBtns.forEach(function (btn) {
                  // Gate Keeper listener for file action buttons
                  if (btn.id.includes(printer._id)) {
                    btn.addEventListener("click", /*#__PURE__*/function () {
                      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(e) {
                        return regeneratorRuntime.wrap(function _callee9$(_context9) {
                          while (1) {
                            switch (_context9.prev = _context9.next) {
                              case 0:
                                FileManager.actionBtnGate(printer, btn.id);

                              case 1:
                              case "end":
                                return _context9.stop();
                            }
                          }
                        }, _callee9);
                      }));

                      return function (_x9) {
                        return _ref6.apply(this, arguments);
                      };
                    }());
                  }
                });
                _context10.next = 21;
                break;

              case 18:
                _context10.prev = 18;
                _context10.t0 = _context10["catch"](0);
                console.log(_context10.t0);

              case 21:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, null, [[0, 18]]);
      }));

      function drawFile(_x8) {
        return _drawFile.apply(this, arguments);
      }

      return drawFile;
    }()
  }, {
    key: "refreshFiles",
    value: function () {
      var _refreshFiles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(printer, spinnerIcon) {
        var _loop, i, _ret;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _loop = function _loop(i) {
                  var _document$getElementB;

                  var file = printer.fileList.fileList[i];
                  var currentFolder = (_document$getElementB = document.getElementById("currentFolder")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.innerHTML;

                  if (!currentFolder) {
                    // Null-ref is tolerable
                    return "continue";
                  }

                  if (currentFolder.includes("local/")) {
                    currentFolder = currentFolder.replace("local/", "");
                  }

                  if (file.path === currentFolder) {
                    if (document.getElementById("file-".concat(file.fullPath))) {
                      var toolInfo = "";
                      file.toolUnits.forEach(function (unit, index) {
                        toolInfo += "<i class=\"fas fa-weight\"></i> ".concat(unit, " / <i class=\"fas fa-dollar-sign\"></i> Cost: ").concat(file.toolCosts[index], "<br>");
                      });
                      var thumbnail = "<center><i class=\"fas fa-file-code fa-2x\"></i></center>";

                      if (typeof file.thumbnail !== "undefined" && file.thumbnail !== null) {
                        thumbnail = "<center><img src='".concat(printer.printerURL, "/").concat(file.thumbnail, "' width=\"100%\"></center>");
                      }

                      var fileDate = new Date(file.uploadDate * 1000);
                      var dateString = fileDate.toDateString();
                      var timeString = fileDate.toTimeString().substring(0, 8);
                      fileDate = "".concat(dateString, " ").concat(timeString);
                      document.getElementById("fileHistoryRate-" + file.fullPath).innerHTML = spinnerIcon + "<i class=\"fas fa-thumbs-up\"></i> 0 / <i class=\"fas fa-thumbs-down\"></i> 0";
                      document.getElementById("fileDate-".concat(file.fullPath)).innerHTML = " ".concat(fileDate);
                      document.getElementById("fileSize-".concat(file.fullPath)).innerHTML = " ".concat(_calc["default"].bytes(file.fileSize));
                      document.getElementById("fileTool-".concat(file.fullPath)).innerHTML = " ".concat(toolInfo);
                      document.getElementById("fileTime-".concat(file.fullPath)).innerHTML = " ".concat(_calc["default"].generateTime(file.expectedPrintTime));
                      document.getElementById("fileCost-".concat(file.fullPath)).innerHTML = " " + "Print Cost: ".concat(file.printCost);
                      document.getElementById("fileThumbnail-".concat(file.fullPath)).innerHTML = " ".concat(thumbnail);
                      document.getElementById("fileDateClean-".concat(file.fullPath)).innerHTML = file.uploadDate;
                    }
                  }
                };

                i = 0;

              case 2:
                if (!(i < printer.fileList.fileList.length)) {
                  _context11.next = 9;
                  break;
                }

                _ret = _loop(i);

                if (!(_ret === "continue")) {
                  _context11.next = 6;
                  break;
                }

                return _context11.abrupt("continue", 6);

              case 6:
                i++;
                _context11.next = 2;
                break;

              case 9:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      function refreshFiles(_x10, _x11) {
        return _refreshFiles.apply(this, arguments);
      }

      return refreshFiles;
    }()
  }, {
    key: "drawFiles",
    value: function drawFiles(printer, recursive) {
      try {
        var fileElem = document.getElementById("fileList-".concat(printer._id));

        if (fileElem) {
          var fileList = printer.fileList;

          if (printer.systemChecks.cleaning.file.status === "danger") {
            fileElem.innerHTML = "\n            <div class=\"noStorage  text-center\"><i class=\"fas fa-file-code fa-5x\"></i><br><h5>There are no files in local storage...</h5></div>\n      ";
          } else {
            fileElem.innerHTML = "";
            var currentFolder = document.getElementById("currentFolder").innerHTML;

            if (currentFolder.includes("local/")) {
              currentFolder = currentFolder.replace("local/", "");
            } // then draw folders


            if (fileList.folderList.length > 0) {
              fileList.folderList.forEach(function (folder) {
                if (folder.path == currentFolder) {
                  fileElem.insertAdjacentHTML("beforeend", "<a\n              id=\"file-".concat(folder.name, "\"\n              href=\"#\"\n              class=\"list-group-item list-group-item-action flex-column align-items-start bg-dark folderAction\"\n              style=\"display: block;\n                padding: 0.7rem 0.1rem;\"\n            >\n              <div class=\"row\">\n                <div\n                  class=\"col-lg-1\"\n                  style=\"display:flex; justify-content:center; align-items:center;\"\n                >\n                  <center><i class=\"fas fa-folder fa-2x\"></i></center>\n                </div>\n                <div class=\"col-lg-11\">\n                  <small class=\"float-right\"\n                    ><!--Display file and folder count here eventually--></small\n                  >\n                  <div class=\"d-flex w-100 justify-content-between\">\n                    <h5 class=\"mb-1 float-left\">\n                      ").concat(folder.display, "\n                    </h5>\n                    <div\n                      class=\"float-right btn-group flex-wrap btn-group-sm\"\n                      role=\"group\"\n                      aria-label=\"Basic example\"\n                    >\n                      <button id=\"").concat(printer._id, "*folderActionMove*").concat(folder.name, "\" type=\"button\" class=\"btn btn-warning\">\n                        <i class=\"fas fa-people-carry\"></i> Move\n                      </button>\n                      <button id=\"").concat(printer._id, "*folderActionDelete*").concat(folder.name, "\" type=\"button\" class=\"btn btn-danger\">\n                        <i class=\"fas fa-trash-alt\"></i> Delete\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </a>\n         \n            "));
                }
              });
            }

            if (fileList.fileList.length > 0) {
              fileList.fileList.forEach(function (file) {
                var toolInfo = "";
                file.toolUnits.forEach(function (unit, index) {
                  toolInfo += "<i class=\"fas fa-weight\"></i> ".concat(unit, " / <i class=\"fas fa-dollar-sign\"></i> Cost: ").concat(file.toolCosts[index], "<br>");
                });
                var thumbnail = "<center><i class=\"fas fa-file-code fa-2x\"></i></center>";

                if (typeof file.thumbnail !== "undefined" && file.thumbnail !== null) {
                  thumbnail = "<center><img src='".concat(printer.printerURL, "/").concat(file.thumbnail, "' width=\"100%\"></center>");
                }

                var fileDate = new Date(file.uploadDate * 1000);
                var dateString = fileDate.toDateString();
                var timeString = fileDate.toTimeString().substring(0, 8);
                var bgColour = "bg-secondary";

                if (file.last === true) {
                  bgColour = "bg-dark-success";
                } else if (file.last === false) {
                  bgColour = "bg-dark-failed";
                }

                fileDate = "".concat(dateString, " ").concat(timeString);
                var f = " <div\n            id=\"file-".concat(file.fullPath, "\"\n            href=\"#\"\n          class=\"list-group-item list-group-item-action flex-column align-items-start ").concat(bgColour, "\"\n            style=\"display: block;\n            padding: 0.7rem 0.1rem;\"\n            >\n            <div class=\"row\">\n                <div\n                            id=\"fileThumbnail-").concat(file.fullPath, "\"\n          class=\"col-lg-2\"\n            style=\"display:flex; justify-content:center; align-items:center;\"\n                >\n                ").concat(thumbnail, "\n                </div>\n                <div class=\"col-lg-10\">\n                <div class=\"row\">\n                <div class=\"col-12\">\n                <h5 class=\"mb-1 name\">").concat(file.display, "</h5>         \n                <small class=\"mb-1 name\">").concat(file.fullPath, "</small>         \n                </div>\n                </div>\n                <div class=\"row\">\n                <div class=\"col-12\">\n                <p class=\"mb-1 float-right\">\n                <span title=\"File specific success / failure rate from OctoPrint\" id=\"fileHistoryRate-").concat(file.fullPath, "\"><i class=\"fas fa-thumbs-up\"></i> ").concat(file.success, " / <i class=\"fas fa-thumbs-down\"></i> ").concat(file.failed, "</span><br>\n                <i class=\"fas fa-stopwatch\"></i> \n                <span class=\"time\" id=\"fileTime-").concat(file.fullPath, "\">\n                    ").concat(_calc["default"].generateTime(file.expectedPrintTime), "</span> <br> \n                <i class=\"fas fa-dollar-sign\"></i> \n                <span title=\"Expected Printer Cost\" class=\"cost\" id=\"fileCost-").concat(file.fullPath, "\"> Print Cost: ").concat(file.printCost, " </span>    <br> \n            <span title=\"Expected Filament Cost\"> </span>\n\n                </p>\n                <p class=\"mb-1 float-left\">\n                <i class=\"fas fa-clock\"></i><span id=\"fileDateClean-").concat(file.fullPath, "\" class=\"date d-none\"> ").concat(file.uploadDate, "</span><span id=\"fileDate-").concat(file.fullPath, "\"> ").concat(fileDate, "</span><br>\n                <i class=\"fas fa-hdd\"></i><span class=\"size\" id=\"fileSize-").concat(file.fullPath, "\"> ").concat(_calc["default"].bytes(file.fileSize), "</span> <br>\n            <span class=\"usage\" title=\"Expected Filament Usage/Cost\" id=\"fileTool-").concat(file.fullPath, "\"> ").concat(toolInfo, " </span>\n\n                </p> \n                </div>\n                </div>\n                </div>\n                <div class=\"col-lg-12\">\n                <div\n          class=\"d-flex btn-group flex-wrap btn-group-sm\"\n            role=\"group\"\n            aria-label=\"Basic example\"\n                >\n                <button\n            title=\"Re-Sync File\"\n            id=\"").concat(printer._id, "*fileActionUpdate*").concat(file.fullPath, "\"\n            role=\"button\"\n          class=\"btn btn-dark\"\n                >\n                <i class=\"fas fa-sync\"></i> Re-Sync\n                </button>\n                <button           title=\"Start printing file\"\n            id=\"").concat(printer._id, "*fileActionStart*").concat(file.fullPath, "\" type=\"button\" class=\"btn btn-success\">\n          <i class=\"fas fa-play\"></i> Start\n              </button>\n              <button  title=\"Select file\" id=\"").concat(printer._id, "*fileActionSelect*").concat(file.fullPath, "\" type=\"button\" class=\"btn btn-info\">\n        <i class=\"fas fa-file-upload\"></i> Select\n            </button>\n            <button          title=\"Move file\" id=\"").concat(printer._id, "*fileActionMove*").concat(file.fullPath, "\" type=\"button\" class=\"btn btn-warning\">\n      <i class=\"fas fa-people-carry\"></i> Move\n          </button>\n          <button          title=\"Download file\" onclick=\"window.open('").concat(printer.printerURL, "/downloads/files/local/").concat(file.fullPath, "')\" type=\"button\" class=\"btn btn-dark\">\n    <i class=\"fas fa-download\"></i> Download\n        </button>\n        <button title=\"Delete file\" id=\"").concat(printer.printerURL, "*fileActionDelete*").concat(file.fullPath, "\" type=\"button\" class=\"btn btn-danger\">\n  <i class=\"fas fa-trash-alt\"></i> Delete\n      </button>\n      </div>\n      </div>\n      </div>\n      </div>\n      </div>");

                if (typeof recursive !== "undefined") {
                  fileElem.insertAdjacentHTML("beforeend", f);
                } else if (file.path == currentFolder) {
                  fileElem.insertAdjacentHTML("beforeend", f);
                }
              });
            }

            FileManager.updateListeners(printer);
          }
        }
      } catch (e) {
        console.log(e);
      }
    }
  }, {
    key: "search",
    value: function search(id) {
      FileActions.search(id);
    }
  }, {
    key: "createFolder",
    value: function createFolder(printer) {
      FileActions.createFolder(printer);
    }
  }, {
    key: "updateListeners",
    value: function updateListeners(printer) {
      var fileElem = document.getElementById("fileList-".concat(printer._id));
      (0, _dragAndDrop.dragAndDropEnableMultiplePrinters)(fileElem, printer);
      var folders = document.querySelectorAll(".folderAction");
      folders.forEach(function (folder) {
        folder.addEventListener("click", function (e) {
          // Remove from UI
          FileManager.openFolder(folder.id, e.target, printer);
        });
      });
      var fileActionBtns = document.querySelectorAll("[id*='*fileAction']");
      fileActionBtns.forEach(function (btn) {
        // Gate Keeper listener for file action buttons
        btn.addEventListener("click", function (e) {
          FileManager.actionBtnGate(printer, btn.id);
        });
      });
      var folderActionBtns = document.querySelectorAll("[id*='*folderAction']");
      folderActionBtns.forEach(function (btn) {
        // Gate Keeper listener for file action buttons
        btn.addEventListener("click", function (e) {
          FileManager.actionBtnGate(printer, btn.id);
        });
      });
    }
  }, {
    key: "multiUpload",
    value: function () {
      var _multiUpload = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
        var selectedPrinters, selectedFolder, printAfterUpload, selectedFile, first, second, _second, third, grabFiles, files;

        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                grabFiles = function _grabFiles(Afiles) {
                  Afiles = _toConsumableArray(Afiles);
                  selectedFile = Afiles;
                  var files = document.getElementById("multiFileSelectedNow");
                  files.innerHTML = "";
                  selectedFile.forEach(function (file) {
                    files.insertAdjacentHTML("beforeend", "\n          <li>".concat(file.name, "</li>\n        "));
                  });
                };

                third = function _third() {
                  if (selectedFolder == "") {
                    selectedFolder = "local";
                  }

                  selectedPrinters.forEach(function (printer) {
                    var spinner = document.getElementById("fileUploadCountSpinner");

                    if (spinner.classList.contains("fa-spin")) {} else {
                      spinner.classList = "fas fa-spinner fa-spin";
                    }

                    selectedFile.forEach(function (file) {
                      var newObject = {};
                      var num = printer.value;
                      newObject.file = file;
                      newObject.index = num;
                      newObject.printerInfo = printer.printerInfo;
                      newObject.upload = FileManager.fileUpload;
                      newObject.currentFolder = selectedFolder;
                      console.log(printAfterUpload);

                      if (printAfterUpload) {
                        newObject.print = true;
                      }

                      fileUploads.add(newObject);
                    });
                  });
                };

                _second = function _second3() {
                  _second = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                    var printers;
                    return regeneratorRuntime.wrap(function _callee12$(_context12) {
                      while (1) {
                        switch (_context12.prev = _context12.next) {
                          case 0:
                            // DELETE WHEN FOLDERS WORKING
                            selectedPrinters = _printerSelect["default"].getSelected();

                            if (!(selectedPrinters.length < 2)) {
                              _context12.next = 4;
                              break;
                            }

                            _ui["default"].createAlert("error", "Please select MORE than ".concat(selectedPrinters.length, " printer(s)!"), 2000, "clicked");

                            return _context12.abrupt("return");

                          case 4:
                            document.getElementById("multiPrinterBtn").disabled = true;
                            document.getElementById("multiFolder").disabled = false;
                            document.getElementById("multiPrintersSection").classList.add("hidden");
                            document.getElementById("multiFolderSection").classList.remove("hidden");
                            document.getElementById("multiUploadFooter").innerHTML = "<button id=\"multiUpSubmitBtn\" type=\"button\" class=\"btn btn-warning float-right\">Next</button>";
                            document.getElementById("multiUpSubmitBtn").addEventListener("click", function (e) {
                              second();
                            });
                            document.getElementById("multiSelectedPrinters2").innerHTML = "";
                            _context12.next = 13;
                            return _octofarm["default"].post("printers/printerInfo", {
                              i: null
                            });

                          case 13:
                            printers = _context12.sent;
                            _context12.next = 16;
                            return printers.json();

                          case 16:
                            printers = _context12.sent;
                            selectedPrinters.forEach(function (printer, index) {
                              if (printer) {
                                var i = _.findIndex(printers, function (o) {
                                  return o._id == printer.value.toString();
                                });

                                var name = printers[i].printerName;
                                document.getElementById("multiSelectedPrinters2").insertAdjacentHTML("beforeend", "\n            [<span class=\"MultiSelected\">".concat(name, "</span>]\n            "));
                                selectedPrinters[index] = {
                                  value: printers[i]._id,
                                  printerInfo: printers[i]
                                };
                              }
                            });
                            document.getElementById("multiFolder").disabled = true;
                            document.getElementById("multiFile").disabled = false;
                            document.getElementById("multiFileSection").classList.remove("hidden");
                            document.getElementById("multiFolderSection").classList.add("hidden");
                            document.getElementById("multiUploadFooter").innerHTML = "<button id=\"multiUpSubmitBtn\" type=\"button\" class=\"btn btn-success float-right\" data-dismiss=\"modal\">Start!</button>";
                            document.getElementById("multiUpSubmitBtn").addEventListener("click", function (e) {
                              third();
                            });
                            selectedFolder = document.getElementById("multiNewFolder").value;

                            if (selectedFolder != "") {
                              selectedFolder += "";
                            }

                            document.getElementById("printOnLoadBtn").addEventListener("click", function (e) {
                              var state = null;
                              state = e.target.checked;
                              var fileBtn = document.getElementById("multiFileUploadBtn");
                              var fileBtnLabel = document.getElementById("multiFileUploadBtnLabel");

                              if (state) {
                                fileBtn.removeAttribute("multiple", "");
                                fileBtn.setAttribute("single", "");
                                fileBtnLabel.innerHTML = "<i class=\"fas fa-file-import\"></i> Upload File";
                                printAfterUpload = true;
                              } else {
                                fileBtn.setAttribute("multiple", "");
                                fileBtn.removeAttribute("single", "");
                                fileBtnLabel.innerHTML = "<i class=\"fas fa-file-import\"></i> Upload Files";
                                printAfterUpload = false;
                              }
                            });
                            document.getElementById("multiFileUploadBtn").addEventListener("change", function () {
                              grabFiles(this.files);
                            });

                          case 28:
                          case "end":
                            return _context12.stop();
                        }
                      }
                    }, _callee12);
                  }));
                  return _second.apply(this, arguments);
                };

                second = function _second2() {
                  return _second.apply(this, arguments);
                };

                first = function _first() {
                  // let boxs = document.querySelectorAll('*[id^="multiUpPrinters-"]');
                  // selectedPrinters = [].filter.call(boxs, function(el) {
                  //   return el.checked;
                  // });
                  // if (selectedPrinters.length < 2) {
                  //   UI.createAlert(
                  //     "error",
                  //     "Please select MORE than " + selectedPrinters.length + " printer(s)!",
                  //     2000,
                  //     "clicked"
                  //   );
                  //   return;
                  // }
                  document.getElementById("multiPrinterBtn").disabled = true;
                  document.getElementById("multiFolder").disabled = false;
                  document.getElementById("multiPrintersSection").classList.add("hidden");
                  document.getElementById("multiFolderSection").classList.remove("hidden");
                  document.getElementById("multiUploadFooter").innerHTML = "<button id=\"multiUpSubmitBtn\" type=\"button\" class=\"btn btn-warning float-right\">Next</button>";
                  document.getElementById("multiUpSubmitBtn").addEventListener("click", function (e) {
                    second();
                  });
                  document.getElementById("multiSelectedPrinters").innerHTML = "";
                };

                selectedPrinters = null;
                selectedFolder = "";
                printAfterUpload = false;
                selectedFile = null;

                _printerSelect["default"].create(document.getElementById("multiPrintersSection"));

                files = document.getElementById("multiFileSelectedNow");
                files.innerHTML = "";
                document.getElementById("multiPrinterBtn").disabled = false;
                document.getElementById("multiFolder").disabled = true;
                document.getElementById("multiFile").disabled = true;
                document.getElementById("multiPrintersSection").classList.remove("hidden");
                document.getElementById("multiFolderSection").classList.add("hidden");
                document.getElementById("multiFileSection").classList.add("hidden");
                document.getElementById("multiUploadFooter").innerHTML = "<button id=\"multiUpSubmitBtn\" type=\"button\" class=\"btn btn-warning float-right\">Next</button>";
                document.getElementById("multiUpSubmitBtn").addEventListener("click", function (e) {
                  second();
                });

              case 20:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));

      function multiUpload() {
        return _multiUpload.apply(this, arguments);
      }

      return multiUpload;
    }()
  }]);

  return FileManager;
}();

exports["default"] = FileManager;

var FileActions = /*#__PURE__*/function () {
  function FileActions() {
    _classCallCheck(this, FileActions);
  }

  _createClass(FileActions, null, [{
    key: "search",
    value: function () {
      var _search = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(id) {
        var printer, fileList, input, button, i, file;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return _octofarm["default"].post("printers/printerInfo", {
                  i: id
                });

              case 2:
                printer = _context14.sent;
                _context14.next = 5;
                return printer.json();

              case 5:
                printer = _context14.sent;
                fileList = document.getElementById("fileList-".concat(id));
                input = document.getElementById("searchFiles").value.toUpperCase();
                input = input.replace(/ /g, "_");

                if (input === "") {
                  // No search term so reset view
                  document.getElementById("currentFolder").value = "local/";

                  _fileSorting["default"].loadSort(printer); //FileManager.drawFiles(printer, "Recursive");

                } else {
                  document.getElementById("currentFolder").value = "local/";

                  _fileSorting["default"].loadSort(printer, "recursive"); //FileManager.drawFiles(printer, "Recursive");

                }

                button = fileList.querySelectorAll("*[id^=\"file-\"]");

                for (i = 0; i < button.length; i++) {
                  file = button[i].id.replace("file-", "");

                  if (file.toUpperCase().indexOf(input) > -1) {
                    button[i].style.display = "";
                  } else {
                    button[i].style.display = "none";
                  }
                }

              case 12:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      function search(_x12) {
        return _search.apply(this, arguments);
      }

      return search;
    }()
  }, {
    key: "createFolder",
    value: function () {
      var _createFolder = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(printer) {
        var currentFolder, formData;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                currentFolder = document.getElementById("currentFolder").innerHTML;
                formData = new FormData();

                if (currentFolder === "local") {
                  currentFolder = "";
                } else if (currentFolder.includes("local/")) {
                  currentFolder = currentFolder.replace("local/", "");
                }

                bootbox.prompt("What would you like to name your folder?", /*#__PURE__*/function () {
                  var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(result) {
                    var post, opts, update;
                    return regeneratorRuntime.wrap(function _callee15$(_context15) {
                      while (1) {
                        switch (_context15.prev = _context15.next) {
                          case 0:
                            if (!result) {
                              _context15.next = 16;
                              break;
                            }

                            formData.append("foldername", result);
                            formData.append("path", "".concat(currentFolder, "/"));
                            _context15.next = 5;
                            return _octoprint["default"].folder(printer, "local", formData);

                          case 5:
                            post = _context15.sent;

                            if (!(post.status === 201 || post.status === 200)) {
                              _context15.next = 15;
                              break;
                            }

                            opts = {
                              i: printer._id,
                              foldername: result,
                              path: currentFolder
                            };
                            _context15.next = 10;
                            return _octofarm["default"].post("printers/newFolder", opts);

                          case 10:
                            update = _context15.sent;

                            _ui["default"].createAlert("success", "Successfully created your new folder...", 3000, "clicked");

                            FileManager.updateFileList(printer._id);
                            _context15.next = 16;
                            break;

                          case 15:
                            _ui["default"].createAlert("error", "Sorry your folder couldn't be saved...", 3000, "clicked");

                          case 16:
                          case "end":
                            return _context15.stop();
                        }
                      }
                    }, _callee15);
                  }));

                  return function (_x14) {
                    return _ref7.apply(this, arguments);
                  };
                }());

              case 4:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16);
      }));

      function createFolder(_x13) {
        return _createFolder.apply(this, arguments);
      }

      return createFolder;
    }() // Needs updating when filament is brought in.

  }, {
    key: "grabUsage",
    value: function grabUsage(file) {
      if (typeof file.length === "undefined") {
        if (file.length === null || file.length.length === 0) {
          return "No Length";
        }

        return "No Length";
      }

      var usageArray = {
        totalLength: [],
        totalGrams: [],
        usage: []
      };
      file.length.forEach(function (length) {
        var radius = parseFloat(1.75) / 2;
        var volume = length / 1000 * Math.PI * radius * radius;
        var usage = volume * parseFloat(1.24);
        usageArray.totalLength.push(length / 1000);
        usageArray.totalGrams.push(usage);
        usageArray.usage.push("".concat((length / 1000).toFixed(2), "m / ").concat(usage.toFixed(2), "g"));
      });
      usageArray.totalLength = usageArray.totalLength.reduce(function (a, b) {
        return a + b;
      }, 0);
      usageArray.totalGrams = usageArray.totalGrams.reduce(function (a, b) {
        return a + b;
      }, 0);
      return usageArray;
    }
  }, {
    key: "startPrint",
    value: function () {
      var _startPrint = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(printer, filePath) {
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _octoprint["default"].file(printer, filePath, "print");

              case 1:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      }));

      function startPrint(_x15, _x16) {
        return _startPrint.apply(this, arguments);
      }

      return startPrint;
    }()
  }, {
    key: "selectFile",
    value: function selectFile(printer, filePath) {
      _octoprint["default"].file(printer, filePath, "load");
    }
  }, {
    key: "updateFile",
    value: function () {
      var _updateFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(printer, btn, fullPath) {
        var refreshBtn, btnName, done, how, flashReturn;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                refreshBtn = document.getElementById(btn);
                btnName = null;
                refreshBtn.innerHTML = "<i class=\"fas fa-sync fa-spin\"></i> Refreshing...";
                _context18.next = 5;
                return _octofarm["default"].post("printers/resyncFile", {
                  i: printer._id,
                  fullPath: fullPath
                });

              case 5:
                done = _context18.sent;
                _context18.next = 8;
                return done.json();

              case 8:
                how = _context18.sent;
                FileManager.updateFileList(printer._id);
                refreshBtn.innerHTML = "<i class=\"fas fa-sync\"></i> Refresh";

                flashReturn = function flashReturn() {
                  refreshBtn.classList = "btn btn-dark";
                };

                if (how) {
                  refreshBtn.classList = "btn btn-sm btn-success";
                  setTimeout(flashReturn, 500);
                } else {
                  refreshBtn.classList = "btn btn-sm btn-danger";
                  setTimeout(flashReturn, 500);
                }

              case 13:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));

      function updateFile(_x17, _x18, _x19) {
        return _updateFile.apply(this, arguments);
      }

      return updateFile;
    }()
  }, {
    key: "moveFile",
    value: function moveFile(printer, fullPath) {
      var inputOptions = [];
      var loc = {
        text: "local",
        value: "/"
      };
      inputOptions.push(loc);
      printer.fileList.folderList.forEach(function (folder) {
        var option = {
          text: folder.name,
          value: folder.name
        };
        inputOptions.push(option);
      });
      bootbox.prompt({
        title: "Where would you like to move the file?",
        inputType: "select",
        inputOptions: inputOptions,
        callback: function callback(result) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
            var opt, post, json, opts, updateFarm;
            return regeneratorRuntime.wrap(function _callee19$(_context19) {
              while (1) {
                switch (_context19.prev = _context19.next) {
                  case 0:
                    if (!result) {
                      _context19.next = 22;
                      break;
                    }

                    opt = {
                      command: "move",
                      destination: result
                    };
                    _context19.next = 4;
                    return _octoprint["default"].post(printer, "files/local/".concat(fullPath), opt);

                  case 4:
                    post = _context19.sent;

                    if (!(post.status === 404)) {
                      _context19.next = 9;
                      break;
                    }

                    _ui["default"].createAlert("error", "We could not find the location, does it exist?", 3000, "clicked");

                    _context19.next = 22;
                    break;

                  case 9:
                    if (!(post.status === 409)) {
                      _context19.next = 13;
                      break;
                    }

                    _ui["default"].createAlert("error", "There was a conflict, file already exists or is in use...", 3000, "clicked");

                    _context19.next = 22;
                    break;

                  case 13:
                    _context19.next = 15;
                    return post.json();

                  case 15:
                    json = _context19.sent;
                    opts = {
                      index: printer._id,
                      newPath: result,
                      fileName: json.name,
                      newFullPath: json.path
                    };

                    _ui["default"].createAlert("warning", "Moving file... please wait.", 3000, "clicked");

                    _context19.next = 20;
                    return _octofarm["default"].post("printers/moveFile", opts);

                  case 20:
                    updateFarm = _context19.sent;
                    setTimeout(function () {
                      FileManager.updateFileList(printer._id);

                      _ui["default"].createAlert("success", "Successfully moved your file...", 3000, "clicked");
                    }, 3000);

                  case 22:
                  case "end":
                    return _context19.stop();
                }
              }
            }, _callee19);
          }))();
        }
      });
    }
  }, {
    key: "deleteFile",
    value: function deleteFile(printer, fullPath) {
      bootbox.confirm({
        message: "Are you sure you want to delete ".concat(fullPath, "?"),
        buttons: {
          cancel: {
            label: "<i class=\"fa fa-times\"></i> Cancel"
          },
          confirm: {
            label: "<i class=\"fa fa-check\"></i> Confirm"
          }
        },
        callback: function callback(result) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
            return regeneratorRuntime.wrap(function _callee20$(_context20) {
              while (1) {
                switch (_context20.prev = _context20.next) {
                  case 0:
                    if (!result) {
                      _context20.next = 4;
                      break;
                    }

                    _context20.next = 3;
                    return _octoprint["default"].file(printer, fullPath, "delete");

                  case 3:
                    document.getElementById("file-".concat(fullPath)).remove();

                  case 4:
                  case "end":
                    return _context20.stop();
                }
              }
            }, _callee20);
          }))();
        }
      });
    }
  }, {
    key: "deleteFolder",
    value: function deleteFolder(printer, fullPath) {
      bootbox.confirm({
        message: "Are you sure you want to delete ".concat(fullPath, "?"),
        buttons: {
          cancel: {
            label: "<i class=\"fa fa-times\"></i> Cancel"
          },
          confirm: {
            label: "<i class=\"fa fa-check\"></i> Confirm"
          }
        },
        callback: function callback(result) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
            var opts, post, del;
            return regeneratorRuntime.wrap(function _callee21$(_context21) {
              while (1) {
                switch (_context21.prev = _context21.next) {
                  case 0:
                    opts = {
                      index: printer._id,
                      fullPath: fullPath
                    };

                    if (!result) {
                      _context21.next = 9;
                      break;
                    }

                    _context21.next = 4;
                    return _octoprint["default"]["delete"](printer, "files/local/".concat(fullPath));

                  case 4:
                    post = _context21.sent;
                    _context21.next = 7;
                    return _octofarm["default"].post("printers/removefolder", opts);

                  case 7:
                    del = _context21.sent;
                    document.getElementById("file-".concat(fullPath)).remove();

                  case 9:
                  case "end":
                    return _context21.stop();
                }
              }
            }, _callee21);
          }))();
        }
      });
    }
  }, {
    key: "moveFolder",
    value: function moveFolder(printer, fullPath) {
      var inputOptions = [];
      var loc = {
        text: "local",
        value: "/"
      };
      inputOptions.push(loc);
      printer.fileList.folderList.forEach(function (folder) {
        var option = {
          text: folder.name,
          value: folder.name
        };
        inputOptions.push(option);
      });
      bootbox.prompt({
        title: "Where would you like to move the file?",
        inputType: "select",
        inputOptions: inputOptions,
        callback: function callback(result) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
            var opt, post, json, opts, updateFarm;
            return regeneratorRuntime.wrap(function _callee22$(_context22) {
              while (1) {
                switch (_context22.prev = _context22.next) {
                  case 0:
                    if (!result) {
                      _context22.next = 22;
                      break;
                    }

                    opt = {
                      command: "move",
                      destination: result
                    };
                    _context22.next = 4;
                    return _octoprint["default"].post(printer, "files/local/".concat(fullPath), opt);

                  case 4:
                    post = _context22.sent;

                    if (!(post.status === 404)) {
                      _context22.next = 9;
                      break;
                    }

                    _ui["default"].createAlert("error", "We could not find the location, does it exist?", 3000, "clicked");

                    _context22.next = 22;
                    break;

                  case 9:
                    if (!(post.status === 409)) {
                      _context22.next = 13;
                      break;
                    }

                    _ui["default"].createAlert("error", "There was a conflict, file already exists or is in use...", 3000, "clicked");

                    _context22.next = 22;
                    break;

                  case 13:
                    _context22.next = 15;
                    return post.json();

                  case 15:
                    json = _context22.sent;
                    opts = {
                      index: printer._id,
                      oldFolder: fullPath,
                      newFullPath: result,
                      folderName: json.path
                    };

                    _ui["default"].createAlert("warning", "Moving folder please wait...", 3000, "clicked");

                    _context22.next = 20;
                    return _octofarm["default"].post("printers/moveFolder", opts);

                  case 20:
                    updateFarm = _context22.sent;
                    setTimeout(function () {
                      FileManager.updateFileList(printer._id);

                      _ui["default"].createAlert("success", "Successfully moved your file...", 3000, "clicked");
                    }, 3000);

                  case 22:
                  case "end":
                    return _context22.stop();
                }
              }
            }, _callee22);
          }))();
        }
      });
    }
  }]);

  return FileActions;
}();

exports.FileActions = FileActions;

},{"../functions/calc.js":1,"../functions/dragAndDrop.js":2,"../functions/ui.js":4,"../octofarm.js":18,"../octoprint.js":19,"./clientQueue.js":7,"./fileSorting.js":11,"./printerSelect.js":15}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fileManager = _interopRequireDefault(require("./fileManager.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var FileSorting = /*#__PURE__*/function () {
  function FileSorting() {
    _classCallCheck(this, FileSorting);
  }

  _createClass(FileSorting, null, [{
    key: "saveSort",
    value: function saveSort(meta, reverse) {
      localStorage.setItem("fileSort", JSON.stringify({
        meta: meta,
        reverse: reverse
      }));
    }
  }, {
    key: "loadSort",
    value: function loadSort(printer, recursive) {
      var fileSortStorage = JSON.parse(localStorage.getItem("fileSort"));

      if (fileSortStorage !== null) {
        var reverse = fileSortStorage.reverse;

        if (fileSortStorage.meta === "file") {
          if (typeof recursive !== "undefined") {
            this.sortFileName(printer, reverse, recursive);
          } else {
            this.sortFileName(printer, reverse);
          }
        }

        if (fileSortStorage.meta === "date") {
          if (typeof recursive !== "undefined") {
            this.sortUploadDate(printer, reverse, recursive);
          } else {
            this.sortUploadDate(printer, reverse);
          }
        }

        if (fileSortStorage.meta === "time") {
          if (typeof recursive !== "undefined") {
            this.sortPrintTime(printer, reverse, recursive);
          } else {
            this.sortPrintTime(printer, reverse);
          }
        }
      } else {
        this.sortUploadDate(printer, true);
      }

      this.setListeners(printer);
    }
  }, {
    key: "setListeners",
    value: function setListeners(printer) {
      var _this = this;

      document.getElementById("sortFileNameUp").addEventListener("click", function (e) {
        _this.sortFileName(printer, true);
      });
      document.getElementById("sortFileNameDown").addEventListener("click", function (e) {
        _this.sortFileName(printer);
      });
      document.getElementById("sortPrintTimeUp").addEventListener("click", function (e) {
        _this.sortPrintTime(printer, true);
      });
      document.getElementById("sortPrintTimeDown").addEventListener("click", function (e) {
        _this.sortPrintTime(printer);
      });
      document.getElementById("sortDateUp").addEventListener("click", function (e) {
        _this.sortUploadDate(printer);
      });
      document.getElementById("sortDateDown").addEventListener("click", function (e) {
        _this.sortUploadDate(printer, true);
      });
    }
  }, {
    key: "sortFileName",
    value: function sortFileName(printer, reverse, recursive) {
      var sortHeader = document.getElementById("fileSortDropdownMenu");
      printer.fileList.fileList = _.sortBy(printer.fileList.fileList, [function (o) {
        return o.display;
      }]);
      printer.fileList.folderList = _.sortBy(printer.fileList.folderList, [function (o) {
        return o.name;
      }]);

      if (reverse) {
        printer.fileList.fileList = printer.fileList.fileList.reverse();
        printer.fileList.folderList = printer.fileList.folderList.reverse();
        sortHeader.innerHTML = '<i class="fas fa-sort-alpha-up"></i> File Name';
        this.saveSort("file", true);
      } else {
        sortHeader.innerHTML = '<i class="fas fa-sort-alpha-down"></i> File Name';
        this.saveSort("file", false);
      }

      _fileManager["default"].drawFiles(printer, recursive);
    }
  }, {
    key: "sortUploadDate",
    value: function sortUploadDate(printer, reverse, recursive) {
      var sortHeader = document.getElementById("fileSortDropdownMenu");
      printer.fileList.fileList = _.sortBy(printer.fileList.fileList, [function (o) {
        return o.uploadDate;
      }]);
      printer.fileList.folderList = _.sortBy(printer.fileList.folderList, [function (o) {
        return o.name;
      }]);

      if (reverse) {
        printer.fileList.fileList = printer.fileList.fileList.reverse();
        printer.fileList.folderList = printer.fileList.folderList.reverse();
        sortHeader.innerHTML = '<i class="fas fa-sort-numeric-down"></i> Upload Date';
        this.saveSort("date", true);
      } else {
        sortHeader.innerHTML = '<i class="fas fa-sort-numeric-up"></i> Upload Date';
        this.saveSort("date", false);
      }

      _fileManager["default"].drawFiles(printer, recursive);
    }
  }, {
    key: "sortPrintTime",
    value: function sortPrintTime(printer, reverse, recursive) {
      var sortHeader = document.getElementById("fileSortDropdownMenu");
      printer.fileList.fileList = _.sortBy(printer.fileList.fileList, [function (o) {
        return o.expectedPrintTime;
      }]);
      printer.fileList.folderList = _.sortBy(printer.fileList.folderList, [function (o) {
        return o.name;
      }]);

      if (reverse) {
        printer.fileList.fileList = printer.fileList.fileList.reverse();
        printer.fileList.folderList = printer.fileList.folderList.reverse();
        sortHeader.innerHTML = '<i class="fas fa-sort-numeric-up"></i> Print Time';
        this.saveSort("time", false);
      } else {
        sortHeader.innerHTML = '<i class="fas fa-sort-numeric-down"></i> Print Time';
        this.saveSort("time", true);
      }

      _fileManager["default"].drawFiles(printer, recursive);
    }
  }]);

  return FileSorting;
}();

exports["default"] = FileSorting;

},{"./fileManager.js":10}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _octoprint = _interopRequireDefault(require("../octoprint.js"));

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var PowerButton = /*#__PURE__*/function () {
  function PowerButton() {
    _classCallCheck(this, PowerButton);
  }

  _createClass(PowerButton, null, [{
    key: "revealBulkPower",
    value: function revealBulkPower() {
      var bulkPowerBtn = document.getElementById("bulkPowerBtn");

      if (bulkPowerBtn) {
        if (bulkPowerBtn.classList.contains("d-none")) {
          bulkPowerBtn.classList.remove("d-none");
        }
      }
    }
  }, {
    key: "powerButtons",
    value: function () {
      var _powerButtons = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(printer) {
        var divider, powerOffPrinter, powerOnnPrinter, status, powerTogglePrinter;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                divider = document.getElementById("printerDropDownMaker-" + printer._id);

                if (printer.powerSettings.powerOffURL !== "") {
                  if (divider.classList.contains("d-none")) {
                    divider.classList.remove("d-none");
                  }

                  powerOffPrinter = document.getElementById("printerPowerOff-" + printer._id);

                  if (powerOffPrinter.classList.contains("d-none")) {
                    powerOffPrinter.classList.remove("d-none");
                    powerOffPrinter.addEventListener("click", /*#__PURE__*/function () {
                      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(event) {
                        return regeneratorRuntime.wrap(function _callee2$(_context2) {
                          while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                bootbox.confirm({
                                  message: "Are you sure you would like to power down your printer?",
                                  buttons: {
                                    confirm: {
                                      label: "Yes",
                                      className: "btn-success"
                                    },
                                    cancel: {
                                      label: "No",
                                      className: "btn-danger"
                                    }
                                  },
                                  callback: function () {
                                    var _callback = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(result) {
                                      return regeneratorRuntime.wrap(function _callee$(_context) {
                                        while (1) {
                                          switch (_context.prev = _context.next) {
                                            case 0:
                                              if (!result) {
                                                _context.next = 10;
                                                break;
                                              }

                                              _context.next = 3;
                                              return _octoprint["default"].power(printer, printer.powerSettings.powerOffURL, "Power Off", printer.powerSettings.powerOffCommand);

                                            case 3:
                                              if (!(printer.powerSettings.powerStatusURL !== "")) {
                                                _context.next = 10;
                                                break;
                                              }

                                              _context.next = 6;
                                              return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                            case 6:
                                              _context.next = 8;
                                              return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                            case 8:
                                              _context.next = 10;
                                              return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                            case 10:
                                            case "end":
                                              return _context.stop();
                                          }
                                        }
                                      }, _callee);
                                    }));

                                    function callback(_x3) {
                                      return _callback.apply(this, arguments);
                                    }

                                    return callback;
                                  }()
                                });

                              case 1:
                              case "end":
                                return _context2.stop();
                            }
                          }
                        }, _callee2);
                      }));

                      return function (_x2) {
                        return _ref.apply(this, arguments);
                      };
                    }());
                  }
                }

                if (printer.powerSettings.powerOnURL !== "") {
                  if (divider.classList.contains("d-none")) {
                    divider.classList.remove("d-none");
                  }

                  powerOnnPrinter = document.getElementById("printerPowerOn-" + printer._id);

                  if (powerOnnPrinter.classList.contains("d-none")) {
                    powerOnnPrinter.classList.remove("d-none");
                    powerOnnPrinter.addEventListener("click", /*#__PURE__*/function () {
                      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(event) {
                        return regeneratorRuntime.wrap(function _callee3$(_context3) {
                          while (1) {
                            switch (_context3.prev = _context3.next) {
                              case 0:
                                _context3.next = 2;
                                return _octoprint["default"].power(printer, printer.powerSettings.powerOnURL, "Power On", printer.powerSettings.powerOnCommand);

                              case 2:
                                _context3.next = 4;
                                return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                              case 4:
                                _context3.next = 6;
                                return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                              case 6:
                                _context3.next = 8;
                                return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                              case 8:
                              case "end":
                                return _context3.stop();
                            }
                          }
                        }, _callee3);
                      }));

                      return function (_x4) {
                        return _ref2.apply(this, arguments);
                      };
                    }());
                  }
                }

                if (!(printer.powerSettings.powerStatusURL !== "")) {
                  _context6.next = 8;
                  break;
                }

                if (divider.classList.contains("d-none")) {
                  divider.classList.remove("d-none");
                }

                _context6.next = 7;
                return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

              case 7:
                status = _context6.sent;

              case 8:
                if (printer.powerSettings.powerToggleURL !== "") {
                  if (divider.classList.contains("d-none")) {
                    divider.classList.remove("d-none");
                  }

                  powerTogglePrinter = document.getElementById("printerPower-" + printer._id);

                  if (powerTogglePrinter) {
                    if (powerTogglePrinter.disabled === true) {
                      powerTogglePrinter.disabled = false;
                      powerTogglePrinter.addEventListener("click", /*#__PURE__*/function () {
                        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(event) {
                          var _status2;

                          return regeneratorRuntime.wrap(function _callee5$(_context5) {
                            while (1) {
                              switch (_context5.prev = _context5.next) {
                                case 0:
                                  if (!(document.getElementById("printerStatus-" + printer._id).style.color === "green" || document.getElementById("printerStatus-" + printer._id).style.color === "black")) {
                                    _context5.next = 4;
                                    break;
                                  }

                                  bootbox.confirm({
                                    message: "Are you sure you would like to power down your printer?",
                                    buttons: {
                                      confirm: {
                                        label: "Yes",
                                        className: "btn-success"
                                      },
                                      cancel: {
                                        label: "No",
                                        className: "btn-danger"
                                      }
                                    },
                                    callback: function () {
                                      var _callback2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(result) {
                                        var _status;

                                        return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                          while (1) {
                                            switch (_context4.prev = _context4.next) {
                                              case 0:
                                                if (!result) {
                                                  _context4.next = 10;
                                                  break;
                                                }

                                                _context4.next = 3;
                                                return _octoprint["default"].power(printer, printer.powerSettings.powerToggleURL, "Power Toggle", printer.powerSettings.powerToggleCommand);

                                              case 3:
                                                _status = _context4.sent;
                                                _context4.next = 6;
                                                return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                              case 6:
                                                _context4.next = 8;
                                                return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                              case 8:
                                                _context4.next = 10;
                                                return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                              case 10:
                                              case "end":
                                                return _context4.stop();
                                            }
                                          }
                                        }, _callee4);
                                      }));

                                      function callback(_x6) {
                                        return _callback2.apply(this, arguments);
                                      }

                                      return callback;
                                    }()
                                  });
                                  _context5.next = 13;
                                  break;

                                case 4:
                                  _context5.next = 6;
                                  return _octoprint["default"].power(printer, printer.powerSettings.powerToggleURL, "Power Toggle", printer.powerSettings.powerToggleCommand);

                                case 6:
                                  _status2 = _context5.sent;
                                  _context5.next = 9;
                                  return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                case 9:
                                  _context5.next = 11;
                                  return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                case 11:
                                  _context5.next = 13;
                                  return _octoprint["default"].getPowerStatus(printer, printer.powerSettings.powerStatusURL, printer.powerSettings.powerStatusCommand);

                                case 13:
                                case "end":
                                  return _context5.stop();
                              }
                            }
                          }, _callee5);
                        }));

                        return function (_x5) {
                          return _ref3.apply(this, arguments);
                        };
                      }());
                    }
                  }
                }

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function powerButtons(_x) {
        return _powerButtons.apply(this, arguments);
      }

      return powerButtons;
    }()
  }, {
    key: "applyBtn",
    value: function () {
      var _applyBtn = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(printer, element) {
        var restartOctoPrint, restartHost, shutdownHost, wakeButton;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (typeof printer.otherSettings.system !== "undefined" && !document.getElementById("printerPower-" + printer._id)) {
                  if (printer.otherSettings.system.commands.serverRestartCommand !== "" && printer.otherSettings.system.commands.serverRestartCommand !== null || printer.otherSettings.system.commands.systemRestartCommand !== "" && printer.otherSettings.system.commands.systemRestartCommand !== null || printer.otherSettings.system.commands.systemShutdownCommand !== "" && printer.otherSettings.system.commands.systemShutdownCommand !== null) {
                    document.getElementById(element + printer._id).innerHTML = PowerButton.printerPowerBtn(printer._id);

                    if (printer.otherSettings.system.commands.serverRestartCommand !== "" && printer.otherSettings.system.commands.serverRestartCommand !== null) {
                      restartOctoPrint = document.getElementById("printerRestartOctoPrint-" + printer._id);
                      restartOctoPrint.classList.remove("d-none");
                      restartOctoPrint.addEventListener("click", function (event) {
                        _octoprint["default"].system(printer, "restart");
                      });
                    }

                    if (printer.otherSettings.system.commands.systemRestartCommand !== "" && printer.otherSettings.system.commands.systemRestartCommand !== null) {
                      restartHost = document.getElementById("printerRestartHost-" + printer._id);
                      restartHost.classList.remove("d-none");
                      restartHost.addEventListener("click", function (event) {
                        _octoprint["default"].system(printer, "reboot");
                      });
                    }

                    if (printer.otherSettings.system.commands.systemShutdownCommand !== "" && printer.otherSettings.system.commands.systemShutdownCommand !== null) {
                      shutdownHost = document.getElementById("printerShutdownHost-" + printer._id);
                      shutdownHost.classList.remove("d-none");
                      shutdownHost.addEventListener("click", function (event) {
                        _octoprint["default"].system(printer, "shutdown");
                      });
                    }
                  }
                }

                if (printer.powerSettings !== null && !_.isEmpty(printer.powerSettings)) {
                  if (printer.powerSettings.powerOnURL !== "") {
                    if (!document.getElementById("printerPower-" + printer._id)) {
                      if (document.getElementById(element + printer._id)) {
                        document.getElementById(element + printer._id).innerHTML = PowerButton.printerPowerBtn(printer._id);
                        PowerButton.powerButtons(printer);
                      }
                    } else {
                      PowerButton.powerButtons(printer);
                    }
                  }

                  if (typeof printer.powerSettings.wol !== "undefined") {
                    if (printer.powerSettings.wol.enabled) {
                      if (printer.powerSettings.wol.ip === "" || printer.powerSettings.wol.port === "" || printer.powerSettings.wol.interval === "" || printer.powerSettings.wol.count === "") {
                        console.log("ISSUE WITH WAKE ON LAN SETTINGS");
                      } else {
                        wakeButton = document.getElementById("printerWakeHost-" + printer._id);

                        if (wakeButton.classList.contains("d-none")) {
                          wakeButton.classList.remove("d-none");
                          wakeButton.addEventListener("click", function (e) {
                            _octofarm["default"].post("printers/wakeHost", printer.powerSettings.wol);
                          });
                        }
                      }
                    }
                  }
                }

              case 2:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function applyBtn(_x7, _x8) {
        return _applyBtn.apply(this, arguments);
      }

      return applyBtn;
    }()
  }, {
    key: "printerPowerBtn",
    value: function printerPowerBtn(id) {
      return "\n      \n             <button title=\"Toggle your printers power\"\n                                    id=\"printerPower-".concat(id, "\"\n                                    class=\"btn btn-outline-danger btn-sm\" type=\"button\" disabled>\n                                <i id=\"printerStatus-").concat(id, "\" class=\"fas fa-power-off\" style=\"color: black;\"></i>\n                            </button>\n                            <button title=\"Other power actions\" type=\"button\" class=\"btn btn-sm btn-outline-danger dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                <span class=\"sr-only\">Toggle Dropdown</span>\n                            </button>\n                            <div class=\"dropdown-menu text-center dropdown-menu-right\">\n                                  <a id=\"printerPowerOn-").concat(id, "\" title=\"Turn on your printer\" class=\"dropdown-item d-none\" href=\"#\"><i class=\"textComplete fas fa-power-off\"></i> Power On Printer</a>\n                                <a id=\"printerPowerOff-").concat(id, "\" title=\"Turn off your printer\" class=\"dropdown-item d-none\" href=\"#\"><i class=\"textOffline fas fa-power-off\"></i> Power Off Printer</a>\n                          \n                                <div id=\"printerDropDownMaker-").concat(id, "\" class=\"dropdown-divider d-none\"></div>\n                                <a id=\"printerRestartOctoPrint-").concat(id, "\" title=\"Restart OctoPrint Service\" class=\"dropdown-item d-none\" href=\"#\"><i class=\"textActive fas fa-redo\"></i> Restart OctoPrint</a>\n                                <a id=\"printerRestartHost-").concat(id, "\" title=\"Reboot OctoPrint Host\" class=\"dropdown-item d-none\" href=\"#\"><i class=\"textActive fas fa-sync-alt\"></i> Reboot Host</a>\n                                <a id=\"printerWakeHost-").concat(id, "\" title=\"Wake up OctoPrint Host\" class=\"dropdown-item d-none\" href=\"#\"><i class=\"textComplete fas fa-power-off\"></i> Wake Host</a>\n                                <a id=\"printerShutdownHost-").concat(id, "\" title=\"Shutdown OctoPrint Host\" class=\"dropdown-item d-none\" href=\"#\"><i class=\"textOffline fas fa-power-off\"></i> Shutdown Host</a>\n                            </div>\n        </div>\n    ");
    }
  }]);

  return PowerButton;
}();

exports["default"] = PowerButton;

},{"../octofarm.js":18,"../octoprint.js":19}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _calc = _interopRequireDefault(require("../functions/calc.js"));

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

var _octoprint = _interopRequireDefault(require("../octoprint.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var chart = null;
var historyBarChart = null;
var historyPieChart = null;
var eventListener = false;
var currentPrinter = null;

var PrinterLogs = /*#__PURE__*/function () {
  function PrinterLogs() {
    _classCallCheck(this, PrinterLogs);
  }

  _createClass(PrinterLogs, null, [{
    key: "parseLogs",
    value: function () {
      var _parseLogs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(printer, url) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                fetch(url, {
                  method: "GET",
                  headers: {
                    "Content-Type": "application/json",
                    "X-Api-Key": printer.apikey,
                    Range: "bytes=-500000"
                  }
                }).then( /*#__PURE__*/function () {
                  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(resp) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            return _context.abrupt("return", resp.blob());

                          case 1:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x3) {
                    return _ref.apply(this, arguments);
                  };
                }()).then( /*#__PURE__*/function () {
                  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(blob) {
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            return _context2.abrupt("return", blob.text());

                          case 1:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  }));

                  return function (_x4) {
                    return _ref2.apply(this, arguments);
                  };
                }()).then( /*#__PURE__*/function () {
                  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(text) {
                    var octoPrintCount, splitText, i, colour;
                    return regeneratorRuntime.wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            octoPrintCount = document.getElementById("octoPrintCount");
                            _context3.next = 3;
                            return text.split(/(\r\n|\n|\r)/gm);

                          case 3:
                            splitText = _context3.sent;
                            splitText = splitText.reverse();

                            for (i = 0; i < splitText.length; i++) {
                              colour = null;

                              if (splitText[i].includes("INFO")) {
                                colour = "Info";
                              } else if (splitText[i].includes("WARNING")) {
                                colour = "Active";
                              } else if (splitText[i].includes("DEBUG")) {
                                colour = "Offline";
                              } else {
                                colour = "Idle";
                              } //Skip blank rows


                              if (splitText[i].length > 1 && splitText[i] !== " ") {
                                octologsLogsRows.insertAdjacentHTML("beforeend", "\n                                <tr class=\"".concat(colour, "\">\n                                  <th scope=\"row\">").concat(splitText.length - i, ": ").concat(splitText[i], "</th>\n                                </tr>\n                            "));
                              }
                            }

                            octoPrintCount.innerHTML = "(" + (splitText.length / 2).toFixed(0) + ")";

                          case 7:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3);
                  }));

                  return function (_x5) {
                    return _ref3.apply(this, arguments);
                  };
                }());

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function parseLogs(_x, _x2) {
        return _parseLogs.apply(this, arguments);
      }

      return parseLogs;
    }()
  }, {
    key: "loadLogs",
    value: function loadLogs(printer, connectionLogs) {
      currentPrinter = printer;
      document.getElementById("printerLogsLabel").innerHTML = "Printer Logs: " + printer.printerName;
      var printerRows = document.getElementById("printerConnectionLogRows");
      var printerErrorRows = document.getElementById("printerErrorLogRows");
      var octoprintLogsRows = document.getElementById("octoprintLogsRows");
      var octologsLogsRows = document.getElementById("octologsLogsRows");
      var logCount = document.getElementById("logCount");
      var octoCount = document.getElementById("octoCount");
      var errorCount = document.getElementById("errorCount");
      var octoPrintCount = document.getElementById("octoPrintCount");
      var tempCount = document.getElementById("tempCount");
      var tempChart = document.getElementById("printerTempChart");
      var logSelect = document.getElementById("octoPrintLogsSelect");
      logCount.innerHTML = '(<i class="fas fa-spinner fa-spin"></i>)';
      errorCount.innerHTML = "(<i class=\"fas fa-spinner fa-spin\"></i>)";
      tempCount.innerHTML = "(<i class=\"fas fa-spinner fa-spin\"></i>)";
      octoCount.innerHTML = "(<i class=\"fas fa-spinner fa-spin\"></i>)";
      octoPrintCount.innerHTML = "(<i class=\"fas fa-spinner fa-spin\"></i>)";
      printerRows.innerHTML = "";
      printerErrorRows.innerHTML = "";
      octoprintLogsRows.innerHTML = "";
      octologsLogsRows.innerHTML = ""; //tempChart.innerHTML = "";

      _octoprint["default"].get(printer, "/plugin/logging/logs").then( /*#__PURE__*/function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(res) {
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  return _context5.abrupt("return", res.json());

                case 1:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }));

        return function (_x6) {
          return _ref4.apply(this, arguments);
        };
      }()).then( /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(res) {
          var mainLog, orderedSelect, i;
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  mainLog = _.findIndex(res.files, function (o) {
                    return o.name === "octoprint.log";
                  });
                  orderedSelect = _.sortBy(res.files, [function (o) {
                    return o.name;
                  }]);
                  logSelect.innerHTML = "";

                  for (i = 0; i < orderedSelect.length; i++) {
                    logSelect.insertAdjacentHTML("beforeend", "\n            <option value=\"".concat(orderedSelect[i].refs.download, "\">").concat(orderedSelect[i].name, "</option>\n          "));
                  }

                  logSelect.value = res.files[mainLog].refs.download;
                  PrinterLogs.parseLogs(printer, res.files[mainLog].refs.download);

                case 6:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6);
        }));

        return function (_x7) {
          return _ref5.apply(this, arguments);
        };
      }())["catch"](function (e) {
        console.log(e);
      });

      if (_typeof(connectionLogs.currentOctoFarmLogs) === "object") {
        for (var i = 0; i < connectionLogs.currentOctoPrintLogs.length; i++) {
          tempCount.innerHTML = "(0)";
          var log = connectionLogs.currentOctoPrintLogs[i];
          octoprintLogsRows.insertAdjacentHTML("beforeend", "\n            <tr class=\"".concat(log.state, "\">\n              <th scope=\"row\">").concat(_calc["default"].dateClean(log.date), "</th>\n              <td>").concat(log.printer, "</td>\n              <td>").concat(log.pluginDisplay, "</td>\n              <td>").concat(log.message, "</td>\n            </tr>\n        "));
        }

        octoCount.innerHTML = "(".concat(connectionLogs.currentOctoPrintLogs.length, ")");

        for (var _i = 0; _i < connectionLogs.currentOctoFarmLogs.length; _i++) {
          var _log = connectionLogs.currentOctoFarmLogs[_i];
          printerRows.insertAdjacentHTML("beforeend", "\n            <tr class=\"".concat(_log.state, "\">\n              <th scope=\"row\">").concat(_calc["default"].dateClean(_log.date), "</th>\n              <td>").concat(_log.printer, "</td>\n              <td>").concat(_log.message, "</td>\n            </tr>\n      "));
        }

        logCount.innerHTML = "(".concat(connectionLogs.currentOctoFarmLogs.length, ")");

        for (var _i2 = 0; _i2 < connectionLogs.currentErrorLogs.length; _i2++) {
          var _log2 = connectionLogs.currentErrorLogs[_i2];
          printerErrorRows.insertAdjacentHTML("beforeend", "\n            <tr class=\"".concat(_log2.state, "\">\n              <th scope=\"row\">").concat(_log2.date, "</th>\n              <td>").concat(_log2.printer, "</td>\n              <td>").concat(_log2.message, "</td>\n            </tr>\n      "));
        }

        errorCount.innerHTML = "(".concat(connectionLogs.currentErrorLogs.length, ")");
        tempCount.innerHTML = "(0)";

        if (typeof connectionLogs.currentTempLogs !== "undefined" && connectionLogs.currentTempLogs.length > 0) {
          tempCount.innerHTML = "(".concat(connectionLogs.currentTempLogs[0].data.length, ")");
          var options = {
            chart: {
              type: "line",
              width: "100%",
              height: "500px",
              animations: {
                enabled: false
              },
              toolbar: {
                show: false
              },
              zoom: {
                enabled: false
              },
              background: "#303030"
            },
            colors: ["#fc2929", "#3e0b0b", "#00ffae", "#003b28", "#fff200", "#9b9300", "#5900ff", "#190147", "#e600ff", "#5d0167", "#ffb700", "#5a4001", "#93fc29", "#2d4c0d", "#ff0084", "#450124"],
            stroke: {
              curve: "smooth"
            },
            toolbar: {
              show: false
            },
            theme: {
              mode: "dark"
            },
            noData: {
              text: "Loading..."
            },
            series: [],
            yaxis: [{
              title: {
                text: "Temperature"
              },
              labels: {
                formatter: function formatter(value) {
                  if (value !== null) {
                    return "".concat(value, "\xB0C");
                  }
                }
              }
            }],
            xaxis: {
              //tickAmount: "dataPoints",
              type: "category",
              labels: {
                formatter: function formatter(value) {
                  var date = new Date(value);
                  var weekday = new Array(7);
                  weekday[0] = "Sun";
                  weekday[1] = "Mon";
                  weekday[2] = "Tue";
                  weekday[3] = "Wed";
                  weekday[4] = "Thu";
                  weekday[5] = "Fri";
                  weekday[6] = "Sat";
                  return weekday[date.getDay()] + " " + date.getDate() + " " + date.toLocaleTimeString();
                }
              }
            }
          };

          if (connectionLogs.currentTempLogs.length === 0) {
            tempChart.innerHTML = "<div class=''>No Records to Show</div>";
          }

          if (chart !== null) {
            chart.destroy();
            chart = new ApexCharts(tempChart, options);
            chart.render();
            chart.updateSeries(connectionLogs.currentTempLogs);
          } else {
            chart = new ApexCharts(tempChart, options);
            chart.render();
            chart.updateSeries(connectionLogs.currentTempLogs);
          }
        } else {
          tempChart.innerHTML = "<div class=''>No Records to Show</div>";
        }
      }

      if (!eventListener) {
        logSelect.addEventListener("change", function (e) {
          octologsLogsRows.innerHTML = "";
          octoPrintCount.innerHTML = "(<i class=\"fas fa-spinner fa-spin\"></i>)";
          PrinterLogs.parseLogs(printer, e.target.value);
        });
        document.getElementById("system-refresh-list").addEventListener("click", /*#__PURE__*/function () {
          var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(e) {
            var connectionLogs;
            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    console.log("Refresh!", currentPrinter.printerURL);
                    _context7.next = 3;
                    return _octofarm["default"].get("printers/connectionLogs/" + currentPrinter._id);

                  case 3:
                    connectionLogs = _context7.sent;
                    _context7.next = 6;
                    return connectionLogs.json();

                  case 6:
                    connectionLogs = _context7.sent;
                    PrinterLogs.loadLogs(currentPrinter, connectionLogs);

                  case 8:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7);
          }));

          return function (_x8) {
            return _ref6.apply(this, arguments);
          };
        }());
        eventListener = true;
      }
    }
  }, {
    key: "returnPrinterStatsTemplate",
    value: function () {
      var _returnPrinterStatsTemplate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(stats) {
        var display, noHistoryMessage, safeModeCheck, printerFirmware;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                display = "";
                noHistoryMessage = "";
                safeModeCheck = "";

                if (stats.octoPrintSystemInfo["octoprint.safe_mode"]) {
                  safeModeCheck = "\n      <i title=\"You are not in safe mode, all is fine\" class=\"fas fa-thumbs-down text-success\"></i>\n      ";
                } else {
                  safeModeCheck = "\n      <i title=\"Something wrong with your system? Detecting safe mode\" class=\"fas fa-thumbs-up text-success\"></i>\n      ";
                }

                if (stats.historyByDay.length === 0) {
                  noHistoryMessage = "<div class='row'>\n                    <div class=\"col-12\"><h5>Sorry but your printer currently has no history captured. Please run some prints to generate information here.</h5></div>\n                </div>";
                  display = "d-none";
                }

                printerFirmware = "Unknown";

                if (typeof stats.octoPrintSystemInfo["printer.firmware"] !== "undefined") {
                  printerFirmware = stats.octoPrintSystemInfo["printer.firmware"];
                }

                return _context8.abrupt("return", "\n            <div class=\"col-md-12 col-lg-4\">\n              <div class=\"card text-white bg-dark mb-3\" >\n                              <div class=\"card-header\">Information</div>\n                              <div class=\"card-body\">\n                              <p class=\"card-text\">\n                              <div class=\"row\">\n                                <div class=\"col-md-12 col-lg-6\">\n                                   <small><b>OctoPrint Version:</b> ".concat(stats.octoPrintSystemInfo["octoprint.version"], "</small><br>\n                                    <small><b>Printer Firmware:</b> ").concat(printerFirmware, "</small><br>\n                                    <small><b>Python Version:</b> ").concat(stats.octoPrintSystemInfo["env.python.version"], "</small>   <br>     \n                                       <small><b>pip Version:</b> ").concat(stats.octoPrintSystemInfo["env.python.pip"], "</small>        <br>                          \n                                </div>\n                                  <div class=\"col-md-12 col-lg-6\">\n                                   <small><b>OS Platform:</b> ").concat(stats.octoPrintSystemInfo["env.os.platform"], "</small><br>\n                                   <small><b>OS Cores:</b> ").concat(stats.octoPrintSystemInfo["env.hardware.cores"], "</small><br>\n                                    <small><b>OS ram:</b> ").concat(_calc["default"].bytes(stats.octoPrintSystemInfo["env.hardware.ram"]), "</small><br>\n                                     <small><b>Safe Mode Check:</b> ").concat(safeModeCheck, " </small><br>\n                                </div>\n                              </div>\n     \n                                </p>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-12 col-lg-4\">\n              <div class=\"card text-white bg-dark mb-3\" >\n                              <div class=\"card-header\">Utilisation</div>\n                              <div class=\"card-body\">\n                                <div class='card-text' id='printerUtilisationGraph'></div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-12 col-lg-4\">\n                <div class=\"card text-white bg-dark mb-3\">\n                              <div class=\"card-header\">Printer Issues</div>\n                           \n                              <div class=\"card-body\">\n                                  <div class=\"row\">\n                                        <div class=\"col-6\">\n                                                    \n                              <p class=\"card-text\">\n                                <span><i class=\"fas fa-square text-success\"></i> <b>Todays Errors</b> <br> ").concat(stats.printErrorDay, " </span>\n                                <br>\n                                <span><i class=\"fas fa-square text-secondary\"></i> <b>Previous Weeks Errors</b> <br> ").concat(stats.printerErrorWeek, "</span>\n                                <br>\n                                <span class=\"pb-4\"><i class=\"fas fa-square text-danger\"></i> <b>Total Errors</b><br> ").concat(stats.printErrorTotal, "</span>\n                                </p>\n                                        </div>\n                                        <div class=\"col-6\">\n                                                \n                                      <p class=\"card-text\">\n                                        <span><i class=\"fas fa-square text-success\"></i> <b>Todays Resends % </b> <br> ").concat(stats.printerResendRatioDaily, " </span>\n                                        <br>\n                                        <span><i class=\"fas fa-square text-secondary\"></i> <b>Previous Weeks Resends %</b> <br> ").concat(stats.printerResendRatioWeekly, "</span>\n                                        <br>\n                                        <span class=\"pb-4\"><i class=\"fas fa-square text-danger\"></i> <b>Total Resends %</b><br> ").concat(stats.printerResendRatioTotal, "</span>\n                                        </p>\n                                        </div>\n                                  </div>\n                          \n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-md-6 col-lg-3\">\n              <div class=\"card text-white bg-dark mb-3\">\n                <div class=\"card-header\">Age</div>\n                <div class=\"card-body\">\n                  <p class=\"card-text\">").concat(_calc["default"].generateTime(stats.timeTotal / 1000), "</p>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-6 col-lg-3\">\n              <div class=\"card text-white bg-dark mb-3\" >\n                <div class=\"card-header\">Total Cost</div>\n                <div class=\"card-body\">\n                  <p class=\"card-text\">                ").concat(_calc["default"].generateCost(stats.printerCostTotal), "</p>\n                </div>\n              </div>\n\n            \n            </div>\n            <div class=\"col-md-6 col-lg-3\">\n                          <div class=\"card text-white bg-dark mb-3\" >\n                <div class=\"card-header\">Total Filament Usage (g)</div>\n                <div class=\"card-body\">\n                  <p class=\"card-text\">                ").concat(_calc["default"].generateCost(stats.filamentUsedLengthTotal), "</p>\n                </div>\n              </div>\n\n            </div>\n            <div class=\"col-md-6 col-lg-3\">\n                               <div class=\"card text-white bg-dark mb-3\" >\n                <div class=\"card-header\">Total Filament Usage (m)</div>\n                <div class=\"card-body\">\n                  <p class=\"card-text\">                ").concat(_calc["default"].generateCost(stats.filamentUsedWeightTotal), "</p>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-12\">\n                ").concat(noHistoryMessage, "\n                <div class=\"").concat(display, "\" id='historyGraph'></div>\n            </div>\n            <div class=\"col-md-6 col-lg-3\">\n            \n              <div class=\"card text-white bg-dark mb-3\" >\n                <div class=\"card-header\">Printer Usage</div>\n                <div class=\"card-body\">\n                  <p class=\"card-text\">    <span><i class=\"fas fa-square text-success\"></i> <b>Active Hours </b> <br> ").concat(_calc["default"].generateTime(stats.activeTimeTotal / 1000), "</span>\n              <br>\n              <span><i class=\"fas fa-square text-secondary\"></i> <b>Idle Hours </b> <br> ").concat(_calc["default"].generateTime(stats.idleTimeTotal / 1000), "</span>\n              <br>\n              <span class=\"pb-4\"><i class=\"fas fa-square text-danger\"></i> <b>Offline Hours </b><br> ").concat(_calc["default"].generateTime(stats.offlineTimeTotal / 1000), "</span></p>\n                </div>\n              </div>\n            \n         \n            </div>\n            <div class=\"col-md-6 col-lg-3\">\n                          <div class=\"card text-white bg-dark mb-3\" >\n                <div class=\"card-header\">Print Totals for Today</div>\n                <div class=\"card-body\">\n                  <p class=\"card-text\">    <span><i class=\"fas fa-square text-success\"></i> <b>Successful</b> <br> ").concat(stats.printSuccessDay, "</span>\n              <br>\n              <span><i class=\"fas fa-square text-secondary\"></i> <b>Cancelled</b> <br> ").concat(stats.printCancelDay, "</span>\n              <br>\n              <span class=\"pb-4\"><i class=\"fas fa-square text-danger\"></i> <b>Failed</b><br> ").concat(stats.printErrorDay, "</span>\n            </p>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-6 col-lg-3\">\n                          <div class=\"card text-white bg-dark mb-3\" >\n                <div class=\"card-header\">Print Totals for Last Seven Days</div>\n                <div class=\"card-body\">\n                  <p class=\"card-text\"> \n                 <span><i class=\"fas fa-square text-success\"></i> <b>Successful </b> <br> ").concat(stats.printerSuccessWeek, "</span>\n\n                        <br>\n                        <span><i class=\"fas fa-square text-secondary\"></i> <b>Cancelled </b> <br> ").concat(stats.printerCancelWeek, "</span>\n                        <br>\n                        <span class=\"pb-4\"><i class=\"fas fa-square text-danger\"></i> <b>Failed </b><br> ").concat(stats.printerErrorWeek, "</span>\n            \n                  </p>\n                </div>\n              </div>\n\n            </div>\n            <div class=\"col-md-6 col-lg-3\">\n                          <div class=\"card text-white bg-dark mb-3\" >\n                <div class=\"card-header\">Print Totals All Time</div>\n                <div class=\"card-body\">\n                  <p class=\"card-text\">  \n                                 <span><i class=\"fas fa-square text-success\"></i> <b>Successful</b> <br> ").concat(stats.printSuccessTotal, "</span>\n                <br>\n                <span><i class=\"fas fa-square text-secondary\"></i> <b>Cancelled</b> <br> ").concat(stats.printCancelTotal, "</span>\n                <br>\n                <span class=\"pb-4\"><i class=\"fas fa-square text-danger\"></i> <b>Failed</b><br> ").concat(stats.printErrorTotal, "</span>\n                        \n                   </p>\n                </div>\n              </div>\n\n\n            </div>\n    \n            <div class=\"col-md-6 col-lg-3\">\n\n            </div>\n            </div>\n            <div class=\"col-md-6 col-lg-3\">\n            <div class=\"card text-white bg-dark mb-3\" >\n              <div class=\"card-header\">Filament Usage Today</div>\n              <div class=\"card-body\">\n                    <p class=\"card-text\">  \n                        <span><i class=\"fas fa-toilet-paper text-secondary\"></i> <b>Cost </b> <br> ").concat(_calc["default"].generateCost(stats.filamentCostDay), "</span>\n                      <br>\n                      <span><i class=\"fas fa-toilet-paper text-secondary\"></i> <b>Length </b> <br> ").concat(_calc["default"].generateCost(stats.filamentLengthDay), "</span>m\n                      <br>\n                      <span class=\"pb-4\"><i class=\"fas fa-toilet-paper text-secondary\"></i> <b>Weight </b><br> ").concat(_calc["default"].generateCost(stats.filamentWeightDay), "</span>g\n                              \n                         </p>\n              </div>\n            </div>\n            </div>\n            <div class=\"col-md-6 col-lg-3\">\n            <div class=\"card text-white bg-dark mb-3\" >\n              <div class=\"card-header\">Filament Usage Last Seven Days</div>\n              <div class=\"card-body\">\n                                    <p class=\"card-text\">  \n                        <span><i class=\"fas fa-toilet-paper text-secondary\"></i> <b>Cost </b> <br> ").concat(_calc["default"].generateCost(stats.filamentCostWeek), "</span>\n                      <br>\n                      <span><i class=\"fas fa-toilet-paper text-secondary\"></i> <b>Length </b> <br> ").concat(_calc["default"].generateCost(stats.filamentLengthWeek), "</span>m\n                      <br>\n                      <span class=\"pb-4\"><i class=\"fas fa-toilet-paper text-secondary\"></i> <b>Weight </b><br> ").concat(_calc["default"].generateCost(stats.filamentWeightWeek), "</span>g\n                              \n                         </p>\n              </div>\n            </div>\n            </div>\n            <div class=\"col-md-6 col-lg-3\">\n            <div class=\"card text-white bg-dark mb-3\" >\n                <div class=\"card-header\">Filament Usage All Time</div>\n                <div class=\"card-body\">\n                                      <p class=\"card-text\">  \n                        <span><i class=\"fas fa-toilet-paper text-secondary\"></i> <b>Cost </b> <br> ").concat(_calc["default"].generateCost(stats.filamentCostTotal), "</span>\n                      <br>\n                      <span><i class=\"fas fa-toilet-paper text-secondary\"></i> <b>Length </b> <br> ").concat(_calc["default"].generateCost(stats.filamentUsedLengthTotal), "</span>m\n                      <br>\n                      <span class=\"pb-4\"><i class=\"fas fa-toilet-paper text-secondary\"></i> <b>Weight </b><br> ").concat(_calc["default"].generateCost(stats.filamentUsedWeightTotal), "</span>g\n                              \n                         </p>\n                </div>\n              </div>\n     \n            </div>\n    "));

              case 8:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function returnPrinterStatsTemplate(_x9) {
        return _returnPrinterStatsTemplate.apply(this, arguments);
      }

      return returnPrinterStatsTemplate;
    }()
  }, {
    key: "loadStatistics",
    value: function () {
      var _loadStatistics = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(id) {
        var get, printerStatsWrapper, printerHistoryOptions, optionsUtilisation;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return _octofarm["default"].get("history/statistics/" + id);

              case 2:
                get = _context9.sent;
                _context9.next = 5;
                return get.json();

              case 5:
                get = _context9.sent;
                //Setup page
                printerStatsWrapper = document.getElementById("printerStatistics");
                printerStatsWrapper.innerHTML = "";
                _context9.next = 10;
                return this.returnPrinterStatsTemplate(get);

              case 10:
                printerStatsWrapper.innerHTML = _context9.sent;
                document.getElementById("printerStatisticsTitle").innerHTML = "Printer Statistics: " + get.printerName; //Check if graph is on DOM...

                printerHistoryOptions = {
                  chart: {
                    type: "bar",
                    width: "100%",
                    height: "250px",
                    stacked: true,
                    stroke: {
                      show: true,
                      curve: "smooth",
                      lineCap: "butt",
                      width: 1,
                      dashArray: 0
                    },
                    animations: {
                      enabled: true
                    },
                    plotOptions: {
                      bar: {
                        horizontal: false
                      }
                    },
                    toolbar: {
                      show: false
                    },
                    zoom: {
                      enabled: false
                    },
                    background: "#303030"
                  },
                  dataLabels: {
                    enabled: false,
                    background: {
                      enabled: true,
                      foreColor: "#000",
                      padding: 1,
                      borderRadius: 2,
                      borderWidth: 1,
                      borderColor: "#fff",
                      opacity: 0.9
                    },
                    formatter: function formatter(val, opts) {
                      if (val !== null) {
                        return val.toFixed(0) + "g";
                      }
                    }
                  },
                  colors: ["#00bc8c", "#f39c12", "#e74c3c", "#88ff00", "#00ff88", "#00b7ff", "#4400ff", "#8000ff", "#ff00f2"],
                  toolbar: {
                    show: false
                  },
                  theme: {
                    mode: "dark"
                  },
                  noData: {
                    text: "Loading..."
                  },
                  series: [],
                  yaxis: [{
                    title: {
                      text: "Count"
                    },
                    seriesName: "Success",
                    labels: {
                      formatter: function formatter(val) {
                        if (val !== null) {
                          return val.toFixed(0);
                        }
                      }
                    }
                  }, {
                    title: {
                      text: "Count"
                    },
                    seriesName: "Success",
                    labels: {
                      formatter: function formatter(val) {
                        if (val !== null) {
                          return val.toFixed(0);
                        }
                      }
                    },
                    show: false
                  }, {
                    title: {
                      text: "Count"
                    },
                    seriesName: "Success",
                    labels: {
                      formatter: function formatter(val) {
                        if (val !== null) {
                          return val.toFixed(0);
                        }
                      }
                    },
                    show: false
                  }],
                  xaxis: {
                    type: "datetime",
                    tickAmount: 10,
                    labels: {
                      formatter: function formatter(value, timestamp) {
                        var dae = new Date(timestamp);
                        return dae.toLocaleDateString(); // The formatter function overrides format property
                      }
                    }
                  }
                };

                if (historyBarChart !== null) {
                  historyBarChart.destroy();
                  historyBarChart = new ApexCharts(document.querySelector("#historyGraph"), printerHistoryOptions);
                  historyBarChart.render();
                  historyBarChart.updateSeries(get.historyByDay);
                } else {
                  historyBarChart = new ApexCharts(document.querySelector("#historyGraph"), printerHistoryOptions);
                }

                optionsUtilisation = {
                  chart: {
                    type: "donut",
                    width: "100%",
                    height: "100%",
                    animations: {
                      enabled: true
                    },
                    background: "#303030"
                  },
                  theme: {
                    mode: "dark"
                  },
                  plotOptions: {
                    pie: {
                      expandOnClick: false,
                      dataLabels: {
                        offset: 10,
                        minAngleToShowLabel: 15
                      }
                    }
                  },
                  stroke: {
                    show: false
                  },
                  tooltip: {
                    y: {
                      formatter: function formatter(val) {
                        return "".concat(Math.round(val * 10) / 10, "%");
                      }
                    }
                  },
                  noData: {
                    text: "Loading..."
                  },
                  dataLabels: {
                    enabled: false
                  },
                  series: [],
                  labels: ["Active", "Idle", "Offline"],
                  colors: ["#00bc8c", "#444", "#e74c3c"],
                  legend: {
                    show: true,
                    showForSingleSeries: false,
                    showForNullSeries: true,
                    showForZeroSeries: true,
                    position: "bottom",
                    horizontalAlign: "center",
                    floating: false,
                    fontSize: "11px",
                    fontFamily: "Helvetica, Arial",
                    fontWeight: 400,
                    formatter: undefined,
                    inverseOrder: false,
                    width: undefined,
                    height: undefined,
                    tooltipHoverFormatter: undefined,
                    offsetX: -25,
                    offsetY: 0,
                    labels: {
                      colors: undefined,
                      useSeriesColors: false
                    },
                    markers: {
                      width: 9,
                      height: 9,
                      strokeWidth: 0,
                      strokeColor: "#fff",
                      fillColors: undefined,
                      radius: 1,
                      customHTML: undefined,
                      onClick: undefined,
                      offsetX: 0,
                      offsetY: 0
                    },
                    itemMargin: {
                      horizontal: 1,
                      vertical: 0
                    },
                    onItemClick: {
                      toggleDataSeries: false
                    },
                    onItemHover: {
                      highlightDataSeries: false
                    }
                  }
                };

                if (historyPieChart !== null) {
                  historyPieChart.destroy();
                  historyPieChart = new ApexCharts(document.querySelector("#printerUtilisationGraph"), optionsUtilisation);
                  historyPieChart.render();
                  historyPieChart.updateSeries(get.printerUtilisation);
                } else {
                  historyPieChart = new ApexCharts(document.querySelector("#printerUtilisationGraph"), optionsUtilisation);
                }

                historyPieChart.render();
                historyPieChart.updateSeries(get.printerUtilisation);
                historyBarChart.render();
                historyBarChart.updateSeries(get.historyByDay);

              case 20:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function loadStatistics(_x10) {
        return _loadStatistics.apply(this, arguments);
      }

      return loadStatistics;
    }()
  }]);

  return PrinterLogs;
}();

exports["default"] = PrinterLogs;

},{"../functions/calc.js":1,"../octofarm.js":18,"../octoprint.js":19}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _octoprint = _interopRequireDefault(require("../octoprint.js"));

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

var _calc = _interopRequireDefault(require("../functions/calc.js"));

var _ui = _interopRequireDefault(require("../functions/ui.js"));

var _fileManager = _interopRequireDefault(require("./fileManager.js"));

var _filamentGrab = require("./filamentGrab.js");

var _fileSorting = _interopRequireDefault(require("../modules/fileSorting.js"));

var _customScripts = _interopRequireDefault(require("./customScripts.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var currentIndex = 0;
var controlDropDown = false;
var currentPrinter = null;
var refreshCounter = 5000;
$("#printerManagerModal").on("hidden.bs.modal", function (e) {
  // Fix for mjpeg stream not ending when element removed...
  if (document.getElementById("printerControlCamera")) {
    document.getElementById("printerControlCamera").src = "";
  }
});
$("#connectionModal").on("hidden.bs.modal", function (e) {
  if (document.getElementById("connectionAction")) {
    document.getElementById("connectionAction").remove();
  }
});

var PrinterManager = /*#__PURE__*/function () {
  function PrinterManager() {
    _classCallCheck(this, PrinterManager);
  }

  _createClass(PrinterManager, null, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(index, printers, printerControlList) {
        var id, printerDrop, filamentDropDown, done, elements, _id, _printerDrop, _elements;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(index !== "")) {
                  _context.next = 20;
                  break;
                }

                if (document.getElementById("printerControlCamera")) {
                  document.getElementById("printerControlCamera").src = "";
                }

                currentIndex = index;
                id = _.findIndex(printers, function (o) {
                  return o._id == index;
                });
                currentPrinter = printers[id]; //Load the printer dropdown

                if (!controlDropDown) {
                  printerDrop = document.getElementById("printerSelection");
                  printerDrop.innerHTML = "";
                  printerControlList.forEach(function (list) {
                    if (list.state.category !== "Offline") {
                      printerDrop.insertAdjacentHTML("beforeend", "\n                  <option value=\"".concat(list.printerID, "\" selected>").concat(list.printerName, "</option>\n              "));
                    }
                  });
                  printerDrop.value = currentPrinter._id;
                  printerDrop.addEventListener("change", function (event) {
                    if (document.getElementById("printerControls")) {
                      document.getElementById("printerControls").innerHTML = "";
                    }

                    document.getElementById("pmStatus").innerHTML = "<i class=\"fas fa-spinner fa-spin\"></i>";
                    document.getElementById("pmStatus").className = "btn btn-secondary mb-2"; //Load Connection Panel

                    document.getElementById("printerPortDrop").innerHTML = "";
                    document.getElementById("printerBaudDrop").innerHTML = "";
                    document.getElementById("printerProfileDrop").innerHTML = "";
                    document.getElementById("printerConnect").innerHTML = "";
                    PrinterManager.init(event.target.value, printers, printerControlList);
                  });
                  controlDropDown = true;
                }

                _context.next = 8;
                return (0, _filamentGrab.returnDropDown)();

              case 8:
                filamentDropDown = _context.sent;
                _context.next = 11;
                return PrinterManager.loadPrinter(currentPrinter, printerControlList, filamentDropDown);

              case 11:
                done = _context.sent;
                elements = PrinterManager.grabPage();
                elements.terminal.terminalWindow.innerHTML = "";
                elements.printerControls["step" + currentPrinter.stepRate].className = "btn btn-dark active";
                PrinterManager.applyState(currentPrinter, elements);
                PrinterManager.applyTemps(currentPrinter, elements);
                PrinterManager.applyListeners(elements, printers, filamentDropDown);
                _context.next = 33;
                break;

              case 20:
                if (!document.getElementById("terminal")) {
                  _context.next = 33;
                  break;
                }

                _id = _.findIndex(printers, function (o) {
                  return o._id == currentIndex;
                });
                currentPrinter = printers[_id];
                _printerDrop = document.getElementById("printerSelection");
                _printerDrop.innerHTML = "";
                printerControlList.forEach(function (list) {
                  if (list.state.category !== "Offline") {
                    _printerDrop.insertAdjacentHTML("beforeend", "\n                  <option value=\"".concat(list.printerID, "\" selected>").concat(list.printerName, "</option>\n              "));
                  }
                });
                _printerDrop.value = currentPrinter._id;
                _context.next = 29;
                return PrinterManager.grabPage();

              case 29:
                _elements = _context.sent;
                PrinterManager.applyState(currentPrinter, _elements);
                PrinterManager.applyTemps(currentPrinter, _elements);
                document.getElementById("printerManagerModal").style.overflow = "auto";

              case 33:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function init(_x, _x2, _x3) {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "loadPrinter",
    value: function () {
      var _loadPrinter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(printer, printerControlList, filamentDropDown) {
        var printerPort, printerBaud, printerProfile, printerConnect, flipH, flipV, rotate90, systemSettings, controlSettings, camURL, camTitle, printerToolTemps, keys, t, _loop, i;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                printerPort = document.getElementById("printerPortDrop");
                printerBaud = document.getElementById("printerBaudDrop");
                printerProfile = document.getElementById("printerProfileDrop");
                printerConnect = document.getElementById("printerConnect");
                printerPort.innerHTML = "\n    <div class=\"input-group mb-1\"> <div class=\"input-group-prepend\"> <label class=\"input-group-text bg-secondary text-light\" for=\"dashboardSerialPort\">Port:</label> </div> <select class=\"custom-select bg-secondary text-light\" id=\"pmSerialPort\"></select></div>\n    ";
                printerBaud.innerHTML = "\n    <div class=\"input-group mb-1\"> <div class=\"input-group-prepend\"> <label class=\"input-group-text bg-secondary text-light\" for=\"dashboardBaudrate\">Baudrate:</label> </div> <select class=\"custom-select bg-secondary text-light\" id=\"pmBaudrate\"></select></div>\n    ";
                printerProfile.innerHTML = "\n    <div class=\"input-group mb-1\"> <div class=\"input-group-prepend\"> <label class=\"input-group-text bg-secondary text-light\" for=\"dashboardPrinterProfile\">Profile:</label> </div> <select class=\"custom-select bg-secondary text-light\" id=\"pmProfile\"></select></div>\n    ";
                printer.connectionOptions.baudrates.forEach(function (baud) {
                  document.getElementById("pmBaudrate").insertAdjacentHTML("beforeend", "<option value=\"".concat(baud, "\">").concat(baud, "</option>"));
                });

                if (printer.connectionOptions.baudratePreference != null) {
                  document.getElementById("pmBaudrate").value = printer.connectionOptions.baudratePreference;
                }

                printer.connectionOptions.ports.forEach(function (port) {
                  document.getElementById("pmSerialPort").insertAdjacentHTML("beforeend", "<option value=\"".concat(port, "\">").concat(port, "</option>"));
                });

                if (printer.connectionOptions.portPreference != null) {
                  document.getElementById("pmSerialPort").value = printer.connectionOptions.portPreference;
                }

                printer.connectionOptions.printerProfiles.forEach(function (profile) {
                  document.getElementById("pmProfile").insertAdjacentHTML("beforeend", "<option value=\"".concat(profile.id, "\">").concat(profile.name, "</option>"));
                });

                if (printer.connectionOptions.printerProfilePreference != null) {
                  document.getElementById("pmProfile").value = printer.connectionOptions.printerProfilePreference;
                }

                if (printer.printerState.state === "Disconnected" || printer.printerState.state === "Error!") {
                  printerConnect.innerHTML = "<center> <button id=\"pmConnect\" class=\"btn btn-success inline\" value=\"connect\">Connect</button><a title=\"Open your Printers Web Interface\" id=\"pmWebBtn\" type=\"button\" class=\"tag btn btn-info ml-1\" target=\"_blank\" href=\"" + printer.printerURL + "\" role=\"button\"><i class=\"fas fa-globe-europe\"></i></a><div id=\"powerBtn-" + printer._id + "\" class=\"btn-group ml-1\"></div></center>";
                  document.getElementById("pmSerialPort").disabled = false;
                  document.getElementById("pmBaudrate").disabled = false;
                  document.getElementById("pmProfile").disabled = false;
                } else {
                  printerConnect.innerHTML = "<center> <button id=\"pmConnect\" class=\"btn btn-danger inline\" value=\"disconnect\">Disconnect</button><a title=\"Open your Printers Web Interface\" id=\"pmWebBtn\" type=\"button\" class=\"tag btn btn-info ml-1\" target=\"_blank\" href=\"" + printer.printerURL + "\" role=\"button\"><i class=\"fas fa-globe-europe\"></i></a><div id=\"pmPowerBtn-" + printer._id + "\" class=\"btn-group ml-1\"></div></center>";
                  document.getElementById("pmSerialPort").disabled = true;
                  document.getElementById("pmBaudrate").disabled = true;
                  document.getElementById("pmProfile").disabled = true;
                } //setup power btn
                // await PowerButton.applyBtn(printer, "pmPowerBtn-");


                flipH = "";
                flipV = "";
                rotate90 = "";

                if (printer.otherSettings !== null) {
                  if (printer.otherSettings.webCamSettings.flipH) {
                    flipH = "rotateY(180deg)";
                  }

                  if (printer.otherSettings.webCamSettings.flipV) {
                    flipV = "rotateX(180deg)";
                  }

                  if (printer.otherSettings.webCamSettings.rotate90) {
                    rotate90 = "rotate(90deg)";
                  }
                }

                _context2.next = 21;
                return _octofarm["default"].get("settings/client/get");

              case 21:
                systemSettings = _context2.sent;
                _context2.next = 24;
                return systemSettings.json();

              case 24:
                systemSettings = _context2.sent;
                controlSettings = systemSettings.controlSettings; //Load tools

                if (typeof controlSettings !== "undefined" && controlSettings.filesTop) {
                  document.getElementById("printerControls").innerHTML = "\n          <div class=\"row\">\n              <div class=\"col-lg-3\">\n             <div class=\"row\">\n                <div class=\"col-12\">\n                <center>\n                <h5>Operation</h5>\n            </center>\n            <hr>\n  \n            <center>\n            <button id=\"pmPrintStart\" type=\"button\" class=\"btn btn-success\" role=\"button\"><i class=\"fas fa-print\"></i> Print</button>\n            <button id=\"pmPrintPause\" type=\"button\" class=\"btn btn-light\" role=\"button\" disabled><i class=\"fas fa-pause\"></i> Pause</button>\n            <button id=\"pmPrintRestart\" type=\"button\" class=\"btn btn-danger\" role=\"button\"><i class=\"fas fa-undo\"></i> Restart</button>\n            <button id=\"pmPrintResume\" type=\"button\" class=\"btn btn-success\" role=\"button\"><i class=\"fas fa-redo\"></i> Resume</button>\n            <button id=\"pmPrintStop\" type=\"button\" class=\"btn btn-danger\" disabled><i class=\"fas fa-square\"></i> Cancel</button>\n            </center></div></div>\n                 <div id=\"cameraRow\" class=\"row\">\n                      <div class=\"col-12\">\n                            <center>\n                                <h5>Camera</h5>\n                            </center>\n                            <hr>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div id=\"cameraCol\" class=\"col-12\">\n                          <img style=\"transform: ".concat(flipH, " ").concat(flipV, " ").concat(rotate90, ";\" id=\"printerControlCamera\" width=\"100%\" src=\"\"/>\n                        </div>\n                    </div>\n                                  <div class=\"row\">\n                    <div class=\"col-9\">\n                        <center>\n                            <h5>X/Y</h5>\n                        </center>\n                        <hr>\n                    </div>\n                    <div class=\"col-3\">\n                        <center>\n                            <h5>Z</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcYpos\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-up\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZpos\"type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-up\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-left\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXYhome\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-home\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXpos\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-right\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZhome\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-home\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcYneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-down\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-down\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <div id=\"pcAxisSteps\" class=\"btn-group\" role=\"group\">\n                                <button id=\"pcAxisSteps01\" type=\"button\" class=\"btn btn-light\" value=\"01\">0.1</button>\n                                <button id=\"pcAxisSteps1\" type=\"button\" class=\"btn btn-light\" value=\"1\">1</button>\n                                <button id=\"pcAxisSteps10\" type=\"button\" class=\"btn btn-light\" value=\"10\">10</button>\n                                <button id=\"pcAxisSteps100\" type=\"button\" class=\"btn btn-light\" value=\"100\">100</button>\n                            </div>\n                        </center>\n                    </div>\n                </div>\n                              <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Extruder</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                                      <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <div class=\"input-group\">\n                                <input id=\"pcExtruder\" type=\"number\" class=\"form-control\" placeholder=\"0\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\">\n                                <div class=\"input-group-append\">\n                                    <span class=\"input-group-text\" id=\"basic-addon2\">mm</span>\n                                </div>\n                            </div>\n                        </center>\n                    </div>\n                <div class=\"row\">\n                    <div class=\"col-12 text-center\">\n                        <center><button id=\"pcExtrude\" class=\"btn btn-light\" type=\"submit\"><i class=\"fas fa-redo\"></i> Extrude</button> <button id=\"pcRetract\" class=\"btn btn-light\" type=\"submit\"><i class=\"fas fa-undo\"></i> Retract</button></center>\n                </div>\n            </div>\n            </div>\n                  <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Feed/Flow</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                  <div class=\"row\">\n                    <div class=\"col-10 col-lg-8 col-xl-8\">\n                        <label for=\"pcFeed\">Feed Rate: <span id=\"pcFeedValue\">").concat(printer.feedRate, "%</span></label>\n                        <input type=\"range\" class=\"octoRange custom-range\" min=\"10\" max=\"300\" step=\"1\" id=\"pcFeed\" value=\"").concat(printer.feedRate, "\">\n                    </div>\n                    <div class=\"col-2 col-lg-4 col-xl-4\">\n                        <button id=\"pcFeedRate\" type=\"button\" class=\"btn btn-light\">Update</button>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-10 col-lg-8 col-xl-8\">\n                        <label for=\"pcFlow\">Flow Rate: <span id=\"pcFlowValue\">").concat(printer.flowRate, "%</span></label>\n                        <input type=\"range\" class=\"octoRange custom-range\" min=\"75\" max=\"125\" step=\"1\" id=\"pcFlow\" value=\"").concat(printer.flowRate, "\">\n                    </div>\n                    <div class=\"col-2 col-lg-4 col-xl-4\">\n                        <button id=\"pcFlowRate\" type=\"button\" class=\"btn btn-light\">Update</button>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Motors / Fans</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                  <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center><button id=\"pcMotorTog\" class=\"btn btn-light\" type=\"submit\">Motors Off</button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                    <label for=\"pcFlow\">Fan Percent: <span id=\"pcFanPercent\">100%</span></label>\n                    <input type=\"range\" class=\"octoRange custom-range\" min=\"0\" max=\"100\" step=\"1\" id=\"pcFanPercent\" value=\"100\">\n                        <center><button id=\"pcFanOn\" class=\"btn btn-light\" type=\"submit\">Set Fans</button> <button id=\"pcFanOff\" class=\"btn btn-light\" type=\"submit\">Fans Off</button></center>\n                    </div>\n                </div>\n              </div>\n              \n              <div class=\"col-lg-9 pt-0\">\n                  <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Files</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row bg-secondary rounded-top\">\n                <div class=\"col-12\">\n                     <h5 class=\"float-left  mb-0\">\n                      <button id=\"printerFileCount\" type=\"button\" class=\"btn btn-secondary float-right d-block\" href=\"#\" aria-expanded=\"false\" disabled=\"\">\n                        <i class=\"fas fa-file\"></i> Loading... <i class=\"fas fa-folder\"></i> Loading...\n                      </button>\n                      <button id=\"printerStorage\" type=\"button\" class=\"btn btn-secondary float-right d-block\" href=\"#\" aria-expanded=\"false\" disabled=\"\">\n  \n                        <i class=\"fas fa-hdd\"></i> Loading...\n                      </button>\n                    </h5>\n                    <h5 class=\"float-left mb-0\">\n                      <button type=\"button\" class=\"btn btn-secondary float-right d-block\" href=\"#\" aria-expanded=\"false\" disabled=\"\">\n                        <i class=\"fas fa-file-code\"></i> Files: <span id=\"currentFolder\">local</span>/\n                      </button>\n                    </h5>\n                    <div class=\"btn btn-secondary form-group float-right  mb-0\">\n                      <form class=\"form-inline\">\n                        <div class=\"form-group\">\n                          <label for=\"searchFiles\">\n                            <i class=\"fas fa-search pr-1\"></i>\n                          </label>\n                          <input id=\"searchFiles\" type=\"text\" placeholder=\"File Search...\" class=\"search-control search-control-underlined\">\n                        </div>\n                      </form>\n                    </div>\n                   </div>\n                  </div>\n                  <div class=\"row bg-secondary rounded-bottom\">\n                    <div class=\"col-lg-2\">\n                      <i class=\"fas fa-file-upload ml-2 mb-1\"></i><span id=\"fileCounts-").concat(printer._id, "\"> 0 </span>\n                    </div>\n                    <div class=\"col-lg-10\">\n                      <div class=\"progress\">\n                        <div id=\"fileProgress-").concat(printer._id, "\" class=\"progress-bar progress-bar-striped bg-warning\" role=\"progressbar\" style=\"width: 0%\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n                          0%\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"row mb-1\">\n                      <div class=\"col-12\">\n                       <button id=\"fileBackBtn\" type=\"button\" class=\"btn btn-success float-right\">\n                        <i class=\"fas fa-chevron-left\"></i> Back\n                      </button>\n                      <!-- Split dropright button -->\n                      <div class=\"float-right mr-3 btn-group\">\n                          <div id=\"fileSortDropdownMenu\" class=\"btn bg-secondary\">Sort</div>\n                          <button type=\"button\" class=\"btn btn-secondary dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            <span class=\"sr-only\">Toggle Dropdown</span>\n                          </button>\n                          <div class=\"dropdown-menu\">\n                            \n                       <a class=\"dropdown-item\" id=\"sortFileNameDown\"><i class=\"fas fa-sort-alpha-down\"></i> File Name</a>\n  \n                      <a class=\"dropdown-item\" id=\"sortFileNameUp\"><i class=\"fas fa-sort-alpha-up\"></i> File Name</a>\n                             <div class=\"dropdown-divider\"></div>\n                      <a class=\"dropdown-item\" id=\"sortPrintTimeDown\"><i class=\"fas fa-sort-numeric-down\"></i> Print Time</a>\n  \n                      <a class=\"dropdown-item\" id=\"sortPrintTimeUp\"><i class=\"fas fa-sort-numeric-up\"></i> Print Time</a>\n                             <div class=\"dropdown-divider\"></div>\n                      <a class=\"dropdown-item\" id=\"sortDateDown\"><i class=\"fas fa-sort-numeric-down\"></i> Upload Date</a>\n  \n                      <a class=\"dropdown-item\" id=\"sortDateUp\"><i class=\"fas fa-sort-numeric-up\"></i> Upload Date</a>\n                          </div>\n                        </div>\n\n                        <label class=\"btn btn-success float-left mr-1 mb-0 bg-colour-1\" for=\"fileUploadBtn\"><i class=\"fas fa-file-import\"></i> Upload File(s)</label>\n                        <input id=\"fileUploadBtn\" multiple accept=\".gcode,.gco,.g\" type=\"file\" class=\"btn btn-success float-left bg-colour-1\" id=\"uploadFileBtn\">\n                        <label class=\"btn btn-info float-left mr-1 mb-0 bg-colour-2\" for=\"fileUploadPrintBtn\"><i class=\"fas fa-file-import\"></i> Upload and Print</label>\n                        <input id=\"fileUploadPrintBtn\" accept=\".gcode,.gco,.g\" type=\"file\" class=\"btn btn-success float-left bg-colour-2\" id=\"uploadFileBtn\">\n                      <button\n                        id=\"createFolderBtn\"\n                        type=\"button\"\n                        class=\"btn btn-warning float-left mr-1 mb-0 bg-colour-3\"\n                        data-toggle=\"collapse\"\n                        href=\"#createFolder\"\n                        role=\"button\"\n                        aria-expanded=\"false\"\n                        aria-controls=\"createFolder\"\n                      >\n                        <i class=\"fas fa-folder-plus\"></i> Create Folder\n                      </button>\n                      <button id=\"fileReSync\" type=\"button\" class=\"btn btn-primary mb-0 bg-colour-4\">\n                        <i class=\"fas fa-sync\"></i> Re-Sync\n                      </button>\n                      </div>\n  \n                  </div>\n  \n                      <div id=\"fileList-").concat(printer._id, "\" class=\"list-group\" style=\"height:500px; min-height:500px;max-height:500px; overflow-y:scroll;\">\n  \n                      </div>\n              </div>\n          </div>\n              <div class=\"row\">\n                  <div class=\"col-lg-12 col-xl-6\">\n                    <div class=\"col-12\">\n                                      <center>\n                                          <h5>Print Status</h5>\n                                      </center>\n                                      <hr>\n                                  </div>\n                                  <div class=\"col-12\">\n                                                                  <div class=\"progress mb-2\">\n                                    <div id=\"pmProgress\" class=\"progress-bar\" role=\"progressbar progress-bar-striped\" style=\"width:100%\" aria-valuenow=\"100%\" aria-valuemin=\"0\" aria-valuemax=\"100\">Loading...\n                                    </div>\n                                  </div>\n                </div>\n                <div class=\"row\">\n                <div id=\"fileThumbnail\" class=\"col-12\">\n  \n                </div>\n                <div class=\"col-12\">\n                <center>\n                                 <b class=\"mb-1\">File Name: </b><br><p title=\"Loading...\" class=\"tag mb-1\" id=\"pmFileName\">Loading...</p>\n  </center>\n  </div>\n                  <div class=\"col-12\">\n                <center>\n                                 <b id=\"resentTitle\" class=\"mb-1 d-none\">Resend Statistics: </b><br><p title=\"Current job resend ratio\" class=\"tag mb-1 d-none\" id=\"printerResends\">Loading...</p>\n  </center>\n  </div>\n                  <div class=\"col-lg-12 col-xl-6\">\n                     <center>\n                  <b>Expected Completion Date: </b><p class=\"mb-1\" id=\"pmExpectedCompletionDate\">Loading...</p>\n  \n                    <b>Print Time Remaining: </b><p class=\"mb-1\" id=\"pmTimeRemain\">Loading...</p>\n                    <b>Print Time Elapsed: </b><p class=\"mb-1\" id=\"pmTimeElapsed\">Loading...</p>\n                    <b>Current Z: </b><p class=\"mb-1\" id=\"pmCurrentZ\">Loading...</p>\n                    <b>Expected Job Cost: </b><p class=\"mb-1\" id=\"pmJobCosts\">Loading...</p></center>\n              </div>\n                  <div class=\"col-lg-12 col-xl-6\">\n                                 <center>\n                   <b>Expected Print Time: </b><p class=\"mb-1\" id=\"pmExpectedTime\">Loading...</p>\n          <b class=\"mb-1\">Expected Units: </b><br><p class=\"tag mb-1\" id=\"pmExpectedWeight\">Loading...</p>\n          <b class=\"mb-1\">Expected Filament Costs: </b><br><p class=\"tag mb-1\" id=\"pmExpectedFilamentCost\">Loading...</p>\n          <b class=\"mb-1\">Expected Printer Costs: </b><br><p class=\"tag mb-1\" id=\"pmExpectedPrinterCost\">Loading...</p>\n  \n  \n                                 </center>\n  </div>\n                </div>\n                  </div>\n                  <div class=\"col-lg-12 col-xl-6\">\n                 <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Tools</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row\">\n                  <div class=\"col-12\">\n                      <button id=\"pmTempTime\" type=\"button\" class=\"btn btn-secondary btn-sm float-right\" disabled>Updated: <i class=\"far fa-clock\"></i> Never</button>\n                  </div>\n                </div>\n                <div class=\"row\" id=\"pmToolTemps\">\n  \n                </div>\n                <div class=\"row\">\n                    <div id=\"pmBedTemp\" class=\"col-lg-6\">\n                    \n                    </div>\n                    <div id=\"pmChamberTemp\" class=\"col-lg-6\">\n                    \n                    </div>\n                </div>\n                  </div>\n                </div>\n  \n                       \n                 <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Terminal</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row\">\n                 <div id=\"terminal\" class=\"terminal-window bg-secondary\">\n                  </div>\n                    <div class=\"input-group\">\n                      <textarea id=\"terminalInput\" type=\"text\" class=\"form-control\" placeholder=\"\" aria-label=\"\" aria-describedby=\"basic-addon2\"></textarea>\n                      <div class=\"input-group-append\">\n                        <button class=\"btn btn-secondary\" id=\"terminalInputBtn\" type=\"submit\">Send</button>\n                      </div>\n                    </div>\n                    <form class=\"was-validated\">\n                      <div class=\"custom-control custom-checkbox mb-3\">\n                        <input \n                        type=\"checkbox\" class=\"custom-control-input\" id=\"tempMessages\" required checked>\n                        <label class=\"custom-control-label\" for=\"tempMessages\">Temperature Messages</label>\n                        <div class=\"valid-feedback\">Showing temperature messages</div>\n                        <div class=\"invalid-feedback\">Not showing temperature messages</div>\n                      </div>\n                      </form>\n                      <form class=\"was-validated\">\n                       <div class=\"custom-control custom-checkbox mb-3\">\n                        <input\n                        type=\"checkbox\" class=\"custom-control-input\" id=\"sdMessages\" required checked>\n                        <label class=\"custom-control-label\" for=\"sdMessages\">SD Messages</label>\n                        <div class=\"valid-feedback\">Showing sd messages</div>\n                        <div class=\"invalid-feedback\">Not showing sd messages</div>\n                      </div>\n                      </form>\n                      <form class=\"was-validated\">\n                      <div class=\"custom-control custom-checkbox mb-3\">\n                        <input\n                        type=\"checkbox\" class=\"custom-control-input\" id=\"waitMessages\" required checked>\n                        <label class=\"custom-control-label\" for=\"waitMessages\">Wait Responses</label>\n                        <div class=\"valid-feedback\">Showing wait responses</div>\n                        <div class=\"invalid-feedback\">Not showing wait responses</div>\n                      </div>\n                      </form>\n                </div>\n                <div class=\"row\" >\n                    <div id=\"customGcodeCommandsArea\" class=\"col-lg-12\"></div>\n                </div>\n            </div>\n            ");
                } else {
                  document.getElementById("printerControls").innerHTML = "\n          <div class=\"row\">\n              <div class=\"col-lg-3\">\n             <div class=\"row\">\n                <div class=\"col-12\">\n                <center>\n                <h5>Operation</h5>\n            </center>\n            <hr>\n  \n            <center>\n            <button id=\"pmPrintStart\" type=\"button\" class=\"btn btn-success\" role=\"button\"><i class=\"fas fa-print\"></i> Print</button>\n            <button id=\"pmPrintPause\" type=\"button\" class=\"btn btn-light\" role=\"button\" disabled><i class=\"fas fa-pause\"></i> Pause</button>\n            <button id=\"pmPrintRestart\" type=\"button\" class=\"btn btn-danger\" role=\"button\"><i class=\"fas fa-undo\"></i> Restart</button>\n            <button id=\"pmPrintResume\" type=\"button\" class=\"btn btn-success\" role=\"button\"><i class=\"fas fa-redo\"></i> Resume</button>\n            <button id=\"pmPrintStop\" type=\"button\" class=\"btn btn-danger\" disabled><i class=\"fas fa-square\"></i> Cancel</button>\n            </center></div></div>\n                 <div id=\"cameraRow\" class=\"row\">\n                      <div class=\"col-12\">\n                            <center>\n                                <h5>Camera</h5>\n                            </center>\n                            <hr>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div id=\"cameraCol\" class=\"col-12\">\n                          <img style=\"transform: ".concat(flipH, " ").concat(flipV, " ").concat(rotate90, ";\" id=\"printerControlCamera\" width=\"100%\" src=\"\"/>\n                        </div>\n                    </div>\n                                  <div class=\"row\">\n                    <div class=\"col-9\">\n                        <center>\n                            <h5>X/Y</h5>\n                        </center>\n                        <hr>\n                    </div>\n                    <div class=\"col-3\">\n                        <center>\n                            <h5>Z</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcYpos\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-up\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZpos\"type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-up\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-left\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXYhome\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-home\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXpos\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-right\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZhome\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-home\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcYneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-down\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-down\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <div id=\"pcAxisSteps\" class=\"btn-group\" role=\"group\">\n                                <button id=\"pcAxisSteps01\" type=\"button\" class=\"btn btn-light\" value=\"01\">0.1</button>\n                                <button id=\"pcAxisSteps1\" type=\"button\" class=\"btn btn-light\" value=\"1\">1</button>\n                                <button id=\"pcAxisSteps10\" type=\"button\" class=\"btn btn-light\" value=\"10\">10</button>\n                                <button id=\"pcAxisSteps100\" type=\"button\" class=\"btn btn-light\" value=\"100\">100</button>\n                            </div>\n                        </center>\n                    </div>\n                </div>\n                              <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Extruder</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                                      <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <div class=\"input-group\">\n                                <input id=\"pcExtruder\" type=\"number\" class=\"form-control\" placeholder=\"0\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\">\n                                <div class=\"input-group-append\">\n                                    <span class=\"input-group-text\" id=\"basic-addon2\">mm</span>\n                                </div>\n                            </div>\n                        </center>\n                    </div>\n                <div class=\"row\">\n                    <div class=\"col-12 text-center\">\n                        <center><button id=\"pcExtrude\" class=\"btn btn-light\" type=\"submit\"><i class=\"fas fa-redo\"></i> Extrude</button> <button id=\"pcRetract\" class=\"btn btn-light\" type=\"submit\"><i class=\"fas fa-undo\"></i> Retract</button></center>\n                </div>\n            </div>\n            </div>\n                  <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Feed/Flow</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                  <div class=\"row\">\n                    <div class=\"col-10 col-lg-8 col-xl-8\">\n                        <label for=\"pcFeed\">Feed Rate: <span id=\"pcFeedValue\">").concat(printer.feedRate, "%</span></label>\n                        <input type=\"range\" class=\"octoRange custom-range\" min=\"10\" max=\"300\" step=\"1\" id=\"pcFeed\" value=\"").concat(printer.feedRate, "\">\n                    </div>\n                    <div class=\"col-2 col-lg-4 col-xl-4\">\n                        <button id=\"pcFeedRate\" type=\"button\" class=\"btn btn-light\">Update</button>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-10 col-lg-8 col-xl-8\">\n                        <label for=\"pcFlow\">Flow Rate: <span id=\"pcFlowValue\">").concat(printer.flowRate, "%</span></label>\n                        <input type=\"range\" class=\"octoRange custom-range\" min=\"75\" max=\"125\" step=\"1\" id=\"pcFlow\" value=\"").concat(printer.flowRate, "\">\n                    </div>\n                    <div class=\"col-2 col-lg-4 col-xl-4\">\n                        <button id=\"pcFlowRate\" type=\"button\" class=\"btn btn-light\">Update</button>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Motors / Fans</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                  <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center><button id=\"pcMotorTog\" class=\"btn btn-light\" type=\"submit\">Motors Off</button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                    <label for=\"pcFlow\">Fan Percent: <span id=\"pcFanPercent\">100%</span></label>\n                    <input type=\"range\" class=\"octoRange custom-range\" min=\"0\" max=\"100\" step=\"1\" id=\"pcFanPercent\" value=\"100\">\n                        <center><button id=\"pcFanOn\" class=\"btn btn-light\" type=\"submit\">Set Fans</button> <button id=\"pcFanOff\" class=\"btn btn-light\" type=\"submit\">Fans Off</button></center>\n                    </div>\n                </div>\n              </div>\n              <div class=\"col-lg-9 pt-0\">\n              <div class=\"row\">\n                  <div class=\"col-lg-12 col-xl-6\">\n                    <div class=\"col-12\">\n                                      <center>\n                                          <h5>Print Status</h5>\n                                      </center>\n                                      <hr>\n                                  </div>\n                                  <div class=\"col-12\">\n                                                                  <div class=\"progress mb-2\">\n                                    <div id=\"pmProgress\" class=\"progress-bar\" role=\"progressbar progress-bar-striped\" style=\"width:100%\" aria-valuenow=\"100%\" aria-valuemin=\"0\" aria-valuemax=\"100\">Loading...\n                                    </div>\n                                  </div>\n                </div>\n                <div class=\"row\">\n                <div id=\"fileThumbnail\" class=\"col-12\">\n  \n                </div>\n                <div class=\"col-12\">\n                <center>\n                                 <b class=\"mb-1\">File Name: </b><br><p title=\"Loading...\" class=\"tag mb-1\" id=\"pmFileName\">Loading...</p>\n  </center>\n  </div>\n                  <div class=\"col-12\">\n                <center>\n                                 <b id=\"resentTitle\" class=\"mb-1 d-none\">Resend Statistics: </b><br><p title=\"Current job resend ratio\" class=\"tag mb-1 d-none\" id=\"printerResends\">Loading...</p>\n  </center>\n  </div>\n                  <div class=\"col-lg-12 col-xl-6\">\n                     <center>\n                  <b>Expected Completion Date: </b><p class=\"mb-1\" id=\"pmExpectedCompletionDate\">Loading...</p>\n  \n                    <b>Print Time Remaining: </b><p class=\"mb-1\" id=\"pmTimeRemain\">Loading...</p>\n                    <b>Print Time Elapsed: </b><p class=\"mb-1\" id=\"pmTimeElapsed\">Loading...</p>\n                    <b>Current Z: </b><p class=\"mb-1\" id=\"pmCurrentZ\">Loading...</p>\n                    <b>Expected Job Cost: </b><p class=\"mb-1\" id=\"pmJobCosts\">Loading...</p></center>\n              </div>\n                  <div class=\"col-lg-12 col-xl-6\">\n                                 <center>\n                   <b>Expected Print Time: </b><p class=\"mb-1\" id=\"pmExpectedTime\">Loading...</p>\n          <b class=\"mb-1\">Expected Units: </b><br><p class=\"tag mb-1\" id=\"pmExpectedWeight\">Loading...</p>\n          <b class=\"mb-1\">Expected Filament Costs: </b><br><p class=\"tag mb-1\" id=\"pmExpectedFilamentCost\">Loading...</p>\n          <b class=\"mb-1\">Expected Printer Costs: </b><br><p class=\"tag mb-1\" id=\"pmExpectedPrinterCost\">Loading...</p>\n  \n  \n                                 </center>\n  </div>\n                </div>\n                  </div>\n                  <div class=\"col-lg-12 col-xl-6\">\n                 <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Tools</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row\">\n                  <div class=\"col-12\">\n                      <button id=\"pmTempTime\" type=\"button\" class=\"btn btn-secondary btn-sm float-right\" disabled>Updated: <i class=\"far fa-clock\"></i> Never</button>\n                  </div>\n                </div>\n                <div class=\"row\" id=\"pmToolTemps\">\n  \n                </div>\n                <div class=\"row\">\n                    <div id=\"pmBedTemp\" class=\"col-lg-6\">\n                    \n                    </div>\n                    <div id=\"pmChamberTemp\" class=\"col-lg-6\">\n                    \n                    </div>\n                </div>\n                  </div>\n                </div>\n  \n                           <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Files</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row bg-secondary rounded-top\">\n                <div class=\"col-12\">\n                     <h5 class=\"float-left  mb-0\">\n                      <button id=\"printerFileCount\" type=\"button\" class=\"btn btn-secondary float-right d-block\" href=\"#\" aria-expanded=\"false\" disabled=\"\">\n                        <i class=\"fas fa-file\"></i> Loading... <i class=\"fas fa-folder\"></i> Loading...\n                      </button>\n                      <button id=\"printerStorage\" type=\"button\" class=\"btn btn-secondary float-right d-block\" href=\"#\" aria-expanded=\"false\" disabled=\"\">\n  \n                        <i class=\"fas fa-hdd\"></i> Loading...\n                      </button>\n                    </h5>\n                    <h5 class=\"float-left mb-0\">\n                      <button type=\"button\" class=\"btn btn-secondary float-right d-block\" href=\"#\" aria-expanded=\"false\" disabled=\"\">\n                        <i class=\"fas fa-file-code\"></i> Files: <span id=\"currentFolder\">local</span>/\n                      </button>\n                    </h5>\n                    <div class=\"btn btn-secondary form-group float-right  mb-0\">\n                      <form class=\"form-inline\">\n                        <div class=\"form-group\">\n                          <label for=\"searchFiles\">\n                            <i class=\"fas fa-search pr-1\"></i>\n                          </label>\n                          <input id=\"searchFiles\" type=\"text\" placeholder=\"File Search...\" class=\"search-control search-control-underlined\">\n                        </div>\n                      </form>\n                    </div>\n                   </div>\n                  </div>\n                  <div class=\"row bg-secondary rounded-bottom\">\n                    <div class=\"col-lg-2\">\n                      <i class=\"fas fa-file-upload ml-2 mb-1\"></i><span id=\"fileCounts-").concat(printer._id, "\"> 0 </span>\n                    </div>\n                    <div class=\"col-lg-10\">\n                      <div class=\"progress\">\n                        <div id=\"fileProgress-").concat(printer._id, "\" class=\"progress-bar progress-bar-striped bg-warning\" role=\"progressbar\" style=\"width: 0%\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n                          0%\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"row mb-1\">\n                      <div class=\"col-12\">\n                       <button id=\"fileBackBtn\" type=\"button\" class=\"btn btn-success float-right\">\n                        <i class=\"fas fa-chevron-left\"></i> Back\n                      </button>\n                      <!-- Split dropright button -->\n                      <div class=\"float-right mr-3 btn-group\">\n                          <div id=\"fileSortDropdownMenu\" class=\"btn bg-secondary\">Sort</div>\n                          <button type=\"button\" class=\"btn btn-secondary dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            <span class=\"sr-only\">Toggle Dropdown</span>\n                          </button>\n                          <div class=\"dropdown-menu\">\n                            \n                       <a class=\"dropdown-item\" id=\"sortFileNameDown\"><i class=\"fas fa-sort-alpha-down\"></i> File Name</a>\n  \n                      <a class=\"dropdown-item\" id=\"sortFileNameUp\"><i class=\"fas fa-sort-alpha-up\"></i> File Name</a>\n                             <div class=\"dropdown-divider\"></div>\n                      <a class=\"dropdown-item\" id=\"sortPrintTimeDown\"><i class=\"fas fa-sort-numeric-down\"></i> Print Time</a>\n  \n                      <a class=\"dropdown-item\" id=\"sortPrintTimeUp\"><i class=\"fas fa-sort-numeric-up\"></i> Print Time</a>\n                             <div class=\"dropdown-divider\"></div>\n                      <a class=\"dropdown-item\" id=\"sortDateDown\"><i class=\"fas fa-sort-numeric-down\"></i> Upload Date</a>\n  \n                      <a class=\"dropdown-item\" id=\"sortDateUp\"><i class=\"fas fa-sort-numeric-up\"></i> Upload Date</a>\n                          </div>\n                        </div>\n\n                        <label class=\"btn btn-success float-left mr-1 mb-0 bg-colour-1\" for=\"fileUploadBtn\"><i class=\"fas fa-file-import\"></i> Upload File(s)</label>\n                        <input id=\"fileUploadBtn\" multiple accept=\".gcode,.gco,.g\" type=\"file\" class=\"btn btn-success float-left bg-colour-1\" id=\"uploadFileBtn\">\n                        <label class=\"btn btn-info float-left mr-1 mb-0 bg-colour-2\" for=\"fileUploadPrintBtn\"><i class=\"fas fa-file-import\"></i> Upload and Print</label>\n                        <input id=\"fileUploadPrintBtn\" accept=\".gcode,.gco,.g\" type=\"file\" class=\"btn btn-success float-left bg-colour-2\" id=\"uploadFileBtn\">\n                      <button\n                        id=\"createFolderBtn\"\n                        type=\"button\"\n                        class=\"btn btn-warning float-left mr-1 mb-0 bg-colour-3\"\n                        data-toggle=\"collapse\"\n                        href=\"#createFolder\"\n                        role=\"button\"\n                        aria-expanded=\"false\"\n                        aria-controls=\"createFolder\"\n                      >\n                        <i class=\"fas fa-folder-plus\"></i> Create Folder\n                      </button>\n                      <button id=\"fileReSync\" type=\"button\" class=\"btn btn-primary mb-0 bg-colour-4\">\n                        <i class=\"fas fa-sync\"></i> Re-Sync\n                      </button>\n                      </div>\n  \n                  </div>\n  \n                      <div id=\"fileList-").concat(printer._id, "\" class=\"list-group\" style=\"height:500px; min-height:500px;max-height:500px; overflow-y:scroll;\">\n  \n                      </div>\n              </div>\n          </div>\n                 <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <h5>Terminal</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row\">\n                 <div id=\"terminal\" class=\"terminal-window bg-secondary\">\n                  </div>\n                    <div class=\"input-group\">\n                      <textarea id=\"terminalInput\" type=\"text\" class=\"form-control\" placeholder=\"\" aria-label=\"\" aria-describedby=\"basic-addon2\"></textarea>\n                      <div class=\"input-group-append\">\n                        <button class=\"btn btn-secondary\" id=\"terminalInputBtn\" type=\"submit\">Send</button>\n                      </div>\n                    </div>\n                    <form class=\"was-validated\">\n                      <div class=\"custom-control custom-checkbox mb-3\">\n                        <input \n                        type=\"checkbox\" class=\"custom-control-input\" id=\"tempMessages\" required checked>\n                        <label class=\"custom-control-label\" for=\"tempMessages\">Temperature Messages</label>\n                        <div class=\"valid-feedback\">Showing temperature messages</div>\n                        <div class=\"invalid-feedback\">Not showing temperature messages</div>\n                      </div>\n                      </form>\n                      <form class=\"was-validated\">\n                       <div class=\"custom-control custom-checkbox mb-3\">\n                        <input\n                        type=\"checkbox\" class=\"custom-control-input\" id=\"sdMessages\" required checked>\n                        <label class=\"custom-control-label\" for=\"sdMessages\">SD Messages</label>\n                        <div class=\"valid-feedback\">Showing sd messages</div>\n                        <div class=\"invalid-feedback\">Not showing sd messages</div>\n                      </div>\n                      </form>\n                      <form class=\"was-validated\">\n                      <div class=\"custom-control custom-checkbox mb-3\">\n                        <input\n                        type=\"checkbox\" class=\"custom-control-input\" id=\"waitMessages\" required checked>\n                        <label class=\"custom-control-label\" for=\"waitMessages\">Wait Responses</label>\n                        <div class=\"valid-feedback\">Showing wait responses</div>\n                        <div class=\"invalid-feedback\">Not showing wait responses</div>\n                      </div>\n                      </form>\n                </div>\n                <div class=\"row\">\n                    <div id=\"customGcodeCommandsArea\" class=\"col-lg-12\"></div>\n                </div>\n            </div>\n            ");
                }

                camURL = "";

                if (typeof printer.cameraURL !== "undefined" && printer.cameraURL.includes("http")) {
                  camURL = printer.cameraURL;
                } else {
                  camURL = "../../../images/noCamera.jpg";
                } //Load camera


                camTitle = document.getElementById("cameraRow");

                if (printer.otherSettings.webCamSettings.webcamEnabled) {
                  document.getElementById("printerControlCamera").src = camURL;

                  if (camTitle.classList.contains("d-none")) {
                    camTitle.classList.remove("d-none");
                  }
                } else {
                  if (!camTitle.classList.contains("d-none")) {
                    camTitle.classList.add("d-none");
                  }
                }

                printerToolTemps = document.getElementById("pmToolTemps");
                document.getElementById("pmBedTemp").innerHTML = "";
                document.getElementById("pmChamberTemp").innerHTML = "";
                printerToolTemps.innerHTML = "";

                if (typeof printer.currentProfile !== "undefined" && printer.currentProfile !== null) {
                  keys = Object.keys(printer.currentProfile);

                  for (t = 0; t < keys.length; t++) {
                    if (keys[t].includes("extruder")) {
                      _loop = function _loop(i) {
                        printerToolTemps.insertAdjacentHTML("beforeend", "\n                                <div class=\"col-md-12 col-lg-12 col-xl-6\">\n                                   <div class=\"md-form input-group mb-3\">\n                                       <span class=\"input-group-text\">".concat(i, "</span>\n                                      <div title=\"Actual Tool temperature\" class=\"input-group-prepend\">\n                                          <span id=\"tool").concat(i, "Actual\" class=\"input-group-text\">0\xB0C</span>\n                                      </div>\n                                      <input title=\"Set your target Tool temperature\" id=\"tool").concat(i, "Target\" type=\"number\" class=\"form-control col\" placeholder=\"0\xB0C\" aria-label=\"Recipient's username\" aria-describedby=\"MaterialButton-addon2\">\n                                      <div class=\"input-group-append\">\n                                          <button class=\"btn btn-md btn-light m-0 p-1\" type=\"button\" id=\"tool").concat(i, "Set\">Set</button>\n                                      </div>\n                                  </div>\n                                </div>\n                                <div class=\"col-md-6\">\n                                 <div class=\"input-group mb-1\"><div class=\"input-group-prepend\"> <label class=\"input-group-text bg-secondary text-light\" for=\"tool").concat(i, "FilamentManagerFolderSelect\">Filament:</label> </div> <select class=\"custom-select bg-secondary text-light\" id=\"tool").concat(i, "FilamentManagerFolderSelect\"><option value=\"\" selected></option></select></div>\n                                </div>\n                                "));
                        var pmFilamentDrop = document.getElementById("tool".concat(i, "FilamentManagerFolderSelect"));
                        pmFilamentDrop.innerHTML = "";
                        filamentDropDown.forEach(function (filament) {
                          pmFilamentDrop.insertAdjacentHTML("beforeend", filament);
                        });

                        if (Array.isArray(printer.selectedFilament) && printer.selectedFilament.length !== 0) {
                          if (typeof printer.selectedFilament[i] !== "undefined" && printer.selectedFilament[i] !== null) {
                            pmFilamentDrop.value = printer.selectedFilament[i]._id;
                          }
                        }

                        pmFilamentDrop.addEventListener("change", function (event) {
                          (0, _filamentGrab.selectFilament)(printer._id, event.target.value, "".concat(i));
                          setTimeout(function () {
                            _fileManager["default"].refreshFiles(currentPrinter, "<i class=\"fas fa-spinner fa-pulse\"></i> Checking Octoprint for information... <br>");
                          }, 1000);
                        });
                      };

                      for (i = 0; i < printer.currentProfile[keys[t]].count; i++) {
                        _loop(i);
                      }
                    } else if (keys[t].includes("heatedBed")) {
                      if (printer.currentProfile[keys[t]]) {
                        document.getElementById("pmBedTemp").insertAdjacentHTML("beforeend", "\n                           <div class=\"col-12\">\n                          <center>\n                              <h5>Bed</h5>\n                          </center>\n                          <hr>\n                          <div class=\"md-form input-group mb-3\">\n                              <div title=\"Actual Bed temperature\" class=\"input-group-prepend\">\n                                  <span id=\"bedActual\" class=\"input-group-text\">0\xB0C</span>\n                              </div>\n                              <input title=\"Set your target Bed temperature\" id=\"bedTarget\" type=\"number\" class=\"form-control col-lg-12 col-xl-12\" placeholder=\"0\xB0C\" aria-label=\"Recipient's username\" aria-describedby=\"MaterialButton-addon2\">\n                              <div class=\"input-group-append\">\n                                  <button class=\"btn btn-md btn-light m-0 p-1\" type=\"button\" id=\"bedSet\">Set</button>\n                              </div>\n                          </div>\n                            </div>\n                         ");
                      }
                    } else if (keys[t].includes("heatedChamber")) {
                      if (printer.currentProfile[keys[t]]) {
                        document.getElementById("pmChamberTemp").insertAdjacentHTML("beforeend", "\n                           <div class=\"col-12\">\n                          <center>\n                              <h5>Chamber</h5>\n                          </center>\n                          <hr>\n                          <div class=\"md-form input-group mb-3\">\n                              <div title=\"Actual Bed temperature\" class=\"input-group-prepend\">\n                                  <span id=\"chamberActual\" class=\"input-group-text\">0\xB0C</span>\n                              </div>\n                              <input title=\"Set your target Bed temperature\" id=\"chamberTarget\" type=\"number\" class=\"form-control col-lg-12 col-xl-12\" placeholder=\"0\xB0C\" aria-label=\"Recipient's username\" aria-describedby=\"MaterialButton-addon2\">\n                              <div class=\"input-group-append\">\n                                  <button class=\"btn btn-md btn-light m-0 p-1\" type=\"button\" id=\"chamberSet\">Set</button>\n                              </div>\n                          </div>\n                            </div>\n                         ");
                      }
                    }
                  }
                }

                _fileSorting["default"].loadSort(printer);

                _customScripts["default"].generateButtons([printer]);

                return _context2.abrupt("return", true);

              case 41:
                _context2.prev = 41;
                _context2.t0 = _context2["catch"](0);

                _ui["default"].createAlert("error", "Something has gone wrong with loading the Printer Manager... Hard Failure, please submit as a bug on github: " + _context2.t0, 0, "clicked");

                console.error(_context2.t0);

              case 45:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[0, 41]]);
      }));

      function loadPrinter(_x4, _x5, _x6) {
        return _loadPrinter.apply(this, arguments);
      }

      return loadPrinter;
    }()
  }, {
    key: "applyListeners",
    value: function applyListeners(elements, printers, filamentDropDown) {
      var rangeSliders = document.querySelectorAll("input.octoRange");
      rangeSliders.forEach(function (slider) {
        slider.addEventListener("input", function (e) {
          e.target.previousSibling.previousSibling.lastChild.innerHTML = "".concat(e.target.value, "%");
        });
      });

      if (currentPrinter.state != "Disconnected") {
        elements.connectPage.connectButton.addEventListener("click", function (e) {
          elements.connectPage.connectButton.disabled = true;

          _octoprint["default"].connect(elements.connectPage.connectButton.value, currentPrinter);
        });
      } else {
        elements.connectPage.connectButton.addEventListener("click", function (e) {
          elements.connectPage.connectButton.disabled = true;

          _octoprint["default"].connect(elements.connectPage.connectButton.value, currentPrinter);
        });
      } //Control Listeners... There's a lot!


      elements.printerControls.xPlus.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "jog", "x");
      });
      elements.printerControls.xMinus.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "jog", "x", "-");
      });
      elements.printerControls.yPlus.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "jog", "y");
      });
      elements.printerControls.yMinus.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "jog", "y", "-");
      });
      elements.printerControls.xyHome.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "home", ["x", "y"]);
      });
      elements.printerControls.zPlus.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "jog", "z");
      });
      elements.printerControls.zMinus.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "jog", "z", "-");
      });
      elements.printerControls.zHome.addEventListener("click", function (e) {
        _octoprint["default"].move(e, currentPrinter, "home", ["z"]);
      });
      elements.printerControls.step01.addEventListener("click", function (e) {
        _octofarm["default"].post("printers/stepChange", {
          printer: currentPrinter._id,
          newSteps: "01"
        });

        elements.printerControls.step01.className = "btn btn-dark active";
        elements.printerControls.step1.className = "btn btn-light";
        elements.printerControls.step10.className = "btn btn-light";
        elements.printerControls.step100.className = "btn btn-light";
      });
      elements.printerControls.step1.addEventListener("click", function (e) {
        _octofarm["default"].post("printers/stepChange", {
          printer: currentPrinter._id,
          newSteps: "1"
        });

        elements.printerControls.step1.className = "btn btn-dark active";
        elements.printerControls.step01.className = "btn btn-light";
        elements.printerControls.step10.className = "btn btn-light";
        elements.printerControls.step100.className = "btn btn-light";
      });
      elements.printerControls.step10.addEventListener("click", function (e) {
        _octofarm["default"].post("printers/stepChange", {
          printer: currentPrinter._id,
          newSteps: "10"
        });

        elements.printerControls.step10.className = "btn btn-dark active";
        elements.printerControls.step1.className = "btn btn-light";
        elements.printerControls.step01.className = "btn btn-light";
        elements.printerControls.step100.className = "btn btn-light";
      });
      elements.printerControls.step100.addEventListener("click", function (e) {
        _octofarm["default"].post("printers/stepChange", {
          printer: currentPrinter._id,
          newSteps: "100"
        });

        elements.printerControls.step100.className = "btn btn-dark active";
        elements.printerControls.step1.className = "btn btn-light";
        elements.printerControls.step10.className = "btn btn-light";
        elements.printerControls.step01.className = "btn btn-light";
      });

      if (currentPrinter.currentProfile !== null) {
        var keys = Object.keys(currentPrinter.currentProfile);

        for (var t = 0; t < keys.length; t++) {
          if (keys[t].includes("extruder")) {
            var _loop2 = function _loop2(i) {
              var toolSet = /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(e) {
                  var flashReturn, _document$getElementB, value, opt, post;

                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          flashReturn = function flashReturn() {
                            document.getElementById("tool" + i + "Set").className = "btn btn-md btn-light m-0 p-1";
                          };

                          _document$getElementB = document.getElementById("tool" + i + "Target"), value = _document$getElementB.value;
                          document.getElementById("tool" + i + "Target").value = "";

                          if (value === "Off") {
                            value = 0;
                          }

                          opt = {
                            command: "target",
                            targets: _defineProperty({}, "tool" + i, parseInt(value))
                          };
                          _context3.next = 7;
                          return _octoprint["default"].post(currentPrinter, "printer/tool", opt);

                        case 7:
                          post = _context3.sent;

                          if (post.status === 204) {
                            document.getElementById("tool" + i + "Set").className = "btn btn-md btn-success m-0 p-1";
                            setTimeout(flashReturn, 500);
                          } else {
                            document.getElementById("tool" + i + "Set").className = "btn btn-md btn-danger m-0 p-1";
                            setTimeout(flashReturn, 500);
                          }

                        case 9:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }));

                return function toolSet(_x7) {
                  return _ref.apply(this, arguments);
                };
              }();

              document.getElementById("tool" + i + "Target").addEventListener("change", /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(e) {
                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          if (document.getElementById("tool" + i + "Target").value <= 0) {
                            document.getElementById("tool" + i + "Target").value = "0";
                          }

                        case 1:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4);
                }));

                return function (_x8) {
                  return _ref2.apply(this, arguments);
                };
              }());
              document.getElementById("tool" + i + "Target").addEventListener("keypress", /*#__PURE__*/function () {
                var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(e) {
                  return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          if (e.key === "Enter") {
                            toolSet(e);
                          }

                        case 1:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5);
                }));

                return function (_x9) {
                  return _ref3.apply(this, arguments);
                };
              }());
              document.getElementById("tool" + i + "Set").addEventListener("click", /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(e) {
                  return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          toolSet(e);

                        case 1:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6);
                }));

                return function (_x10) {
                  return _ref4.apply(this, arguments);
                };
              }());
            };

            for (var i = 0; i < currentPrinter.currentProfile[keys[t]].count; i++) {
              _loop2(i);
            }
          } else if (keys[t].includes("heatedBed")) {
            if (currentPrinter.currentProfile[keys[t]]) {
              (function () {
                var bedSet = /*#__PURE__*/function () {
                  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(e) {
                    var flashReturn, value, opt, post;
                    return regeneratorRuntime.wrap(function _callee7$(_context7) {
                      while (1) {
                        switch (_context7.prev = _context7.next) {
                          case 0:
                            flashReturn = function flashReturn() {
                              elements.temperatures.bed[2].classList = "btn btn-md btn-light m-0 p-1";
                            };

                            value = elements.temperatures.bed[1].value;
                            elements.temperatures.bed[1].value = "";

                            if (value === "Off") {
                              value = 0;
                            }

                            opt = {
                              command: "target",
                              target: parseInt(value)
                            };
                            _context7.next = 7;
                            return _octoprint["default"].post(currentPrinter, "printer/bed", opt);

                          case 7:
                            post = _context7.sent;

                            if (post.status === 204) {
                              elements.temperatures.bed[2].className = "btn btn-md btn-success m-0 p-1";
                              elements.temperatures.bed[2].value = "";
                              setTimeout(flashReturn, 500);
                            } else {
                              elements.temperatures.bed[2].className = "btn btn-md btn-success m-0 p-1";
                              elements.temperatures.bed[2].value = "";
                              setTimeout(flashReturn, 500);
                            }

                          case 9:
                          case "end":
                            return _context7.stop();
                        }
                      }
                    }, _callee7);
                  }));

                  return function bedSet(_x11) {
                    return _ref5.apply(this, arguments);
                  };
                }();

                if (elements.temperatures.bed[1]) {
                  elements.temperatures.bed[1].addEventListener("change", /*#__PURE__*/function () {
                    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(e) {
                      return regeneratorRuntime.wrap(function _callee8$(_context8) {
                        while (1) {
                          switch (_context8.prev = _context8.next) {
                            case 0:
                              if (elements.temperatures.bed[1].value <= 0) {
                                elements.temperatures.bed[1].value = "";
                              }

                            case 1:
                            case "end":
                              return _context8.stop();
                          }
                        }
                      }, _callee8);
                    }));

                    return function (_x12) {
                      return _ref6.apply(this, arguments);
                    };
                  }());
                }

                elements.temperatures.bed.forEach(function (node) {
                  if (node.id.includes("Target")) {
                    if (node) {
                      node.addEventListener("keypress", /*#__PURE__*/function () {
                        var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(e) {
                          return regeneratorRuntime.wrap(function _callee9$(_context9) {
                            while (1) {
                              switch (_context9.prev = _context9.next) {
                                case 0:
                                  if (e.key === "Enter") {
                                    bedSet(e);
                                  }

                                case 1:
                                case "end":
                                  return _context9.stop();
                              }
                            }
                          }, _callee9);
                        }));

                        return function (_x13) {
                          return _ref7.apply(this, arguments);
                        };
                      }());
                    }
                  }

                  if (node.id.includes("Set")) {
                    if (node) {
                      node.addEventListener("click", /*#__PURE__*/function () {
                        var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(e) {
                          return regeneratorRuntime.wrap(function _callee10$(_context10) {
                            while (1) {
                              switch (_context10.prev = _context10.next) {
                                case 0:
                                  bedSet(e);

                                case 1:
                                case "end":
                                  return _context10.stop();
                              }
                            }
                          }, _callee10);
                        }));

                        return function (_x14) {
                          return _ref8.apply(this, arguments);
                        };
                      }());
                    }
                  }
                });
              })();
            }
          } else if (keys[t].includes("heatedChamber")) {
            if (currentPrinter.currentProfile[keys[t]]) {
              (function () {
                var chamberSet = /*#__PURE__*/function () {
                  var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(e) {
                    var flashReturn, value, opt, post;
                    return regeneratorRuntime.wrap(function _callee11$(_context11) {
                      while (1) {
                        switch (_context11.prev = _context11.next) {
                          case 0:
                            flashReturn = function flashReturn() {
                              elements.temperatures.chamber[2].classList = "btn btn-md btn-light m-0 p-1";
                            };

                            value = elements.temperatures.chamber[1].value;
                            elements.temperatures.chamber[1].value = "";

                            if (value === "Off") {
                              value = 0;
                            }

                            opt = {
                              command: "target",
                              target: parseInt(value)
                            };
                            _context11.next = 7;
                            return _octoprint["default"].post(currentPrinter, "printer/chamber", opt);

                          case 7:
                            post = _context11.sent;

                            if (post.status === 204) {
                              elements.temperatures.chamber[2].className = "btn btn-md btn-success m-0 p-1";
                              setTimeout(flashReturn, 500);
                            } else {
                              elements.temperatures.chamber[2].className = "btn btn-md btn-success m-0 p-1";
                              setTimeout(flashReturn, 500);
                            }

                          case 9:
                          case "end":
                            return _context11.stop();
                        }
                      }
                    }, _callee11);
                  }));

                  return function chamberSet(_x15) {
                    return _ref9.apply(this, arguments);
                  };
                }();

                if (elements.temperatures.chamber[1]) {
                  elements.temperatures.chamber[1].addEventListener("change", /*#__PURE__*/function () {
                    var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(e) {
                      return regeneratorRuntime.wrap(function _callee12$(_context12) {
                        while (1) {
                          switch (_context12.prev = _context12.next) {
                            case 0:
                              if (elements.temperatures.chamber[1].value <= 0) {
                                elements.temperatures.chamber[1].value = "";
                              }

                            case 1:
                            case "end":
                              return _context12.stop();
                          }
                        }
                      }, _callee12);
                    }));

                    return function (_x16) {
                      return _ref10.apply(this, arguments);
                    };
                  }());
                }

                elements.temperatures.chamber.forEach(function (node) {
                  if (node.id.includes("Target")) {
                    if (node) {
                      node.addEventListener("keypress", /*#__PURE__*/function () {
                        var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(e) {
                          return regeneratorRuntime.wrap(function _callee13$(_context13) {
                            while (1) {
                              switch (_context13.prev = _context13.next) {
                                case 0:
                                  if (e.key === "Enter") {
                                    chamberSet(e);
                                  }

                                case 1:
                                case "end":
                                  return _context13.stop();
                              }
                            }
                          }, _callee13);
                        }));

                        return function (_x17) {
                          return _ref11.apply(this, arguments);
                        };
                      }());
                    }
                  }

                  if (node.id.includes("Set")) {
                    if (node) {
                      node.addEventListener("click", /*#__PURE__*/function () {
                        var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(e) {
                          return regeneratorRuntime.wrap(function _callee14$(_context14) {
                            while (1) {
                              switch (_context14.prev = _context14.next) {
                                case 0:
                                  chamberSet(e);

                                case 1:
                                case "end":
                                  return _context14.stop();
                              }
                            }
                          }, _callee14);
                        }));

                        return function (_x18) {
                          return _ref12.apply(this, arguments);
                        };
                      }());
                    }
                  }
                });
              })();
            }
          }
        }
      }

      elements.printerControls.feedRate.addEventListener("click", /*#__PURE__*/function () {
        var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(e) {
          var flashReturn, value, opt, post;
          return regeneratorRuntime.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  flashReturn = function flashReturn() {
                    e.target.classList = "btn btn-light";
                  };

                  value = elements.printerControls.feedRateValue.innerHTML;
                  value = value.replace("%", "");

                  _octofarm["default"].post("printers/feedChange", {
                    printer: currentPrinter._id,
                    newSteps: value
                  });

                  opt = {
                    command: "feedrate",
                    factor: parseInt(value)
                  };
                  _context15.next = 7;
                  return _octoprint["default"].post(currentPrinter, "printer/printhead", opt);

                case 7:
                  post = _context15.sent;

                  if (post.status === 204) {
                    e.target.classList = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    e.target.classList = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 9:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15);
        }));

        return function (_x19) {
          return _ref13.apply(this, arguments);
        };
      }());
      elements.printerControls.flowRate.addEventListener("click", /*#__PURE__*/function () {
        var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(e) {
          var flashReturn, value, opt, post;
          return regeneratorRuntime.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  flashReturn = function flashReturn() {
                    e.target.classList = "btn btn-light";
                  };

                  value = elements.printerControls.flowRateValue.innerHTML;
                  value = value.replace("%", "");

                  _octofarm["default"].post("printers/flowChange", {
                    printer: currentPrinter._id,
                    newSteps: value
                  });

                  opt = {
                    command: "flowrate",
                    factor: parseInt(value)
                  };
                  _context16.next = 7;
                  return _octoprint["default"].post(currentPrinter, "printer/tool", opt);

                case 7:
                  post = _context16.sent;

                  if (post.status === 204) {
                    e.target.classList = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    e.target.classList = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 9:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16);
        }));

        return function (_x20) {
          return _ref14.apply(this, arguments);
        };
      }());
      elements.printerControls.motorsOff.addEventListener("click", /*#__PURE__*/function () {
        var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(e) {
          var flashReturn, opt, post;
          return regeneratorRuntime.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  flashReturn = function flashReturn() {
                    e.target.classList = "btn btn-light";
                  };

                  opt = {
                    commands: ["M18"]
                  };
                  _context17.next = 4;
                  return _octoprint["default"].post(currentPrinter, "printer/command", opt);

                case 4:
                  post = _context17.sent;

                  if (post.status === 204) {
                    e.target.classList = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    e.target.classList = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 6:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee17);
        }));

        return function (_x21) {
          return _ref15.apply(this, arguments);
        };
      }());
      elements.printerControls.fansOn.addEventListener("click", /*#__PURE__*/function () {
        var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(e) {
          var fanspeed, flashReturn, opt, post;
          return regeneratorRuntime.wrap(function _callee18$(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  fanspeed = elements.printerControls.fanPercent.innerHTML;
                  fanspeed = fanspeed.replace("%", "");
                  fanspeed /= 100;
                  fanspeed = 255 * fanspeed;
                  fanspeed = Math.floor(fanspeed);

                  flashReturn = function flashReturn() {
                    e.target.classList = "btn btn-light";
                  };

                  opt = {
                    commands: ["M106 S".concat(fanspeed)]
                  };
                  _context18.next = 9;
                  return _octoprint["default"].post(currentPrinter, "printer/command", opt);

                case 9:
                  post = _context18.sent;

                  if (post.status === 204) {
                    e.target.classList = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    e.target.classList = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 11:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee18);
        }));

        return function (_x22) {
          return _ref16.apply(this, arguments);
        };
      }());
      elements.printerControls.fansOff.addEventListener("click", /*#__PURE__*/function () {
        var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19(e) {
          var flashReturn, opt, post;
          return regeneratorRuntime.wrap(function _callee19$(_context19) {
            while (1) {
              switch (_context19.prev = _context19.next) {
                case 0:
                  flashReturn = function flashReturn() {
                    e.target.classList = "btn btn-light";
                  };

                  opt = {
                    commands: ["M107"]
                  };
                  _context19.next = 4;
                  return _octoprint["default"].post(currentPrinter, "printer/command", opt);

                case 4:
                  post = _context19.sent;

                  if (post.status === 204) {
                    e.target.classList = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    e.target.classList = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 6:
                case "end":
                  return _context19.stop();
              }
            }
          }, _callee19);
        }));

        return function (_x23) {
          return _ref17.apply(this, arguments);
        };
      }());
      elements.printerControls.extrude.addEventListener("click", /*#__PURE__*/function () {
        var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(e) {
          var flashReturn, select, value, opt, post;
          return regeneratorRuntime.wrap(function _callee20$(_context20) {
            while (1) {
              switch (_context20.prev = _context20.next) {
                case 0:
                  flashReturn = function flashReturn() {
                    e.target.classList = "btn btn-light";
                  };

                  if (!(elements.printerControls.extruder.value != undefined && elements.printerControls.extruder.value !== "")) {
                    _context20.next = 12;
                    break;
                  }

                  select = _octoprint["default"].selectTool(currentPrinter, "tool0");

                  if (!select) {
                    _context20.next = 10;
                    break;
                  }

                  value = elements.printerControls.extruder.value;
                  opt = {
                    command: "extrude",
                    amount: parseInt(value)
                  };
                  _context20.next = 8;
                  return _octoprint["default"].post(currentPrinter, "printer/tool", opt);

                case 8:
                  post = _context20.sent;

                  if (post.status === 204) {
                    e.target.classList = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    e.target.classList = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 10:
                  _context20.next = 13;
                  break;

                case 12:
                  _ui["default"].createAlert("error", "You haven't told octoprint how much you'd like to extrude...", 3000, "clicked");

                case 13:
                case "end":
                  return _context20.stop();
              }
            }
          }, _callee20);
        }));

        return function (_x24) {
          return _ref18.apply(this, arguments);
        };
      }());
      elements.printerControls.retract.addEventListener("click", /*#__PURE__*/function () {
        var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(e) {
          var flashReturn, select, value, opt, post;
          return regeneratorRuntime.wrap(function _callee21$(_context21) {
            while (1) {
              switch (_context21.prev = _context21.next) {
                case 0:
                  flashReturn = function flashReturn() {
                    e.target.classList = "btn btn-light";
                  };

                  if (!(elements.printerControls.extruder.value != undefined && elements.printerControls.extruder.value !== "")) {
                    _context21.next = 13;
                    break;
                  }

                  select = _octoprint["default"].selectTool(currentPrinter, "tool0");

                  if (!select) {
                    _context21.next = 11;
                    break;
                  }

                  value = elements.printerControls.extruder.value;
                  value = "-" + value;
                  opt = {
                    command: "extrude",
                    amount: parseInt(value)
                  };
                  _context21.next = 9;
                  return _octoprint["default"].post(currentPrinter, "printer/tool", opt);

                case 9:
                  post = _context21.sent;

                  if (post.status === 204) {
                    e.target.classList = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    e.target.classList = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 11:
                  _context21.next = 14;
                  break;

                case 13:
                  _ui["default"].createAlert("error", "You haven't told octoprint how much you'd like to retract...", 3000, "clicked");

                case 14:
                case "end":
                  return _context21.stop();
              }
            }
          }, _callee21);
        }));

        return function (_x25) {
          return _ref19.apply(this, arguments);
        };
      }());
      elements.printerControls.printStart.addEventListener("click", /*#__PURE__*/function () {
        var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(e) {
          var opts;
          return regeneratorRuntime.wrap(function _callee22$(_context22) {
            while (1) {
              switch (_context22.prev = _context22.next) {
                case 0:
                  e.target.disabled = true;
                  opts = {
                    command: "start"
                  };

                  _octoprint["default"].jobAction(currentPrinter, opts, e);

                case 3:
                case "end":
                  return _context22.stop();
              }
            }
          }, _callee22);
        }));

        return function (_x26) {
          return _ref20.apply(this, arguments);
        };
      }());
      elements.printerControls.printPause.addEventListener("click", function (e) {
        e.target.disabled = true;
        var opts = {
          command: "pause",
          action: "pause"
        };

        _octoprint["default"].jobAction(currentPrinter, opts, e);
      });
      elements.printerControls.printRestart.addEventListener("click", function (e) {
        e.target.disabled = true;
        var opts = {
          command: "restart"
        };

        _octoprint["default"].jobAction(currentPrinter, opts, e);
      });
      elements.printerControls.printResume.addEventListener("click", function (e) {
        e.target.disabled = true;
        var opts = {
          command: "pause",
          action: "resume"
        };

        _octoprint["default"].jobAction(currentPrinter, opts, e);
      });
      elements.printerControls.printStop.addEventListener("click", function (e) {
        bootbox.confirm({
          message: "".concat(currentPrinter.printerName, ": <br>Are you sure you want to cancel the ongoing print?"),
          buttons: {
            cancel: {
              label: "<i class=\"fa fa-times\"></i> Cancel"
            },
            confirm: {
              label: "<i class=\"fa fa-check\"></i> Confirm"
            }
          },
          callback: function callback(result) {
            if (result) {
              e.target.disabled = true;
              var opts = {
                command: "cancel"
              };

              _octoprint["default"].jobAction(currentPrinter, opts, e);
            }
          }
        });
      });

      var submitTerminal = /*#__PURE__*/function () {
        var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(e) {
          var input, flashReturn, opt, post;
          return regeneratorRuntime.wrap(function _callee23$(_context23) {
            while (1) {
              switch (_context23.prev = _context23.next) {
                case 0:
                  input = elements.terminal.input.value.match(/[^\r\n]+/g);
                  console.log(input);

                  if (!(input !== null)) {
                    _context23.next = 6;
                    break;
                  }

                  input = input.map(function (name) {
                    if (!name.includes("=")) {
                      return name.toLocaleUpperCase();
                    } else {
                      return name;
                    }
                  });
                  _context23.next = 7;
                  break;

                case 6:
                  return _context23.abrupt("return", null);

                case 7:
                  elements.terminal.input.value = "";

                  flashReturn = function flashReturn() {
                    elements.terminal.sendBtn = "btn btn-secondary";
                  };

                  opt = {
                    commands: [input]
                  };
                  console.log(opt);
                  _context23.next = 13;
                  return _octoprint["default"].post(currentPrinter, "printer/command", opt);

                case 13:
                  post = _context23.sent;

                  if (post.status === 204) {
                    elements.terminal.sendBtn = "btn btn-success";
                    setTimeout(flashReturn, 500);
                  } else {
                    elements.terminal.sendBtn = "btn btn-danger";
                    setTimeout(flashReturn, 500);
                  }

                case 15:
                case "end":
                  return _context23.stop();
              }
            }
          }, _callee23);
        }));

        return function submitTerminal(_x27) {
          return _ref21.apply(this, arguments);
        };
      }();

      elements.terminal.input.addEventListener("keypress", /*#__PURE__*/function () {
        var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(e) {
          return regeneratorRuntime.wrap(function _callee24$(_context24) {
            while (1) {
              switch (_context24.prev = _context24.next) {
                case 0:
                  if (e.key === "Enter" && !e.shiftKey) {
                    submitTerminal(e);
                  }

                case 1:
                case "end":
                  return _context24.stop();
              }
            }
          }, _callee24);
        }));

        return function (_x28) {
          return _ref22.apply(this, arguments);
        };
      }());
      elements.terminal.sendBtn.addEventListener("click", /*#__PURE__*/function () {
        var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(e) {
          return regeneratorRuntime.wrap(function _callee25$(_context25) {
            while (1) {
              switch (_context25.prev = _context25.next) {
                case 0:
                  submitTerminal(e);

                case 1:
                case "end":
                  return _context25.stop();
              }
            }
          }, _callee25);
        }));

        return function (_x29) {
          return _ref23.apply(this, arguments);
        };
      }());
      elements.fileManager.uploadFiles.addEventListener("change", function () {
        _ui["default"].createAlert("warning", "Your files for Printer: " + currentPrinter.printerName + " has begun. Please do not navigate away from this page.", 3000, "Clicked");

        _fileManager["default"].handleFiles(this.files, currentPrinter);
      });
      elements.fileManager.createFolderBtn.addEventListener("click", function (e) {
        _fileManager["default"].createFolder(currentPrinter);
      });
      elements.fileManager.fileSearch.addEventListener("keyup", function (e) {
        _fileManager["default"].search(currentPrinter._id);
      });
      elements.fileManager.uploadPrintFile.addEventListener("change", function () {
        _fileManager["default"].handleFiles(this.files, currentPrinter, "print");
      });
      elements.fileManager.back.addEventListener("click", function (e) {
        _fileManager["default"].openFolder(undefined, undefined, currentPrinter);
      });
      elements.fileManager.syncFiles.addEventListener("click", function (e) {
        _fileManager["default"].reSyncFiles(e, currentPrinter);
      });
    }
  }, {
    key: "grabPage",
    value: function grabPage() {
      var printerManager = {
        mainPage: {
          title: document.getElementById("printerSelection"),
          status: document.getElementById("pmStatus")
        },
        jobStatus: {
          expectedCompletionDate: document.getElementById("pmExpectedCompletionDate"),
          expectedTime: document.getElementById("pmExpectedTime"),
          remainingTime: document.getElementById("pmTimeRemain"),
          elapsedTime: document.getElementById("pmTimeElapsed"),
          currentZ: document.getElementById("pmCurrentZ"),
          fileName: document.getElementById("pmFileName"),
          progressBar: document.getElementById("pmProgress"),
          expectedWeight: document.getElementById("pmExpectedWeight"),
          expectedPrinterCost: document.getElementById("pmExpectedPrinterCost"),
          expectedFilamentCost: document.getElementById("pmExpectedFilamentCost"),
          expectedTotalCosts: document.getElementById("pmJobCosts"),
          printerResends: document.getElementById("printerResends"),
          resendTitle: document.getElementById("resentTitle")
        },
        connectPage: {
          printerPort: document.getElementById("printerPortDrop"),
          printerBaud: document.getElementById("printerBaudDrop"),
          printerProfile: document.getElementById("printerProfileDrop"),
          printerConnect: document.getElementById("printerConnect"),
          connectButton: document.getElementById("pmConnect"),
          portDropDown: document.getElementById("pmSerialPort"),
          baudDropDown: document.getElementById("pmBaudrate"),
          profileDropDown: document.getElementById("pmProfile")
        },
        terminal: {
          terminalWindow: document.getElementById("terminal"),
          sendBtn: document.getElementById("terminalInputBtn"),
          input: document.getElementById("terminalInput")
        },
        printerControls: {
          filamentDrop: document.getElementById("filamentManagerFolderSelect"),
          fileUpload: document.getElementById("printerManagerUploadBtn"),
          xPlus: document.getElementById("pcXpos"),
          xMinus: document.getElementById("pcXneg"),
          yPlus: document.getElementById("pcYpos"),
          yMinus: document.getElementById("pcYneg"),
          xyHome: document.getElementById("pcXYhome"),
          zPlus: document.getElementById("pcZpos"),
          zMinus: document.getElementById("pcZneg"),
          zHome: document.getElementById("pcZhome"),
          step01: document.getElementById("pcAxisSteps01"),
          step1: document.getElementById("pcAxisSteps1"),
          step10: document.getElementById("pcAxisSteps10"),
          step100: document.getElementById("pcAxisSteps100"),
          feedRate: document.getElementById("pcFeedRate"),
          flowRate: document.getElementById("pcFlowRate"),
          feedRateValue: document.getElementById("pcFeedValue"),
          flowRateValue: document.getElementById("pcFlowValue"),
          motorsOff: document.getElementById("pcMotorTog"),
          fanPercent: document.getElementById("pcFanPercent"),
          fansOn: document.getElementById("pcFanOn"),
          fansOff: document.getElementById("pcFanOff"),
          extruder: document.getElementById("pcExtruder"),
          extrude: document.getElementById("pcExtrude"),
          retract: document.getElementById("pcRetract"),
          progress: document.getElementById("pcAxisSteps100"),
          printStart: document.getElementById("pmPrintStart"),
          printPause: document.getElementById("pmPrintPause"),
          printRestart: document.getElementById("pmPrintRestart"),
          printResume: document.getElementById("pmPrintResume"),
          printStop: document.getElementById("pmPrintStop")
        },
        fileManager: {
          printerStorage: document.getElementById("printerStorage"),
          fileFolderCount: document.getElementById("printerFileCount"),
          fileSearch: document.getElementById("searchFiles"),
          uploadFiles: document.getElementById("fileUploadBtn"),
          uploadPrintFile: document.getElementById("fileUploadPrintBtn"),
          syncFiles: document.getElementById("fileReSync"),
          back: document.getElementById("fileBackBtn"),
          createFolderBtn: document.getElementById("createFolderBtn")
        },
        temperatures: {
          tempTime: document.getElementById("pmTempTime"),
          bed: document.querySelectorAll("[id^='bed']"),
          chamber: document.querySelectorAll("[id^='chamber']"),
          tools: document.querySelectorAll("[id^='tool']")
        },
        filamentDrops: document.querySelectorAll("[id$=FilamentManagerFolderSelect]")
      };
      return printerManager;
    }
  }, {
    key: "applyState",
    value: function () {
      var _applyState = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(printer, elements) {
        var dateComplete, camField, currentDate, futureDateString, futureTimeString, fileName, _fileName, usageDisplay, filamentCost, printCost, isScrolledToBottom, waitCheck, tempCheck, sdCheck, l, tempMess, sdMess, sdMess2, waitMess;

        return regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                //Garbage collection for terminal
                if (typeof printer.fileList !== "undefined") {
                  elements.fileManager.fileFolderCount.innerHTML = "<i class=\"fas fa-file\"></i> ".concat(printer.fileList.filecount, " <i class=\"fas fa-folder\"></i> ").concat(printer.fileList.folderCount);
                }

                if (typeof printer.storage !== "undefined") {
                  elements.fileManager.printerStorage.innerHTML = "<i class=\"fas fa-hdd\"></i> ".concat(_calc["default"].bytes(printer.storage.free), " / ").concat(_calc["default"].bytes(printer.storage.total));
                } else {
                  elements.fileManager.printerStorage.innerHTML = "<i class=\"fas fa-hdd\"></i> ".concat(_calc["default"].bytes(0), " / ").concat(_calc["default"].bytes(0));
                }

                elements.mainPage.status.innerHTML = printer.printerState.state;
                elements.mainPage.status.className = "btn btn-".concat(printer.printerState.colour.name, " mb-2");
                dateComplete = null;
                camField = document.getElementById("fileThumbnail");

                if (typeof printer.currentJob !== "undefined" && printer.currentJob.thumbnail != null) {
                  if (camField.innerHTML !== "<center><img width=\"50%\" src=\"".concat(printer.printerURL, "/").concat(printer.currentJob.thumbnail, "\"></center>")) {
                    camField.innerHTML = "<center><img width=\"50%\" src=\"".concat(printer.printerURL, "/").concat(printer.currentJob.thumbnail, "\"></center>");
                  }
                } else {
                  if (camField.innerHTML !== "") {
                    camField.innerHTML = "";
                  }
                }

                if (typeof printer.currentJob !== "undefined" && printer.currentJob.printTimeRemaining !== null) {
                  currentDate = new Date();

                  if (printer.currentJob.progress === 100) {
                    dateComplete = "Print Ready for Harvest";
                  } else {
                    currentDate = currentDate.getTime();
                    futureDateString = new Date(currentDate + printer.currentJob.printTimeRemaining * 1000).toDateString();
                    futureTimeString = new Date(currentDate + printer.currentJob.printTimeRemaining * 1000).toTimeString();
                    futureTimeString = futureTimeString.substring(0, 8);
                    dateComplete = futureDateString + ": " + futureTimeString;
                  }
                } else {
                  dateComplete = "No Active Print";
                }

                elements.jobStatus.expectedCompletionDate.innerHTML = dateComplete;

                if (typeof printer.resends !== "undefined" && printer.resends !== null) {
                  if (elements.jobStatus.printerResends.classList.contains("d-none")) {
                    elements.jobStatus.printerResends.classList.remove("d-none");
                    elements.jobStatus.resendTitle.classList.remove("d-none");
                  }

                  elements.jobStatus.printerResends.innerHTML = "\n      ".concat(printer.resends.count, " / ").concat(printer.resends.transmitted / 1000, "K (").concat(printer.resends.ratio.toFixed(0), ")\n      ");
                }

                if (typeof printer.currentJob !== "undefined" && printer.currentJob.progress !== null) {
                  elements.jobStatus.progressBar.innerHTML = printer.currentJob.progress.toFixed(0) + "%";
                  elements.jobStatus.progressBar.style.width = printer.currentJob.progress.toFixed(2) + "%";
                } else {
                  elements.jobStatus.progressBar.innerHTML = 0 + "%";
                  elements.jobStatus.progressBar.style.width = 0 + "%";
                }

                elements.jobStatus.expectedTime.innerHTML = _calc["default"].generateTime(printer.currentJob.expectedPrintTime);
                elements.jobStatus.remainingTime.innerHTML = _calc["default"].generateTime(printer.currentJob.printTimeRemaining);
                elements.jobStatus.elapsedTime.innerHTML = _calc["default"].generateTime(printer.currentJob.printTimeElapsed);

                if (printer.currentJob.currentZ === null) {
                  elements.jobStatus.currentZ.innerHTML = "No Active Print";
                } else {
                  elements.jobStatus.currentZ.innerHTML = printer.currentJob.currentZ + "mm";
                }

                if (typeof printer.currentJob === "undefined") {
                  elements.jobStatus.fileName.setAttribute("title", "No File Selected");
                  fileName = "No File Selected";
                  elements.jobStatus.fileName.innerHTML = fileName;
                } else {
                  elements.jobStatus.fileName.setAttribute("title", printer.currentJob.filePath);
                  _fileName = printer.currentJob.fileDisplay;

                  if (_fileName.length > 49) {
                    _fileName = _fileName.substring(0, 49) + "...";
                  }

                  elements.jobStatus.fileName.innerHTML = printer.currentJob.fileDisplay;
                  usageDisplay = "";
                  filamentCost = "";

                  if (printer.currentJob.expectedTotals !== null) {
                    usageDisplay += "<p class=\"mb-0\"><b>Total: </b>".concat(printer.currentJob.expectedTotals.totalLength.toFixed(2), "m / ").concat(printer.currentJob.expectedTotals.totalWeight.toFixed(2), "g</p>");
                    elements.jobStatus.expectedTotalCosts.innerHTML = printer.currentJob.expectedTotals.totalCost;
                  } else {
                    usageDisplay = "No File Selected";
                    elements.jobStatus.expectedTotalCosts.innerHTML = "No File Selected";
                  }

                  if (_typeof(printer.currentJob.expectedFilamentCosts) === "object") {
                    if (printer.currentJob.expectedFilamentCosts !== null) {
                      printer.currentJob.expectedFilamentCosts.forEach(function (unit) {
                        var firstKey = Object.keys(unit)[0];
                        var theLength = parseFloat(unit[firstKey].length);
                        var theWeight = parseFloat(unit[firstKey].weight);
                        usageDisplay += "<p class=\"mb-0\"><b>".concat(unit[firstKey].toolName, ": </b>").concat(theLength.toFixed(2), "m / ").concat(theWeight.toFixed(2), "g</p>");
                      });
                      filamentCost += "<p class=\"mb-0\"><b>Total: </b>".concat(printer.currentJob.expectedTotals.spoolCost.toFixed(2), "</p>");
                      printer.currentJob.expectedFilamentCosts.forEach(function (unit) {
                        var firstKey = Object.keys(unit)[0];
                        filamentCost += "<p class=\"mb-0\"><b>".concat(unit[firstKey].toolName, ": </b>").concat(unit[firstKey].cost, "</p>");
                      });
                    } else {
                      filamentCost = "No length estimate";
                    }
                  } else {
                    filamentCost = "No File Selected";
                  }

                  elements.jobStatus.expectedWeight.innerHTML = usageDisplay;
                  elements.jobStatus.expectedFilamentCost.innerHTML = filamentCost;
                  printCost = printer.currentJob.expectedPrinterCosts;
                  elements.jobStatus.expectedPrinterCost.innerHTML = printCost;
                }

                if (printer.printerState.colour.category === "Active") {
                  PrinterManager.controls(true, true);
                  elements.printerControls.printStart.disabled = true;
                  elements.printerControls.printStart.style.display = "inline-block";
                  elements.printerControls.printPause.disabled = false;
                  elements.printerControls.printPause.style.display = "inline-block";
                  elements.printerControls.printStop.disabled = false;
                  elements.printerControls.printStop.style.display = "inline-block";
                  elements.printerControls.printRestart.disabled = true;
                  elements.printerControls.printRestart.style.display = "none";
                  elements.printerControls.printResume.disabled = true;
                  elements.printerControls.printResume.style.display = "none";
                } else if (printer.printerState.colour.category === "Idle" || printer.printerState.colour.category === "Complete") {
                  PrinterManager.controls(false);
                  elements.connectPage.connectButton.value = "disconnect";
                  elements.connectPage.connectButton.innerHTML = "Disconnect";
                  elements.connectPage.connectButton.classList = "btn btn-danger inline";
                  elements.connectPage.connectButton.disabled = false;
                  elements.connectPage.printerPort.disabled = true;
                  elements.connectPage.printerBaud.disabled = true;
                  elements.connectPage.printerProfile.disabled = true;

                  if (typeof printer.job !== "undefined" && printer.job.filename === "No File Selected") {
                    elements.printerControls.printStart.disabled = true;
                    elements.printerControls.printStart.style.display = "inline-block";
                    elements.printerControls.printPause.disabled = true;
                    elements.printerControls.printPause.style.display = "inline-block";
                    elements.printerControls.printStop.disabled = true;
                    elements.printerControls.printStop.style.display = "inline-block";
                    elements.printerControls.printRestart.disabled = true;
                    elements.printerControls.printRestart.style.display = "none";
                    elements.printerControls.printResume.disabled = true;
                    elements.printerControls.printResume.style.display = "none";
                  } else {
                    if (printer.printerState.state === "Paused") {
                      PrinterManager.controls(false);
                      elements.printerControls.printStart.disabled = true;
                      elements.printerControls.printStart.style.display = "none";
                      elements.printerControls.printPause.disabled = true;
                      elements.printerControls.printPause.style.display = "none";
                      elements.printerControls.printStop.disabled = false;
                      elements.printerControls.printStop.style.display = "inline-block";
                      elements.printerControls.printRestart.disabled = false;
                      elements.printerControls.printRestart.style.display = "inline-block";
                      elements.printerControls.printResume.disabled = false;
                      elements.printerControls.printResume.style.display = "inline-block";
                    } else {
                      elements.printerControls.printStart.disabled = false;
                      elements.printerControls.printStart.style.display = "inline-block";
                      elements.printerControls.printPause.disabled = true;
                      elements.printerControls.printPause.style.display = "inline-block";
                      elements.printerControls.printStop.disabled = true;
                      elements.printerControls.printStop.style.display = "inline-block";
                      elements.printerControls.printRestart.disabled = true;
                      elements.printerControls.printRestart.style.display = "none";
                      elements.printerControls.printResume.disabled = true;
                      elements.printerControls.printResume.style.display = "none";
                    }
                  }
                } else if (printer.printerState.colour.category === "Offline" || printer.printerState.colour.category === "Disconnected") {
                  if (printer.printerState.state === "Error!") {
                    document.getElementById("pmSerialPort").disabled = false;
                    document.getElementById("pmBaudrate").disabled = false;
                    document.getElementById("pmProfile").disabled = false;
                  }

                  elements.connectPage.connectButton.value = "connect";
                  elements.connectPage.connectButton.innerHTML = "Connect";
                  elements.connectPage.connectButton.classList = "btn btn-success inline";
                  elements.connectPage.connectButton.disabled = false;
                  PrinterManager.controls(true);
                  elements.printerControls.printStart.disabled = true;
                  elements.printerControls.printStart.style.display = "inline-block";
                  elements.printerControls.printPause.disabled = true;
                  elements.printerControls.printPause.style.display = "inline-block";
                  elements.printerControls.printStop.disabled = true;
                  elements.printerControls.printStop.style.display = "inline-block";
                  elements.printerControls.printRestart.disabled = true;
                  elements.printerControls.printRestart.style.display = "none";
                  elements.printerControls.printResume.disabled = true;
                  elements.printerControls.printResume.style.display = "none";

                  if (printer.printerState.state.category === "Offline" || printer.state === "Shutdown" || printer.state === "Searching...") {
                    $("#printerManagerModal").modal("hide");
                  }
                }

                isScrolledToBottom = elements.terminal.terminalWindow.scrollHeight - elements.terminal.terminalWindow.clientHeight <= elements.terminal.terminalWindow.scrollTop + 1;
                elements.terminal.terminalWindow.innerHTML = "";

                if (typeof printer.terminal !== "undefined") {
                  waitCheck = document.getElementById("waitMessages").checked;
                  tempCheck = document.getElementById("tempMessages").checked;
                  sdCheck = document.getElementById("sdMessages").checked;

                  for (l = 0; l < printer.terminal.length; l++) {
                    tempMess = /(Send: (N\d+\s+)?M105)|(Recv:\s+(ok\s+)?.*(B|T\d*):\d+)/;
                    sdMess = /(Send: (N\d+\s+)?M27)|(Recv: SD printing byte)/;
                    sdMess2 = /Recv: Not SD printing/;
                    waitMess = /Recv: wait/;

                    if (printer.terminal[l].match(tempMess)) {
                      if (tempCheck) {
                        elements.terminal.terminalWindow.insertAdjacentHTML("beforeend", "\n          <div id=\"logLine".concat(l, "\" class=\"logLine temperatureMessage\">").concat(printer.terminal[l], "</div>\n        "));
                      } else {
                        elements.terminal.terminalWindow.insertAdjacentHTML("beforeend", "\n          <div id=\"logLine".concat(l, "\" class=\"logLine temperatureMessage d-none\">").concat(printer.terminal[l], "</div>\n        "));
                      }
                    } else if (printer.terminal[l].match(sdMess) || printer.terminal[l].match(sdMess2)) {
                      if (sdCheck) {
                        elements.terminal.terminalWindow.insertAdjacentHTML("beforeend", "\n          <div id=\"logLine".concat(l, "\" class=\"logLine sdMessage\">").concat(printer.terminal[l], "</div>\n        "));
                      } else {
                        elements.terminal.terminalWindow.insertAdjacentHTML("beforeend", "\n          <div id=\"logLine".concat(l, "\" class=\"logLine sdMessage d-none\">").concat(printer.terminal[l], "</div>\n        "));
                      }
                    } else if (printer.terminal[l].match(waitMess)) {
                      if (waitCheck) {
                        elements.terminal.terminalWindow.insertAdjacentHTML("beforeend", "\n          <div id=\"logLine".concat(l, "\" class=\"logLine waitMessage\">").concat(printer.terminal[l], "</div>\n        "));
                      } else {
                        elements.terminal.terminalWindow.insertAdjacentHTML("beforeend", "\n          <div id=\"logLine".concat(l, "\" class=\"logLine waitMessage d-none\">").concat(printer.terminal[l], "</div>\n        "));
                      }
                    } else {
                      elements.terminal.terminalWindow.insertAdjacentHTML("beforeend", "\n          <div id=\"logLine".concat(l, "\" class=\"logLine\">").concat(printer.terminal[l], "</div>\n        "));
                    }
                  }
                }

                if (isScrolledToBottom) {
                  elements.terminal.terminalWindow.scrollTop = elements.terminal.terminalWindow.scrollHeight - elements.terminal.terminalWindow.clientHeight;
                }

              case 21:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26);
      }));

      function applyState(_x30, _x31) {
        return _applyState.apply(this, arguments);
      }

      return applyState;
    }()
  }, {
    key: "applyTemps",
    value: function () {
      var _applyTemps = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(printer, elements) {
        var currentTemp, keys;
        return regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                if (printer.tools !== null) {
                  currentTemp = printer.tools[0];
                  elements.temperatures.tempTime.innerHTML = "Updated: <i class=\"far fa-clock\"></i> " + new Date(currentTemp.time * 1000).toTimeString().substring(1, 8);

                  if (currentTemp.bed.actual !== null) {
                    elements.temperatures.bed[0].innerHTML = currentTemp.bed.actual + "°C";
                    elements.temperatures.bed[1].placeholder = currentTemp.bed.target + "°C";
                  }

                  if (currentTemp.chamber.actual !== null) {
                    elements.temperatures.chamber[0].innerHTML = currentTemp.chamber.actual + "°C";
                    elements.temperatures.chamber[1].placeholder = currentTemp.chamber.target + "°C";
                  }

                  keys = Object.keys(currentTemp);
                  keys = keys.reverse();
                  keys.forEach(function (key) {
                    if (key.includes("tool")) {
                      elements.temperatures.tools.forEach(function (tool) {
                        if (tool.id.includes(key) && tool.id.includes("Actual")) {
                          tool.innerHTML = currentTemp[key].actual + "°C";
                        }

                        if (tool.id.includes(key) && tool.id.includes("Target")) {
                          tool.placeholder = currentTemp[key].target + "°C";
                        }
                      });
                    }
                  }); //Setup listeners
                }

              case 1:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27);
      }));

      function applyTemps(_x32, _x33) {
        return _applyTemps.apply(this, arguments);
      }

      return applyTemps;
    }()
  }, {
    key: "controls",
    value: function () {
      var _controls = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(enable, printing) {
        var elements, _elements2, filamentDrops;

        return regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                _context28.next = 2;
                return PrinterManager.grabPage();

              case 2:
                elements = _context28.sent;
                _elements2 = elements, filamentDrops = _elements2.filamentDrops;
                elements = elements.printerControls;

                if (typeof printing !== "undefined" && printing) {
                  elements.feedRate.disabled = !printing;
                  elements.flowRate.disabled = !printing;
                  elements.fansOn.disabled = !printing;
                  elements.fansOff.disabled = !printing;
                  filamentDrops.forEach(function (drop) {
                    drop.disabled = printing;
                  });
                } else {
                  elements.feedRate.disabled = enable;
                  elements.flowRate.disabled = enable;
                  elements.fansOn.disabled = enable;
                  elements.fansOff.disabled = enable;
                  filamentDrops.forEach(function (drop) {
                    drop.disabled = enable;
                  });
                }

                elements.xPlus.disabled = enable;
                elements.xMinus.disabled = enable;
                elements.yPlus.disabled = enable;
                elements.yMinus.disabled = enable;
                elements.xyHome.disabled = enable;
                elements.zPlus.disabled = enable;
                elements.zMinus.disabled = enable;
                elements.zHome.disabled = enable;
                elements.step01.disabled = enable;
                elements.step1.disabled = enable;
                elements.step10.disabled = enable;
                elements.step100.disabled = enable;
                elements.motorsOff.disabled = enable;
                elements.extrude.disabled = enable;
                elements.retract.disabled = enable;

              case 21:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28);
      }));

      function controls(_x34, _x35) {
        return _controls.apply(this, arguments);
      }

      return controls;
    }()
  }]);

  return PrinterManager;
}();

exports["default"] = PrinterManager;

},{"../functions/calc.js":1,"../functions/ui.js":4,"../modules/fileSorting.js":11,"../octofarm.js":18,"../octoprint.js":19,"./customScripts.js":8,"./filamentGrab.js":9,"./fileManager.js":10}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

var _ui = _interopRequireDefault(require("../functions/ui.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var editMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\nUpdate any of the printer values below and press action when you've made your changes.\n</div>\n<div class=\"alert alert-warning\" role=\"alert\">\n OctoFarm will then update only the changed printers.\n</div>\n";
var deleteMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\nSelect which printers you'd like to delete. Press action when you have selected all the printers you'd like to remove.\n</div>\n<div class=\"alert alert-danger\" role=\"alert\">\n This is unrecoverable! If you remove the database entry for your printer, any links in the database will be lost... i.e. History/Statistics. Unless you have a backup in place.\n</div>\n";
var connectMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\nPlease select which printers you'd like to connect to from OctoPrint. Selected printers will attempt a connection with the preferred port settings from OctoPrint.\n</div>\n<div class=\"alert alert-warning\" role=\"alert\">\nThis can be updated in your printer settings on OctoFarm/OctoPrint. You will need to re-scan for OctoFarm to detect the changes if updated on OctoPrint.\n</div>\n<div class=\"alert alert-danger\" role=\"alert\">\n If this doesn't exist the connection attempt will fall back to AUTO and could fail/put your printer in an error state. \n</div>\n";
var disconnectMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\nPlease select which printers you'd like to disconnect from OctoPrint.\n</div>\n<div class=\"alert alert-warning\" role=\"alert\">\nThis will by default skip Active printers. This is not an emergency stop button!\n</div>\n\n";
var pluginInstallMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\nPlease select which printers you'd like to action a plugin installation on... You will be able to choose multiple plugins on the next pop up.\n</div>\n<div class=\"alert alert-warning\" role=\"alert\">\n  Your plugin installation will be skipped if it's already installed...\n</div>\n";
var powerOnOffMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\nPlease select your list of printers to action the power command on. You will be able to choose the actual command on the next pop up.\n</div>\n<div class=\"alert alert-danger\" role=\"alert\">\n  These commands will run without user interaction... It will skip by default any active printers.\n</div>\n";
var preHeatMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\n  Please select your list of printers to action the pre-heat command. You will configure the temperatures on the next pop up.\n</div>\n<div class=\"alert alert-danger\" role=\"alert\">\n  Due to this allowing for temps to be actioned on the fly it will not check printer state before doing so.\n</div>\n";
var controlPrintersMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\n  Please select your list of printers you'd like to bulk control.\n</div>\n<div class=\"alert alert-danger\" role=\"alert\">\n  Due to this allowing for temps to be actioned on the fly it will not check printer state before doing so.\n</div>\n";
var gcodePrintersMessage = "\n<div class=\"alert alert-info\" role=\"alert\">\n  Please select your list of printers you'd like to send gcode commands to.\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\n  Commands split up by a new line will be sent sequentially to the terminal.\n</div>\n<div class=\"alert alert-danger\" role=\"alert\">\n  Due to this allowing for gcode commands to be sent on the fly it will not check printer state before doing so.\n</div>\n";
var printersTable = "\n<div class=\"row\">\n    <div class=\"col-lg-12\">\n      <div class=\"pb-2\" id=\"selectMessageBox\"></div>\n    </div>\n    <div class=\"col-md-3\">\n      <div class=\"input-group mb-3\">\n        <div class=\"input-group-prepend\">\n            <label class=\"input-group-text\" for=\"printerStateList\">State: </label>\n        </div>\n        <select class=\"custom-select\" id=\"printerStateList\" data-jplist-control=\"select-filter\" data-group=\"printer-list\" data-name=\"state\">\n          <option selected href=\"#\" data-value=\"all\"data-path=\"default\">\n            Filter\n          </option>\n          <option href=\"#\" value=\"active\" data-path=\".Active\">\n            Active\n          </option>\n          <option href=\"#\" value=\"idle\" data-path=\".Idle\">\n            Idle\n          </option>\n          <option href=\"#\" value=\"complete\" data-path=\".Complete\">\n            Complete\n          </option>\n          <option href=\"#\" value=\"disconnected\"data-path=\".Disconnected\">\n            Disconnected\n          </option>\n        </select>\n      </div>\n    </div>\n    <div class=\"col-md-3\">\n     <div class=\"input-group mb-3\">\n        <div class=\"input-group-prepend\">\n            <label class=\"input-group-text\" for=\"printerGroupList\">Group: </label>\n        </div>\n        <select class=\"custom-select\" id=\"printerGroupList\"\n                data-jplist-control=\"select-filter\"\n                data-group=\"printer-list\"\n                data-name=\"group\">\n<!--                            Filled dynamically -->\n        </select>\n      </div>\n    </div>\n    <div id=\"selectBtns\" class=\"col-md-3 text-center\">\n    </div>\n    <div id=\"actionBtn\" class=\"col-md-3  text-center\">\n    </div>\n</div>\n<table class=\"table table-dark\">\n  <thead>\n    <tr>\n      <th id=\"selectColumn\" scope=\"col\">Select</th>\n      <th scope=\"col\">Index</th>\n      <th scope=\"col\">Name</th>\n      <th scope=\"col\" id=\"urlColumn\" class=\"d-none\">Printer URL</th>\n      <th id=\"stateColumn\" scope=\"col\">State</th>\n      <th scope=\"col\">Group</th>\n      <th id=\"spoolColumn\" scope=\"col\">Spool</th>\n      <th id=\"cameraColumn\" scope=\"col\" class=\"d-none\">Camera URL</th>\n      <th id=\"apiColumn\" scope=\"col\" class=\"d-none\">API KEY</th>\n    </tr>\n  </thead>\n  <tbody id=\"printerSelectBody\" data-jplist-group=\"printer-list\">\n<!-- Filled dynamically -->\n  </tbody>\n</table>\n";

var PrinterSelect = /*#__PURE__*/function () {
  function PrinterSelect() {
    _classCallCheck(this, PrinterSelect);
  }

  _createClass(PrinterSelect, null, [{
    key: "getSelectableList",
    value: function getSelectableList(printer) {
      return "\n<tr id=\"".concat(printer.id, "\" class=\"").concat(printer.state, "\" data-jplist-item>\n    <td>\n        <div class=\"custom-control custom-checkbox\">\n            <input type=\"checkbox\" class=\"custom-control-input Idle\" id=\"checkBox-").concat(printer.id, "\" value=\"").concat(printer.id, "\">\n            <label class=\"custom-control-label\" for=\"checkBox-").concat(printer.id, "\">\n            </label>\n        </div>\n    </td>\n    <th scope=\"row\">").concat(printer.index, "</th>\n    <td>").concat(printer.name, "</td>\n    <td class=\"").concat(printer.state, "\">").concat(printer.state, "</td>\n    <td class=\"").concat(printer.group.replace(/\s/g, "_"), "\">").concat(printer.group, "</td>\n    <td>").concat(printer.spool, "</td>\n</tr>\n");
    }
  }, {
    key: "getEditableList",
    value: function getEditableList(printer) {
      return "\n<tr id=\"editPrinterCard-".concat(printer.id, "\" class=\"").concat(printer.state, "\" data-jplist-item>\n  <th scope=\"row\">").concat(printer.index, "</th>\n  <td><input id=\"editInputName-").concat(printer.id, "\" type=\"text\" class=\"form-control Idle\" placeholder=\"").concat(printer.name, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"></td>\n                          <td><input id=\"editInputURL-").concat(printer.id, "\" type=\"text\" class=\"form-control Idle\" placeholder=\"").concat(printer.printerURL, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"></td>\n                          <td class=\"").concat(printer.state, " d-none\">").concat(printer.state, "</td>\n                          <td><input id=\"editInputGroup-").concat(printer.id, "\" type=\"text\" class=\"form-control Idle\" placeholder=\"").concat(printer.group, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"></td>\n                          <td><input id=\"editInputCamera-").concat(printer.id, "\" type=\"text\" class=\"form-control Idle\" placeholder=\"").concat(printer.cameraURL, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"></td>\n                          <td><input id=\"editInputApikey-").concat(printer.id, "\" type=\"text\" class=\"form-control Idle\" placeholder=\"").concat(printer.apikey, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"></td>\n    </tr>");
    }
  }, {
    key: "isOffline",
    value: function isOffline(state, editable, override) {
      if (editable) {
        return true;
      } else if (override) {
        return true;
      } else {
        return state !== "Offline";
      }
    }
  }, {
    key: "create",
    value: function () {
      var _create = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(element, editable, action, callback) {
        var _this = this;

        var saveEditsBtn, messageBox, override, printersInfo, printers, groupList, printerList, groupListUnique, tableBody, printerGroupList, _tableBody;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                saveEditsBtn = document.getElementById("saveEditsBtn");

                if (saveEditsBtn) {
                  saveEditsBtn.remove();
                }

                if (action) {
                  document.getElementById("printerEditLabel").innerHTML = action;
                } //Setup elements


                element.innerHTML = "";
                element.innerHTML = printersTable;
                messageBox = document.getElementById("selectMessageBox");
                messageBox.innerHTML = "";
                override = false;

                if (action === "Printer Deletion") {
                  override = true;
                  messageBox.innerHTML = deleteMessage;
                } else if (action === "Edit Printers") {
                  messageBox.innerHTML = editMessage;
                } else if (action === "Disconnect Printers") {
                  messageBox.innerHTML = disconnectMessage;
                } else if (action === "Connect Printers") {
                  messageBox.innerHTML = connectMessage;
                } else if (action === "Install Plugins") {
                  messageBox.innerHTML = pluginInstallMessage;
                } else if (action === "Power On/Off Printers") {
                  messageBox.innerHTML = powerOnOffMessage;
                } else if (action === "Pre-Heat Printers") {
                  messageBox.innerHTML = preHeatMessage;
                } else if (action === "Control Printers") {
                  messageBox.innerHTML = controlPrintersMessage;
                } else if (action === "Send Gcode to Printers") {
                  messageBox.innerHTML = gcodePrintersMessage;
                }

                _context.next = 11;
                return _octofarm["default"].post("printers/printerInfo");

              case 11:
                printersInfo = _context.sent;
                _context.next = 14;
                return printersInfo.json();

              case 14:
                printers = _context.sent;
                groupList = [];
                printerList = [];
                printers.forEach(function (printer) {
                  if (typeof printer.printerState !== "undefined" && _this.isOffline(printer.printerState.colour.category, editable, override)) {
                    var spoolName = "";

                    if (printer.selectedFilament.length !== 0) {
                      printer.selectedFilament.forEach(function (spool, index) {
                        if (spool !== null) {
                          spoolName += "Tool ".concat(index, ": ").concat(spool.spools.name, " - ").concat(spool.spools.material, " <br>");
                        } else {
                          spoolName += "Tool ".concat(index, ": No Spool Selected <br>");
                        }
                      });
                    } else {
                      spoolName = "No Spool Selected";
                    }

                    var forList = {
                      id: printer._id,
                      index: printer.sortIndex,
                      name: printer.printerName,
                      printerURL: printer.printerURL,
                      state: printer.printerState.colour.category,
                      group: printer.group,
                      spool: spoolName,
                      cameraURL: printer.cameraURL,
                      apikey: printer.apikey
                    };
                    printerList.push(forList);
                  }

                  if (printer.group !== "") {
                    var group = {
                      display: printer.group,
                      tag: printer.group.replace(/\s/g, "_")
                    };
                    groupList.push(group);
                  }
                });
                groupListUnique = _.uniq(groupList, "tag");

                if (printerList.length !== 0) {
                  //Create printers table
                  tableBody = document.getElementById("printerSelectBody");

                  if (editable) {
                    document.getElementById("spoolColumn").classList.add("d-none");
                    document.getElementById("stateColumn").classList.add("d-none");
                    document.getElementById("cameraColumn").classList.remove("d-none");
                    document.getElementById("apiColumn").classList.remove("d-none");
                    document.getElementById("selectColumn").classList.add("d-none");
                    document.getElementById("urlColumn").classList.remove("d-none");
                    printerList.forEach(function (printer) {
                      tableBody.insertAdjacentHTML("beforeend", _this.getEditableList(printer));
                    });
                  } else {
                    printerList.forEach(function (printer) {
                      tableBody.insertAdjacentHTML("beforeend", _this.getSelectableList(printer));
                    });
                  }

                  printerGroupList = document.getElementById("printerGroupList");
                  printerGroupList.innerHTML = "";
                  printerGroupList.insertAdjacentHTML("beforeend", '<option selected value="all" data-path="default">Filter</option>');
                  groupListUnique.forEach(function (group, index) {
                    printerGroupList.insertAdjacentHTML("beforeend", "<option value=\"".concat(group.tag.toLowerCase(), "\" data-path=\".").concat(group.tag, "\">").concat(group.display, "</option>"));
                  }); // Printer group dropdown

                  printers.forEach(function (printer) {
                    var printerGroupAssignSelect = document.getElementById("editInputGroup-".concat(printer._id));
                    if (!printerGroupAssignSelect) return;
                    groupListUnique.forEach(function (group, index) {
                      printerGroupAssignSelect.insertAdjacentHTML("beforeend", "<option value=\"".concat(group.tag.toLowerCase(), "\" data-path=\".").concat(group.tag, "\">").concat(group.display, "</option>"));
                    });
                  });
                } else {
                  _tableBody = document.getElementById("printerSelectBody");

                  _tableBody.insertAdjacentHTML("beforeend", "<tr><td>No Online Printers</td></tr>");
                }

                PrinterSelect.addListeners(editable, callback);

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function create(_x, _x2, _x3, _x4) {
        return _create.apply(this, arguments);
      }

      return create;
    }()
  }, {
    key: "addListeners",
    value: function addListeners(editable, callback) {
      if (!editable) {
        document.getElementById("selectBtns").innerHTML = "\n                    <button id=\"selectAll\" type=\"button\" class=\"btn btn-secondary\"><i class=\"fas fa-check-square\"></i> Select All</button>\n                    <button id=\"selectNone\" type=\"button\" class=\"btn btn-secondary\"><i class=\"fas fa-square\"></i> Deselect All</button>\n            ";
        document.getElementById("selectAll").addEventListener("click", function (e) {
          var checkBoxes = document.querySelectorAll("input[type=\"checkbox\"]:not(:checked)");
          checkBoxes.forEach(function (box) {
            box.checked = true;
          });
        });
        document.getElementById("selectNone").addEventListener("click", function (e) {
          var checkBoxes = document.querySelectorAll('input[type="checkbox"]:checked');
          checkBoxes.forEach(function (box) {
            box.checked = false;
          });
        });
      } else {
        _ui["default"].addSelectListeners("editInput");
      }

      if (callback) {
        document.getElementById("actionBtn").insertAdjacentHTML("beforeend", "\n                      <button id=\"saveEditsBtn\" class=\"btn btn-success\" data-dismiss=\"modal\" aria-label=\"Close\">Action</button>\n      ");
        document.getElementById("saveEditsBtn").addEventListener("click", callback);
      }

      jplist.init();
    }
  }, {
    key: "getSelected",
    value: function getSelected() {
      var checkedBoxes = document.querySelectorAll("input[type=\"checkbox\"]:checked");
      var printers = [];
      checkedBoxes.forEach(function (box) {
        if (box.id.includes("checkBox")) {
          printers.push(box);
        }
      });
      return printers;
    }
  }, {
    key: "selectFilter",
    value: function selectFilter() {}
  }]);

  return PrinterSelect;
}();

exports["default"] = PrinterSelect;

},{"../functions/ui.js":4,"../octofarm.js":18}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

var _ui = _interopRequireDefault(require("../functions/ui.js"));

var _scriptCheck = _interopRequireDefault(require("./scriptCheck.js"));

var _calc = _interopRequireDefault(require("../functions/calc.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var currentIndex = 0;
var controlDropDown = false;
var currentPrinter = null; // Close modal event listeners...

$("#PrinterSettingsModal").on("hidden.bs.modal", function () {
  // Fix for mjpeg stream not ending when element removed...
  document.getElementById("printerControlCamera").src = "";

  if (document.getElementById("printerSelection")) {
    document.getElementById("printerSelection").remove();
    controlDropDown = false;
  }
});
$("#connectionModal").on("hidden.bs.modal", function () {
  if (document.getElementById("connectionAction")) {
    document.getElementById("connectionAction").remove();
  }
});

var PrinterSettings = /*#__PURE__*/function () {
  function PrinterSettings() {
    _classCallCheck(this, PrinterSettings);
  }

  _createClass(PrinterSettings, null, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(index, printers, printerControlList) {
        var printerProfileBtn, printerGcodeBtn, printerOtherSettings, id, printerDrop, offline, printerDefaultPort, printerDefaultBaud, printerDefaultProfile, afterPrintCancelled, afterPrintDone, afterPrintPaused, afterPrinterConnected, beforePrintResumed, afterToolChange, beforePrintStarted, beforePrinterDisconnected, beforeToolChange, serverRestart, systemRestart, systemShutdown, wolEnable, wolIP, wolPort, wolInterval, wolCount, wolMAC, scripts, printerScripts, alertsTable, _id;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;

                if (!(index !== "")) {
                  _context4.next = 69;
                  break;
                }

                _ui["default"].clearSelect("ps");

                printerProfileBtn = document.getElementById("printer-profile-btn");
                printerGcodeBtn = document.getElementById("printer-gcode-btn");
                printerOtherSettings = document.getElementById("printer-settings-btn");
                currentIndex = index;
                id = _.findIndex(printers, function (o) {
                  return o._id === index;
                });
                currentPrinter = printers[id]; // Load the printer dropdown

                if (!controlDropDown) {
                  printerDrop = document.getElementById("printerSettingsSelection");
                  printerDrop.innerHTML = "";
                  printerControlList.forEach(function (list) {
                    if (list.state.category !== "Offline") {
                      printerDrop.insertAdjacentHTML("beforeend", "\n                  <option value=\"".concat(list.printerID, "\" selected>").concat(list.printerName, "</option>\n              "));
                    }
                  });
                  printerDrop.value = currentPrinter._id;
                  printerDrop.addEventListener("change", function (event) {
                    if (document.getElementById("printerControls")) {
                      document.getElementById("printerControls").innerHTML = "";
                    }

                    document.getElementById("pmStatus").innerHTML = "<i class=\"fas fa-spinner fa-spin\"></i>";
                    document.getElementById("pmStatus").className = "btn btn-secondary mb-2"; //Load Connection Panel

                    document.getElementById("printerPortDrop").innerHTML = "";
                    document.getElementById("printerBaudDrop").innerHTML = "";
                    document.getElementById("printerProfileDrop").innerHTML = "";
                    document.getElementById("printerConnect").innerHTML = "";
                    PrinterSettings.init(event.target.value, printers, printerControlList);
                  });
                  controlDropDown = true;
                }

                offline = false;

                if (currentPrinter.printerState.colour.category === "Offline") {
                  offline = true;
                  printerProfileBtn.disabled = true;
                  printerGcodeBtn.disabled = true;
                  printerOtherSettings.disabled = true;

                  if (!printerProfileBtn.classList.contains("notyet")) {
                    printerProfileBtn.classList.add("notyet");
                  }

                  if (!printerGcodeBtn.classList.contains("notyet")) {
                    printerGcodeBtn.classList.add("notyet");
                  }

                  if (!printerOtherSettings.classList.contains("notyet")) {
                    printerOtherSettings.classList.add("notyet");
                  }
                } else {
                  printerProfileBtn.disabled = false;
                  printerGcodeBtn.disabled = false;
                  printerOtherSettings.disabled = false;

                  if (printerProfileBtn.classList.contains("notyet")) {
                    printerProfileBtn.classList.remove("notyet");
                  }

                  if (printerGcodeBtn.classList.contains("notyet")) {
                    printerGcodeBtn.classList.remove("notyet");
                  }

                  if (printerOtherSettings.classList.contains("notyet")) {
                    printerOtherSettings.classList.remove("notyet");
                  }
                }

                printerDefaultPort = document.getElementById("psDefaultPortDrop");
                printerDefaultBaud = document.getElementById("psDefaultBaudDrop");
                printerDefaultProfile = document.getElementById("psDefaultProfileDrop");
                printerDefaultPort.innerHTML = "\n        <div class=\"input-group mb-1\"> <div class=\"input-group-prepend\"> <label class=\"input-group-text bg-secondary text-light\" for=\"psDefaultSerialPort\"\">Preferred Port:</label> </div> <select class=\"custom-select bg-secondary text-light\" id=\"psDefaultSerialPort\"></select></div>\n        ";
                printerDefaultBaud.innerHTML = "\n        <div class=\"input-group mb-1\"> <div class=\"input-group-prepend\"> <label class=\"input-group-text bg-secondary text-light\" for=\"psDefaultBaudrate\">Preferred Baudrate:</label> </div> <select class=\"custom-select bg-secondary text-light\" id=\"psDefaultBaudrate\"></select></div>\n        ";
                printerDefaultProfile.innerHTML = "\n        <div class=\"input-group mb-1\"> <div class=\"input-group-prepend\"> <label class=\"input-group-text bg-secondary text-light\" for=\"psDefaultProfile\">Preferred Profile:</label> </div> <select class=\"custom-select bg-secondary text-light\" id=\"psDefaultProfile\"></select></div>\n        ";
                document.getElementById("psOctoPrintUser").placeholder = currentPrinter.currentUser;
                document.getElementById("psPrinterName").placeholder = currentPrinter.printerName;
                document.getElementById("psPrinterURL").placeholder = currentPrinter.printerURL;
                document.getElementById("psCamURL").placeholder = currentPrinter.cameraURL;
                document.getElementById("psAPIKEY").placeholder = currentPrinter.apikey;

                if (!offline) {
                  currentPrinter.connectionOptions.baudrates.forEach(function (baud) {
                    document.getElementById("psDefaultBaudrate").insertAdjacentHTML("beforeend", "<option value=\"".concat(baud, "\">").concat(baud, "</option>"));
                  });

                  if (currentPrinter.connectionOptions.baudratePreference === null) {
                    document.getElementById("psDefaultBaudrate").insertAdjacentHTML("afterbegin", "<option value=\"0\">No Preference</option>");
                  }

                  currentPrinter.connectionOptions.ports.forEach(function (port) {
                    document.getElementById("psDefaultSerialPort").insertAdjacentHTML("beforeend", "<option value=\"".concat(port, "\">").concat(port, "</option>"));
                  });

                  if (currentPrinter.connectionOptions.portPreference === null) {
                    document.getElementById("psDefaultSerialPort").insertAdjacentHTML("afterbegin", "<option value=\"0\">No Preference</option>");
                  }

                  currentPrinter.connectionOptions.printerProfiles.forEach(function (profile) {
                    document.getElementById("psDefaultProfile").insertAdjacentHTML("beforeend", "<option value=\"".concat(profile.id, "\">").concat(profile.name, "</option>"));
                  });

                  if (currentPrinter.connectionOptions.printerProfilePreference === null) {
                    document.getElementById("psDefaultProfile").insertAdjacentHTML("afterbegin", "<option value=\"0\">No Preference</option>");
                  }

                  if (currentPrinter.connectionOptions.baudratePreference != null) {
                    document.getElementById("psDefaultBaudrate").value = currentPrinter.connectionOptions.baudratePreference;
                  } else {
                    document.getElementById("psDefaultBaudrate").value = 0;
                  }

                  if (currentPrinter.connectionOptions.portPreference != null) {
                    document.getElementById("psDefaultSerialPort").value = currentPrinter.connectionOptions.portPreference;
                  } else {
                    document.getElementById("psDefaultSerialPort").value = 0;
                  }

                  if (currentPrinter.connectionOptions.printerProfilePreference != null) {
                    document.getElementById("psDefaultProfile").value = currentPrinter.connectionOptions.printerProfilePreference;
                  } else {
                    document.getElementById("psDefaultProfile").value = 0;
                  }

                  document.getElementById("psPrinterProfiles").innerHTML = "\n            <div class=\"col-12 col-lg-4\">\n            <h5 class=\"mb-1\"><u>Printer</u></h5>\n            <div class=\"input-group mb-3\">\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text\">Profile Name: </span>\n              </div>\n              <input id=\"psProfileName\" type=\"text\" class=\"form-control\" placeholder=\"".concat(currentPrinter.currentProfile.name, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\">\n            </div>\n            </p>\n                <div class=\"input-group mb-3\">\n                  <div class=\"input-group-prepend\">\n                    <span class=\"input-group-text\">Printer Model: </span>\n                  </div>\n                  <input id=\"psPrinterModel\" type=\"text\" class=\"form-control\" placeholder=\"").concat(currentPrinter.currentProfile.model, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\">\n                </div>\n            </p>\n            <h5 class=\"mb-1\"><u>Axis</u></h5>\n            <form class=\"was-validated\">\n                <div class=\"custom-control custom-checkbox mb-3\">\n                    <input type=\"checkbox\" class=\"custom-control-input\" id=\"psEInverted\" required>\n                    <label class=\"custom-control-label\" for=\"psEInverted\">E Inverted</label>\n                </div>\n            </form>\n            <div class=\"input-group mb-3\">\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text\">E:</span>\n              </div>\n              <input id=\"psPrinterEAxis\" type=\"number\" class=\"form-control\" placeholder=\"").concat(currentPrinter.currentProfile.axes.e.speed, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" step=\"1\" min=\"0\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text\">mm/min</span>\n              </div>\n            </div>\n            <form class=\"was-validated\">\n                <div class=\"custom-control custom-checkbox mb-3\">\n                    <input type=\"checkbox\" class=\"custom-control-input\" id=\"psXInverted\" required>\n                    <label class=\"custom-control-label\" for=\"psXInverted\">X Inverted</label>\n                </div>\n            </form>\n            <div class=\"input-group mb-3\">\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text\">X:</span>\n              </div>\n              <input id=\"psPrinterXAxis\" type=\"number\" class=\"form-control\" placeholder=\"").concat(currentPrinter.currentProfile.axes.x.speed, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" step=\"1\" min=\"0\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text\">mm/min</span>\n              </div>\n            </div>\n            <form class=\"was-validated\">\n                <div class=\"custom-control custom-checkbox mb-3\">\n                    <input type=\"checkbox\" class=\"custom-control-input\" id=\"psYInverted\" required>\n                    <label class=\"custom-control-label\" for=\"psYInverted\">Y Inverted</label>\n                </div>\n            </form>\n            <div class=\"input-group mb-3\">\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text\">Y:</span>\n              </div>\n              <input id=\"psPrinterYAxis\" type=\"number\" class=\"form-control\" placeholder=\"").concat(currentPrinter.currentProfile.axes.y.speed, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" step=\"1\" min=\"0\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text\">mm/min</span>\n              </div>\n            </div>\n            <form class=\"was-validated\">\n                <div class=\"custom-control custom-checkbox mb-3\">\n                    <input type=\"checkbox\" class=\"custom-control-input\" id=\"psZInverted\" required>\n                    <label class=\"custom-control-label\" for=\"psZInverted\">Z Inverted</label>\n                </div>\n            </form>\n            <div class=\"input-group mb-3\">\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text\">Z:</span>\n              </div>\n              <input id=\"psPrinterZAxis\" type=\"number\" class=\"form-control\" placeholder=\"").concat(currentPrinter.currentProfile.axes.z.speed, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" step=\"1\" min=\"0\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text\">mm/min</span>\n              </div>\n            </div>\n            </div>\n            <div class=\"col-12 col-lg-4\">\n            <h5 class=\"mb-1\"><u>Extrusion</u></h5>\n            <p class=\"mb-0\"><span><form class=\"was-validated\">\n                                        <div class=\"custom-control custom-checkbox mb-3\">\n                                            <input type=\"checkbox\" class=\"custom-control-input\" id=\"psSharedNozzle\" required>\n                                            <label class=\"custom-control-label\" for=\"psSharedNozzle\">Shared Nozzle</label>\n                                        </div>\n                                    </form></span></p>\n            <div class=\"input-group mb-3\">\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text\">Extruder Count:</span>\n              </div>\n              <input id=\"psExtruderCount\" type=\"number\" class=\"form-control\" placeholder=\"").concat(currentPrinter.currentProfile.extruder.count, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" step=\"1\" min=\"1\">\n            </div>\n             <div class=\"input-group mb-3\">\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text\">Nozzle Size:</span>\n              </div>\n              <input id=\"psNozzleDiameter\" type=\"number\" class=\"form-control\" placeholder=\"").concat(currentPrinter.currentProfile.extruder.nozzleDiameter, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" step=\"0.1\" min=\"0.1\">\n            </div>\n            </div>\n            <div class=\"col-12 col-lg-4\">\n                        <h5 class=\"mb-1\"><u>Bed / Chamber</u></h5>\n           <p class=\"mb-1\"><form class=\"was-validated\">\n                                                <div class=\"custom-control custom-checkbox mb-3\">\n                                                    <input type=\"checkbox\" class=\"custom-control-input\" id=\"psHeatedBed\" required>\n                                                    <label class=\"custom-control-label\" for=\"psHeatedBed\">Heated Bed</label>\n                                                </div>\n                                            </form></span></p>                  \n        <p class=\"mb-1\"><form class=\"was-validated\">\n                                                <div class=\"custom-control custom-checkbox mb-3\">\n                                                    <input type=\"checkbox\" class=\"custom-control-input\" id=\"psHeatedChamber\" required>\n                                                    <label class=\"custom-control-label\" for=\"psHeatedChamber\">Heated Chamber</label>\n                                                </div>\n                                            </form></span></p>  \n            <h5 class=\"mb-1\"><u>Dimensions</u></h5>\n              <div class=\"input-group mb-3\">\n              <div class=\"input-group-prepend\">\n                <label class=\"input-group-text\" for=\"extruderFormFactor\">Form Factor:</label>\n              </div>\n              <select class=\"custom-select\" id=\"extruderFormFactor\">\n                <option value=\"rectangular\">Rectangular</option>\n                <option value=\"circular\">Circular</option>\n              </select>\n            </div>\n            <div class=\"input-group mb-3\">\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text\">D:</span>\n              </div>\n              <input id=\"psVolumeDepth\" type=\"number\" class=\"form-control\" placeholder=\"").concat(currentPrinter.currentProfile.volume.depth, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" step=\"1\" min=\"1\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text\">mm</span>\n              </div>\n            </div>\n            <div class=\"input-group mb-3\">\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text\">H:</span>\n              </div>\n              <input id=\"psVolumeHeight\" type=\"number\" class=\"form-control\" placeholder=\"").concat(currentPrinter.currentProfile.volume.height, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" step=\"1\" min=\"1\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text\">mm</span>\n              </div>\n            </div>\n            <div class=\"input-group mb-3\">\n              <div class=\"input-group-prepend\">\n                <span class=\"input-group-text\">W:</span>\n              </div>\n              <input id=\"psVolumeWidth\" type=\"number\" class=\"form-control\" placeholder=\"").concat(currentPrinter.currentProfile.volume.width, "\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" step=\"1\" min=\"1\">\n              <div class=\"input-group-append\">\n                <span class=\"input-group-text\">mm</span>\n              </div>\n            </div>\n            </div>\n        ");
                  document.getElementById("extruderFormFactor").value = currentPrinter.currentProfile.volume.formFactor;
                  document.getElementById("psEInverted").checked = currentPrinter.currentProfile.axes.e.inverted;
                  document.getElementById("psXInverted").checked = currentPrinter.currentProfile.axes.x.inverted;
                  document.getElementById("psYInverted").checked = currentPrinter.currentProfile.axes.y.inverted;
                  document.getElementById("psZInverted").checked = currentPrinter.currentProfile.axes.z.inverted;
                  document.getElementById("psSharedNozzle").checked = currentPrinter.currentProfile.extruder.sharedNozzle;
                  document.getElementById("psHeatedBed").checked = currentPrinter.currentProfile.heatedBed;
                  document.getElementById("psHeatedChamber").checked = currentPrinter.currentProfile.heatedChamber;
                  afterPrintCancelled = "";

                  if (typeof currentPrinter.gcodeScripts.afterPrintCancelled !== "undefined") {
                    afterPrintCancelled = currentPrinter.gcodeScripts.afterPrintCancelled;
                  }

                  afterPrintDone = "";

                  if (typeof currentPrinter.gcodeScripts.afterPrintDone !== "undefined") {
                    afterPrintDone = currentPrinter.gcodeScripts.afterPrintDone;
                  }

                  afterPrintPaused = "";

                  if (typeof currentPrinter.gcodeScripts.afterPrintPaused !== "undefined") {
                    afterPrintPaused = currentPrinter.gcodeScripts.afterPrintPaused;
                  }

                  afterPrinterConnected = "";

                  if (typeof currentPrinter.gcodeScripts.afterPrinterConnected !== "undefined") {
                    afterPrinterConnected = currentPrinter.gcodeScripts.afterPrinterConnected;
                  }

                  beforePrintResumed = "";

                  if (typeof currentPrinter.gcodeScripts.beforePrintResumed !== "undefined") {
                    beforePrintResumed = currentPrinter.gcodeScripts.beforePrintResumed;
                  }

                  afterToolChange = "";

                  if (typeof currentPrinter.gcodeScripts.afterToolChange !== "undefined") {
                    afterToolChange = currentPrinter.gcodeScripts.afterToolChange;
                  }

                  beforePrintStarted = "";

                  if (typeof currentPrinter.gcodeScripts.beforePrintStarted !== "undefined") {
                    beforePrintStarted = currentPrinter.gcodeScripts.beforePrintStarted;
                  }

                  beforePrinterDisconnected = "";

                  if (typeof currentPrinter.gcodeScripts.beforePrinterDisconnected !== "undefined") {
                    beforePrinterDisconnected = currentPrinter.gcodeScripts.beforePrinterDisconnected;
                  }

                  beforeToolChange = "";

                  if (typeof currentPrinter.gcodeScripts.beforeToolChange !== "undefined") {
                    beforeToolChange = currentPrinter.gcodeScripts.beforeToolChange;
                  }

                  document.getElementById("psGcodeManagerGcode").innerHTML = "\n              <div class=\"form-group\">\n              <label for=\"psSettingsAfterPrinterCancelled\">After Printing Cancelled</label>\n              <textarea class=\"form-control bg-dark text-white\" id=\"psSettingsAfterPrinterCancelled\" rows=\"2\" placeholder=\"".concat(afterPrintCancelled, "\"></textarea>\n              <small>Anything you put here will be executed after any lines in your files.</small>\n              </div>\n              <div class=\"form-group\">\n              <label for=\"psSettingsAfterPrinterDone\">After Printing Done</label>\n              <textarea class=\"form-control bg-dark text-white\" id=\"psSettingsAfterPrinterDone\" rows=\"2\" placeholder=\"").concat(afterPrintDone, "\"></textarea>\n               <small>Anything you put here will be executed after any lines in your files.</small>\n              </div>\n              <div class=\"form-group\">\n              <label for=\"psSettingsAfterPrinterPaused\">After Printing Paused</label>\n              <textarea class=\"form-control bg-dark text-white\" id=\"psSettingsAfterPrinterPaused\" rows=\"2\" placeholder=\"").concat(afterPrintPaused, "\"></textarea>\n               <small>Anything you put here will be executed after any lines in your files.</small>\n              </div>\n              <div class=\"form-group\">\n              <label for=\"psSettingsAfterPrinterConnected\">After Printer Connected</label>\n              <textarea class=\"form-control bg-dark text-white\" id=\"psSettingsAfterPrinterConnected\" rows=\"2\" placeholder=\"").concat(afterPrinterConnected, "\"></textarea>\n               <small> Anything you put here will only be executed after the printer has established a connection.</small>\n              </div>\n              <div class=\"form-group\">\n              <label for=\"psSettingsAfterToolChange\">After Tool Change</label>\n              <textarea class=\"form-control bg-dark text-white\" id=\"psSettingsAfterToolChange\" rows=\"2\" placeholder=\"").concat(afterToolChange, "\"></textarea>\n               <small>Anything you put here will be executed after any tool change commands <code>Tn</code>.</small>\n              </div>\n              <div class=\"form-group\">\n              <label for=\"psSettingsBeforePrinterResumed\">Before Printing Resumed</label>\n              <textarea class=\"form-control bg-dark text-white\" id=\"psSettingsBeforePrinterResumed\" rows=\"2\" placeholder=\"").concat(beforePrintResumed, "\"></textarea>\n               <small>Anything you put here will be executed before any lines in your files.</small>\n              </div>\n              <div class=\"form-group\">\n              <label for=\"psSettingsBeforePrinterStarted\">Before Printing Started</label>\n              <textarea class=\"form-control bg-dark text-white\" id=\"psSettingsBeforePrinterStarted\" rows=\"2\" placeholder=\"").concat(beforePrintStarted, "\"></textarea>\n               <small>Anything you put here will be executed before any lines in your files.</small>\n              </div>\n              <div class=\"form-group\">\n              <label for=\"psSettingsBeforePrinterDisconnected\">Before Printer Disconnected</label>\n              <textarea class=\"form-control bg-dark text-white\" id=\"psSettingsBeforePrinterDisconnected\" rows=\"2\" placeholder=\"").concat(beforePrinterDisconnected, "\"></textarea>\n               <small> Anything you put here will only be executed when closing the connection actively. If the connection to the printer is suddenly lost nothing will be sent.</small>\n              </div>\n              <div class=\"form-group\">\n              <label for=\"psSettingsBeforeToolChange\">Before Tool Change</label>\n              <textarea class=\"form-control bg-dark text-white\" id=\"psSettingsBeforeToolChange\" rows=\"2\" placeholder=\"").concat(beforeToolChange, "\"></textarea>\n               <small>Anything you put here will be executed before any tool change commands <code>Tn</code>.</small>\n              </div>\n        ");
                  document.getElementById("cameraRotation").innerHTML = "\n        <form class=\"was-validated\">\n        <div class=\"custom-control custom-checkbox mb-3\">\n            <input type=\"checkbox\" class=\"custom-control-input\" id=\"camEnabled\" required>\n            <label class=\"custom-control-label\" for=\"camEnabled\">Enable Web Camera</label>\n        </div>\n        </form>\n        <form class=\"was-validated\">\n        <div class=\"custom-control custom-checkbox mb-3\">\n            <input type=\"checkbox\" class=\"custom-control-input\" id=\"camRot90\" required>\n            <label class=\"custom-control-label\" for=\"camRot90\">Rotate your camera by 90\xB0</label>\n        </div>\n        </form>\n        <form class=\"was-validated\">\n        <div class=\"custom-control custom-checkbox mb-3\">\n            <input type=\"checkbox\" class=\"custom-control-input\" id=\"camFlipH\" required>\n            <label class=\"custom-control-label\" for=\"camFlipH\">Flip your camera horizontally</label>\n        </div>\n        </form>\n        <form class=\"was-validated\">\n        <div class=\"custom-control custom-checkbox mb-3\">\n            <input type=\"checkbox\" class=\"custom-control-input\" id=\"camFlipV\" required>\n            <label class=\"custom-control-label\" for=\"camFlipV\">Flip your camera vertically</label>\n        </div>\n        </form>\n        <form class=\"was-validated\">\n        <div class=\"custom-control custom-checkbox mb-3\">\n            <input type=\"checkbox\" class=\"custom-control-input\" id=\"camTimelapse\" required>\n            <label class=\"custom-control-label\" for=\"camTimelapse\">Enable Time lapse</label>\n        </div>\n        </form>\n      ";
                  document.getElementById("camEnabled").checked = currentPrinter.otherSettings.webCamSettings.webcamEnabled;
                  document.getElementById("camTimelapse").checked = currentPrinter.otherSettings.webCamSettings.timelapseEnabled;
                  document.getElementById("camRot90").checked = currentPrinter.otherSettings.webCamSettings.rotate90;
                  document.getElementById("camFlipH").checked = currentPrinter.otherSettings.webCamSettings.flipH;
                  document.getElementById("camFlipV").checked = currentPrinter.otherSettings.webCamSettings.flipV;
                } else {
                  document.getElementById("offlineMessage").innerHTML = "<code>NOTE! Your printer is currently offline, any settings requiring an OctoPrint connection have been disabled... Please turn on your OctoPrint instance to re-enabled these.</code>";
                  document.getElementById("psDefaultSerialPort").disabled = true;
                  document.getElementById("psDefaultBaudrate").disabled = true;
                  document.getElementById("psDefaultProfile").disabled = true;
                }

                serverRestart = "N/A";
                systemRestart = "N/A";
                systemShutdown = "N/A";

                if (currentPrinter.otherSettings !== null) {
                  if (currentPrinter.otherSettings.system.commands.serverRestartCommand === "") {
                    serverRestart = "N/A";
                  } else {
                    serverRestart = currentPrinter.otherSettings.system.commands.serverRestartCommand;
                  }

                  if (currentPrinter.otherSettings.system.commands.systemRestartCommand === "") {
                    systemRestart = "N/A";
                  } else {
                    systemRestart = currentPrinter.otherSettings.system.commands.systemRestartCommand;
                  }

                  if (currentPrinter.otherSettings.system.commands.systemShutdownCommand === "") {
                    systemShutdown = "N/A";
                  } else {
                    systemShutdown = currentPrinter.otherSettings.system.commands.systemShutdownCommand;
                  }
                }

                document.getElementById("printerSettingsFooter").innerHTML = "";
                document.getElementById("printerSettingsFooter").insertAdjacentHTML("beforeend", "\n                           <button type=\"button\" class=\"btn btn-success btn-block\" id=\"savePrinterSettings\">Save</button>\n        ");
                wolEnable = false;
                wolIP = "255.255.255.255";
                wolPort = "9";
                wolInterval = "100";
                wolCount = "3";
                wolMAC = "";
                console.log(currentPrinter);

                if (currentPrinter.powerSettings !== null || _.isEmpty(currentPrinter.powerSettings) && typeof currentPrinter.powerSettings.wol !== "undefined") {
                  wolEnable = currentPrinter.powerSettings.wol.enabled;
                  wolIP = currentPrinter.powerSettings.wol.ip;
                  wolPort = currentPrinter.powerSettings.wol.port;
                  wolInterval = currentPrinter.powerSettings.wol.interval;
                  wolCount = currentPrinter.powerSettings.wol.packets;
                  wolMAC = currentPrinter.powerSettings.wol.MAC;
                }

                document.getElementById("psPowerCommands").innerHTML = "\n        <h5><u>OctoPrint Specific Power Commands</u></h5>\n        <form>\n          <div class=\"form-group\">\n            <label for=\"psServerRestart\">OctoPrint Server Restart</label>\n            <input type=\"text\" class=\"form-control\" id=\"psServerRestart\" placeholder=\"".concat(serverRestart, "\">\n            <small id=\"passwordHelpBlock\" class=\"form-text text-muted\">\n                Usually your OctoPrint hosts server restart command. i.e: <code>sudo service octoprint restart</code>\n            </small>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"psSystemRestart\">OctoPrint System Restart</label>\n            <input type=\"text\" class=\"form-control\" id=\"psSystemRestart\" placeholder=\"").concat(systemRestart, "\">\n            <small id=\"passwordHelpBlock\" class=\"form-text text-muted\">\n               Usually your OctoPrint hosts system restart command. i.e: <code>sudo shutdown -r now</code>\n            </small>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"psSystemShutdown\">OctoPrint System Shutdown</label>\n            <input type=\"text\" class=\"form-control\" id=\"psSystemShutdown\" placeholder=\"").concat(systemShutdown, "\">\n            <small id=\"passwordHelpBlock\" class=\"form-text text-muted\">\n              Usually your OctoPrint hosts system shutdown command. i.e: <code>sudo shutdown -h now</code>\n            </small>\n          </div>\n          <h5><u>Wake On Lan</u></h5>\n          <small>Enable and setup the ability for OctoFarm to fire a wake on lan packet to your client. Client MUST support wake on lan for this to work.</small>\n        <form class=\"was-validated\">\n          <div class=\"custom-control custom-checkbox mb-3\">\n              <input type=\"checkbox\" class=\"custom-control-input\" id=\"psWolEnable\" required>\n              <label class=\"custom-control-label\" for=\"wolEnable\">Enable wake on lan</label>\n              <div class=\"invalid-feedback\">Wake on Lan support disabled</div>\n              <div class=\"valid-feedback\">Wake on Lan support enabled</div>\n          </div>\n        </form>\n         <div class=\"form-row\">\n            <div class=\"col-2\">\n              <input id=\"psWolMAC\" type=\"text\" class=\"form-control\" placeholder=\"").concat(wolMAC, "\">\n               <small class=\"form-text text-muted\">\n                    MAC Address to target wake packet sending\n               </small>\n            </div>\n            <div class=\"col-2\">\n              <input id=\"psWolIP\"  type=\"text\" class=\"form-control\" placeholder=\"").concat(wolIP, "\" value=\"\">\n               <small class=\"form-text text-muted\">\n                    Broadcast Address to send wake packet too. <code>(255.255.255.255)</code>\n               </small>\n            </div>\n            <div class=\"col-2\">\n              <input id=\"psWolPort\"  type=\"text\" class=\"form-control\" placeholder=\"").concat(wolPort, "\" value=\"\">\n               <small class=\"form-text text-muted\">\n                Port to send wake packet too.  <code>(Default: 9)</code>\n               </small>\n            </div>\n            <div class=\"col-2\">\n              <input id=\"psWolInterval\"  type=\"text\" class=\"form-control\" placeholder=\"").concat(wolInterval, "\" value=\"\">\n               <small class=\"form-text text-muted\">\n                    Interval between packets. <code>(Default: 100)</code>\n               </small>\n            </div>\n            <div class=\"col-2\">\n              <input id=\"psWolCount\"  type=\"text\" class=\"form-control\" placeholder=\"").concat(wolCount, "\" value=\"\">\n               <small class=\"form-text text-muted\">\n                Amount of packets to send.  <code>(Default: 3)</code>\n               </small>\n            </div>\n          </div>\n          <hr>\n          <h5><u>Custom Power Commands</u></h5>\n          <p class=\"mb-0\">Setup a custom POST request to an API endpoint, instructions for such will be in your plugin/device instructions. Setting this up will activate the power button toggle on all Views and allow Power On and Power Off selections in the dropdown.</p>\n           <p class=\"mb-0\">If you'd like to enter in a full URL command then leave the command blank and it will skip the requirement and just make a POST to the URL provided similar to CURL. <br>You can use the following placeholders:</p>\n          <p class=\"mb-0\">Printer URL: <code>[PrinterURL]</code></p>\n          <p class=\"mb-0\">Printer API-KEY: <code>[PrinterAPI]</code></p>\n          <button id=\"resetPowerFields\" title=\"The dev coded himself into a corner here... Use this button to reset the below commands to blank.\" type=\"button\" class=\"btn btn-danger mb-2\">Reset Fields</button>\n          <h6>Power On</h6>\n           <div class=\"form-row\">\n              <div class=\"col-4\">\n                <input id=\"psPowerOnCommand\"  type=\"text\" class=\"form-control\" placeholder=\"Command\">\n                 <small class=\"form-text text-muted\">\n                  This is usually an json object supplied in the following format <code>{\"command\":\"turnOn\"}</code>\n                 </small>\n              </div>\n              <div class=\"col-8\">\n                <input id=\"psPowerOnURL\"  type=\"text\" class=\"form-control\" placeholder=\"URL\">\n                 <small class=\"form-text text-muted\">\n                  The URL endpoint you would like to make the request too. <code>[PrinterURL]/api/plugin/psucontrol</code>\n                 </small>\n              </div>\n            </div>\n           <h6>Power Off</h6>\n            <div class=\"form-row\">\n              <div class=\"col-4\">\n                <input id=\"psPowerOffCommand\" type=\"text\" class=\"form-control\" placeholder=\"Command\">\n                 <small class=\"form-text text-muted\">\n                   This is usually an json object supplied in the following format <code>{\"command\":\"turnOff\"}</code>\n                 </small>\n              </div>\n              <div class=\"col-8\">\n                <input  id=\"psPowerOffURL\" type=\"text\" class=\"form-control\" placeholder=\"URL\">\n                 <small class=\"form-text text-muted\">\n                   The URL endpoint you would like to make the request too. <code>[PrinterURL]/api/plugin/psucontrol</code>\n                 </small>\n              </div>\n            </div>\n            <h6>Power Toggle</h6>\n            <div class=\"form-row\">\n              <div class=\"col-4\">\n                <input id=\"psPowerToggleCommand\"  type=\"text\" class=\"form-control\" placeholder=\"Command\">\n                 <small class=\"form-text text-muted\">\n                   This is usually an json object supplied in the following format <code>{\"command\":\"toggle\"}</code>\n                 </small>\n              </div>\n              <div class=\"col-8\">\n                <input id=\"psPowerToggleURL\" type=\"text\" class=\"form-control\" placeholder=\"URL\">\n                 <small class=\"form-text text-muted\">\n                    The URL endpoint you would like to make the request too. <code>[PrinterURL]/api/plugin/psucontrol</code>\n                 </small>\n              </div>\n            </div>\n            <h6>Power Status</h6>\n            <p class=\"mb-0\">This must return a boolean value to work properly. When you enter this in your printer will show it's power state on the power button icon.</p>\n            <div class=\"form-row\">\n              <div class=\"col-4\">\n                <input id=\"psPowerStateCommand\" type=\"text\" class=\"form-control\" placeholder=\"Command\">\n                 <small class=\"form-text text-muted\">\n                   This is usually an json object supplied in the following format <code>{\"command\":\"state\"}</code>\n                 </small>\n              </div>\n              <div class=\"col-8\">\n                <input id=\"psPowerStateURL\" type=\"text\" class=\"form-control\" placeholder=\"URL\">\n                 <small class=\"form-text text-muted\">\n                    The URL endpoint you would like to make the request too. <code>[PrinterURL]/api/plugin/psucontrol</code>\n                 </small>\n              </div>\n            </div>\n        </form>\n        ");
                document.getElementById("psWolEnable").checked = wolEnable;

                if (serverRestart !== "N/A") {
                  document.getElementById("psServerRestart").placeholder = serverRestart;
                }

                if (systemRestart !== "N/A") {
                  document.getElementById("psSystemRestart").placeholder = systemRestart;
                }

                if (systemShutdown !== "N/A") {
                  document.getElementById("psSystemShutdown").placeholder = systemShutdown;
                }

                if (currentPrinter.powerSettings !== null && !_.isEmpty(currentPrinter.powerSettings)) {
                  document.getElementById("psPowerOnCommand").placeholder = currentPrinter.powerSettings.powerOnCommand;
                  document.getElementById("psPowerOnURL").placeholder = currentPrinter.powerSettings.powerOnURL;
                  document.getElementById("psPowerOffCommand").placeholder = currentPrinter.powerSettings.powerOffCommand;
                  document.getElementById("psPowerOffURL").placeholder = currentPrinter.powerSettings.powerOffURL;
                  document.getElementById("psPowerToggleCommand").placeholder = currentPrinter.powerSettings.powerToggleCommand;
                  document.getElementById("psPowerToggleURL").placeholder = currentPrinter.powerSettings.powerToggleURL;
                  document.getElementById("psPowerStateCommand").placeholder = currentPrinter.powerSettings.powerStatusCommand;
                  document.getElementById("psPowerStateURL").placeholder = currentPrinter.powerSettings.powerStatusURL;
                }

                document.getElementById("tempTriggers").innerHTML = "\n           <div class=\"form-group\">\n              <label for=\"headtingVariation\">Heating Variation</label>\n              <input type=\"number\" class=\"form-control\" id=\"psHeadtingVariation\" placeholder=\"".concat(currentPrinter.otherSettings.temperatureTriggers.heatingVariation, "\" step=\"0.01\">\n              <small id=\"passwordHelpBlock\" class=\"form-text text-muted\">\n                  What temperature variation will trigger orange warning on the temperature display when a printer is Active. <code>Default is 1\xB0C</code>\n              </small>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"coolDown\">Cool Down Trigger</label>\n              <input type=\"number\" class=\"form-control\" id=\"psCoolDown\" placeholder=\"").concat(currentPrinter.otherSettings.temperatureTriggers.coolDown, "\" step=\"0.01\">\n              <small id=\"passwordHelpBlock\" class=\"form-text text-muted\">\n                  What temperature limit will trigger the blue status on the temperature display when a printer is Complete and cooling down. <code>Default is 30\xB0C</code>\n              </small>\n            </div>\n        ");
                document.getElementById("psPrinterCost").innerHTML = "\n            <div class=\"col-6\">\n                   <h5>Operating Costs</h5>\n                   <div class=\"form-group\">\n                    <label for=\"coolDown\">Power Consumption</label>\n                          <div class=\"input-group mb-2\">\n                                <input type=\"number\" class=\"form-control\" id=\"psPowerConsumption\" placeholder=\"".concat(currentPrinter.costSettings.powerConsumption, "\" step=\"0.01\">\n                                <div class=\"input-group-append\">\n                                     <div class=\"input-group-text\">kW</div>\n                                </div>\n                          </div>\n                    <small id=\"passwordHelpBlock\" class=\"form-text text-muted\">\n                        The kW (kilowatt) usage of your printer. \n                    </small>\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"coolDown\">Electricity Costs</label>\n                         <div class=\"input-group mb-2\">\n                            <input type=\"number\" class=\"form-control\" id=\"psElectricityCosts\" placeholder=\"").concat(currentPrinter.costSettings.electricityCosts, "\" step=\"0.01\">\n                                <div class=\"input-group-append\">\n                                     <div class=\"input-group-text\"></div>\n                                </div>\n                          </div>\n                    <small id=\"passwordHelpBlock\" class=\"form-text text-muted\">\n                        What is your kWh (kilowatt hour) rate for your home electricity.\n                    </small>\n                  </div>\n            </div>\n            <div class=\"col-6\">\n                    <h5>Printer Costs</h5>\n                    <div class=\"form-group\">\n                      <label for=\"coolDown\">Purchase Price</label>\n                         <div class=\"input-group mb-2\">\n                            <input type=\"number\" class=\"form-control\" id=\"psPurchasePrice\" placeholder=\"").concat(currentPrinter.costSettings.purchasePrice, "\" step=\"0.01\">\n                                <div class=\"input-group-append\">\n                                     <div class=\"input-group-text\"></div>\n                                </div>\n                          </div>\n                      \n                      <small id=\"passwordHelpBlock\" class=\"form-text text-muted\">\n                          What did you buy your printer for?\n                      </small>\n                    </div>\n                    <div class=\"form-group\">\n                      <label for=\"coolDown\">Estimated Life Span</label>\n                           <div class=\"input-group mb-2\">\n                             <input type=\"number\" class=\"form-control\" id=\"psEstimatedLifespan\" placeholder=\"").concat(currentPrinter.costSettings.estimateLifespan, "\" step=\"0.01\">\n                                <div class=\"input-group-append\">\n                                     <div class=\"input-group-text\">hours</div>\n                                </div>\n                          </div>\n                      <small id=\"passwordHelpBlock\" class=\"form-text text-muted\">\n                          How many hours total do you expect your printer to last?\n                      </small>\n                    </div>\n                    <div class=\"form-group\">\n                      <label for=\"coolDown\">Maintenance Costs</label>\n                           <div class=\"input-group mb-2\">\n                             <input type=\"number\" class=\"form-control\" id=\"psMaintenanceCosts\" placeholder=\"").concat(currentPrinter.costSettings.maintenanceCosts, "\" step=\"0.01\">\n                                <div class=\"input-group-append\">\n                                     <div class=\"input-group-text\"><i class=\"fas fa-wrench\"></i> / hour</div>\n                                </div>\n                          </div>\n                      <small id=\"passwordHelpBlock\" class=\"form-text text-muted\">\n                          What are your printer maintenance costs? Worked out on an hourly basis.\n                      </small>\n                    </div>                                        \n            </div>\n        ");
                _context4.next = 48;
                return _octofarm["default"].get("scripts/get");

              case 48:
                scripts = _context4.sent;
                _context4.next = 51;
                return scripts.json();

              case 51:
                scripts = _context4.sent;
                printerScripts = [];
                scripts.alerts.forEach(function (script) {
                  if (script.printer === currentPrinter._id || script.printer.length === 0) {
                    printerScripts.push({
                      _id: script._id,
                      active: script.active,
                      message: script.message,
                      scriptLocation: script.scriptLocation,
                      trigger: script.trigger
                    });
                  }
                });
                alertsTable = document.getElementById("printerAltersTableBody");
                alertsTable.innerHTML = "";
                printerScripts.forEach( /*#__PURE__*/function () {
                  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(script) {
                    var triggerSelect;
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            alertsTable.insertAdjacentHTML("beforeend", "\n              <tr>\n                <td>\n                <form class=\"was-validated\">\n                      <div class=\"custom-control custom-checkbox mb-3\">\n                            <input type=\"checkbox\" class=\"custom-control-input\" id=\"activePrinter-".concat(script._id, "\" required=\"\">\n                            <label class=\"custom-control-label\" for=\"activePrinter-").concat(script._id, "\"></label>\n\n                        </div>\n                    </form>\n                </td>\n                <td> \n                <select class=\"custom-select\" id=\"triggerPrinter-").concat(script._id, "\" disabled>\n\n                 </select>\n                       </td>\n                <td>").concat(script.scriptLocation, " </td>\n                <td>").concat(script.message, "</td>\n              </tr>\n          \n          "));
                            document.getElementById("activePrinter-".concat(script._id)).checked = script.active;
                            triggerSelect = document.getElementById("triggerPrinter-".concat(script._id));
                            _context.next = 5;
                            return _scriptCheck["default"].alertsDrop();

                          case 5:
                            triggerSelect.innerHTML = _context.sent;
                            triggerSelect.value = script.trigger;

                          case 7:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x4) {
                    return _ref.apply(this, arguments);
                  };
                }());
                document.getElementById("psPowerConsumption").placeholder = parseFloat(currentPrinter.costSettings.powerConsumption);
                document.getElementById("psElectricityCosts").placeholder = parseFloat(currentPrinter.costSettings.electricityCosts);
                document.getElementById("psPurchasePrice").placeholder = parseFloat(currentPrinter.costSettings.purchasePrice);
                document.getElementById("psEstimatedLifespan").placeholder = parseFloat(currentPrinter.costSettings.estimateLifespan);
                document.getElementById("psMaintenanceCosts").placeholder = parseFloat(currentPrinter.costSettings.maintenanceCosts);
                document.getElementById("resetPowerFields").addEventListener("click", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                  var post;
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.next = 2;
                          return _octofarm["default"].get("printers/killPowerSettings/" + currentPrinter._id);

                        case 2:
                          post = _context2.sent;

                          if (!(post.status !== 200)) {
                            _context2.next = 10;
                            break;
                          }

                          _context2.next = 6;
                          return post.json();

                        case 6:
                          post = _context2.sent;

                          if (post.updateSettings) {
                            _ui["default"].createAlert("success", "Successfully cleared Power Settings", 3000, "clicked");
                          } else {
                            _ui["default"].createAlert("error", "Successfully cleared Power Settings", 3000, "clicked");
                          }

                          _context2.next = 11;
                          break;

                        case 10:
                          _ui["default"].createAlert("error", "Failed to contact server is it online?", 3000, "clicked");

                        case 11:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                })));
                document.getElementById("savePrinterSettings").addEventListener("click", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  var newValues, printerName, printerModel, update;
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          newValues = {
                            state: currentPrinter.printerState.colour.category,
                            printer: {
                              printerName: document.getElementById("psPrinterName").value,
                              printerURL: document.getElementById("psPrinterURL").value,
                              index: currentPrinter._id,
                              cameraURL: document.getElementById("psCamURL").value,
                              apikey: document.getElementById("psAPIKEY").value
                            },
                            connection: {
                              preferredPort: document.getElementById("psDefaultSerialPort").value,
                              preferredBaud: document.getElementById("psDefaultBaudrate").value,
                              preferredProfile: document.getElementById("psDefaultProfile").value
                            },
                            systemCommands: {
                              serverRestart: document.getElementById("psServerRestart").value,
                              systemRestart: document.getElementById("psSystemRestart").value,
                              systemShutdown: document.getElementById("psSystemShutdown").value
                            },
                            powerCommands: {
                              powerOnCommand: document.getElementById("psPowerOnCommand").value,
                              powerOnURL: document.getElementById("psPowerOnURL").value,
                              powerOffCommand: document.getElementById("psPowerOffCommand").value,
                              powerOffURL: document.getElementById("psPowerOffURL").value,
                              powerToggleCommand: document.getElementById("psPowerToggleCommand").value,
                              powerToggleURL: document.getElementById("psPowerToggleURL").value,
                              powerStatusCommand: document.getElementById("psPowerStateCommand").value,
                              powerStatusURL: document.getElementById("psPowerStateURL").value,
                              wol: {
                                enabled: document.getElementById("psWolEnable").checked,
                                ip: document.getElementById("psWolIP").value,
                                port: document.getElementById("psWolPort").value,
                                interval: document.getElementById("psWolInterval").value,
                                packets: document.getElementById("psWolCount").value,
                                MAC: document.getElementById("psWolMAC").value
                              }
                            },
                            costSettings: {
                              powerConsumption: parseFloat(document.getElementById("psPowerConsumption").value),
                              electricityCosts: parseFloat(document.getElementById("psElectricityCosts").value),
                              purchasePrice: parseFloat(document.getElementById("psPurchasePrice").value),
                              estimateLifespan: parseFloat(document.getElementById("psEstimatedLifespan").value),
                              maintenanceCosts: parseFloat(document.getElementById("psMaintenanceCosts").value)
                            }
                          };

                          if (currentPrinter.printerState.colour.category !== "Offline") {
                            printerName = document.getElementById("psProfileName").value;
                            printerModel = document.getElementById("psPrinterModel").value;

                            if (printerName === "") {
                              printerName = null;
                            }

                            if (printerModel === "") {
                              printerModel = null;
                            }

                            newValues.profileID = currentPrinter.currentProfile.id;
                            newValues.profile = {
                              name: printerName,
                              color: "default",
                              model: printerModel,
                              volume: {
                                formFactor: document.getElementById("extruderFormFactor").value,
                                width: parseInt(document.getElementById("psVolumeWidth").value),
                                depth: parseInt(document.getElementById("psVolumeDepth").value),
                                height: parseInt(document.getElementById("psVolumeHeight").value)
                              },
                              heatedBed: document.getElementById("psHeatedBed").checked,
                              heatedChamber: document.getElementById("psHeatedChamber").checked,
                              axes: {
                                x: {
                                  speed: parseInt(document.getElementById("psPrinterXAxis").value),
                                  inverted: document.getElementById("psXInverted").checked
                                },
                                y: {
                                  speed: parseInt(document.getElementById("psPrinterYAxis").value),
                                  inverted: document.getElementById("psYInverted").checked
                                },
                                z: {
                                  speed: parseInt(document.getElementById("psPrinterZAxis").value),
                                  inverted: document.getElementById("psZInverted").checked
                                },
                                e: {
                                  speed: parseInt(document.getElementById("psPrinterEAxis").value),
                                  inverted: document.getElementById("psEInverted").checked
                                }
                              },
                              extruder: {
                                count: parseInt(document.getElementById("psExtruderCount").value),
                                nozzleDiameter: parseFloat(document.getElementById("psNozzleDiameter").value),
                                sharedNozzle: document.getElementById("psSharedNozzle").checked
                              }
                            };
                            newValues.gcode = {
                              afterPrintCancelled: document.getElementById("psSettingsAfterPrinterCancelled").value,
                              afterPrintDone: document.getElementById("psSettingsAfterPrinterDone").value,
                              afterPrintPaused: document.getElementById("psSettingsAfterPrinterPaused").value,
                              afterPrinterConnected: document.getElementById("psSettingsAfterPrinterConnected").value,
                              afterToolChange: document.getElementById("psSettingsAfterToolChange").value,
                              beforePrintResumed: document.getElementById("psSettingsBeforePrinterResumed").value,
                              beforePrintStarted: document.getElementById("psSettingsBeforePrinterStarted").value,
                              beforePrinterDisconnected: document.getElementById("psSettingsBeforePrinterDisconnected").value,
                              beforeToolChange: document.getElementById("psSettingsBeforeToolChange").value
                            };
                            newValues.other = {
                              enableCamera: document.getElementById("camEnabled").checked,
                              rotateCamera: document.getElementById("camRot90").checked,
                              flipHCamera: document.getElementById("camFlipH").checked,
                              flipVCamera: document.getElementById("camFlipV").checked,
                              enableTimeLapse: document.getElementById("camTimelapse").checked,
                              heatingVariation: document.getElementById("psHeadtingVariation").value,
                              coolDown: document.getElementById("psCoolDown").value
                            };
                          }

                          _context3.next = 4;
                          return _octofarm["default"].post("printers/updateSettings", newValues);

                        case 4:
                          update = _context3.sent;

                          if (!(update.status === 200)) {
                            _context3.next = 14;
                            break;
                          }

                          _context3.next = 8;
                          return update.json();

                        case 8:
                          update = _context3.sent;

                          _ui["default"].createAlert("success", "OctoFarm successfully updated for ".concat(currentPrinter.printerName), 3000, "clicked");

                          if (update.status.profile === 200) {
                            _ui["default"].createAlert("success", "".concat(currentPrinter.printerName, ": profile successfully updated"), 3000, "clicked");
                          } else if (update.status.profile === 900) {} else {
                            _ui["default"].createAlert("error", "".concat(currentPrinter.printerName, ": profile failed to updated"), 3000, "clicked");
                          }

                          if (update.status.settings === 200) {
                            _ui["default"].createAlert("success", "".concat(currentPrinter.printerName, ": settings successfully updated"), 3000, "clicked");
                          } else if (update.status.profile === 900) {} else {
                            _ui["default"].createAlert("error", "".concat(currentPrinter.printerName, ": settings failed to updated"), 3000, "clicked");
                          }

                          _context3.next = 15;
                          break;

                        case 14:
                          _ui["default"].createAlert("error", "OctoFarm failed to update ".concat(currentPrinter.printerName, ", please log a bug at github.com/OctoFarm/issues!"), 3000, "clicked");

                        case 15:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                })));
                _context4.next = 66;
                return PrinterSettings.applyState(currentPrinter);

              case 66:
                _ui["default"].addSelectListeners("ps");

                _context4.next = 74;
                break;

              case 69:
                _id = _.findIndex(printers, function (o) {
                  return o._id === currentIndex;
                });
                currentPrinter = printers[_id];

                if (currentPrinter.printerState.colour.category !== "Offline") {
                  document.getElementById("offlineMessage").innerHTML = "";
                  document.getElementById("psDefaultSerialPort").disabled = false;
                  document.getElementById("psDefaultBaudrate").disabled = false;
                  document.getElementById("psDefaultProfile").disabled = false;
                }

                _context4.next = 74;
                return PrinterSettings.applyState(currentPrinter);

              case 74:
                _context4.next = 79;
                break;

              case 76:
                _context4.prev = 76;
                _context4.t0 = _context4["catch"](0);

                _ui["default"].createAlert("error", "Something has gone wrong with loading the Printer Manager... Hard Failure, please submit as a bug on github: " + _context4.t0, 0, "clicked");

              case 79:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, null, [[0, 76]]);
      }));

      function init(_x, _x2, _x3) {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "compareSave",
    value: function compareSave(printer, newValues) {}
  }, {
    key: "grabPage",
    value: function grabPage() {
      var PrinterSettings = {
        mainPage: {
          title: document.getElementById("printerSettingsSelection"),
          status: document.getElementById("psStatus"),
          host: document.getElementById("psHost"),
          socket: document.getElementById("psWebSocket")
        },
        connectPage: {
          printerPort: document.getElementById("printerPortDrop"),
          printerBaud: document.getElementById("printerBaudDrop"),
          printerProfile: document.getElementById("printerProfileDrop"),
          printerConnect: document.getElementById("printerConnect"),
          portDropDown: document.getElementById("psSerialPort"),
          baudDropDown: document.getElementById("psBaudrate"),
          apiCheck: document.getElementById("apiCheck"),
          filesCheck: document.getElementById("filesCheck"),
          stateCheck: document.getElementById("stateCheck"),
          profileCheck: document.getElementById("profileCheck"),
          settingsCheck: document.getElementById("settingsCheck"),
          systemCheck: document.getElementById("systemCheck"),
          apiClean: document.getElementById("apiClean"),
          filesClean: document.getElementById("filesClean"),
          stateClean: document.getElementById("stateClean")
        }
      };
      return PrinterSettings;
    }
  }, {
    key: "applyState",
    value: function () {
      var _applyState = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(printer) {
        var elements, printerProfileBtn, printerGcodeBtn, printerOtherSettings;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return PrinterSettings.grabPage();

              case 2:
                elements = _context5.sent;
                elements.mainPage.status.innerHTML = "<b>Printer Status</b><br>".concat(printer.printerState.state);
                elements.mainPage.status.className = "btn btn-".concat(printer.printerState.colour.name, " mb-1 btn-block");
                elements.mainPage.host.innerHTML = "<b>Host Status</b><br>".concat(printer.hostState.state);
                elements.mainPage.host.className = "btn btn-".concat(printer.hostState.colour.name, " mb-1 btn-block");
                elements.mainPage.socket.innerHTML = "<b>WebSocket Status</b><br>".concat(printer.webSocketState.desc);
                elements.mainPage.socket.className = "btn btn-".concat(printer.webSocketState.colour, " mb-1 btn-block");
                elements.connectPage.apiCheck.innerHTML = "<i class=\"fas fa-link\"></i> <b>API Check</b><br><b>Last Checked: </b>".concat(_calc["default"].dateClean(printer.systemChecks.scanning.api.date));
                elements.connectPage.apiCheck.className = "btn btn-".concat(printer.systemChecks.scanning.api.status, " mb-1 btn-block");
                elements.connectPage.filesCheck.innerHTML = "<i class=\"fas fa-file-code\"></i> <b>Files Check</b><br><b>Last Checked: </b>".concat(_calc["default"].dateClean(printer.systemChecks.scanning.files.date));
                elements.connectPage.filesCheck.className = "btn btn-".concat(printer.systemChecks.scanning.files.status, " mb-1 btn-block");
                elements.connectPage.stateCheck.innerHTML = "<i class=\"fas fa-info-circle\"></i> <b>State Check</b><br><b>Last Checked: </b>".concat(_calc["default"].dateClean(printer.systemChecks.scanning.state.date));
                elements.connectPage.stateCheck.className = "btn btn-".concat(printer.systemChecks.scanning.state.status, " mb-1 btn-block");
                elements.connectPage.profileCheck.innerHTML = "<i class=\"fas fa-id-card\"></i> <b>Profile Check</b><br><b>Last Checked: </b>".concat(_calc["default"].dateClean(printer.systemChecks.scanning.profile.date));
                elements.connectPage.profileCheck.className = "btn btn-".concat(printer.systemChecks.scanning.profile.status, " mb-1 btn-block");
                elements.connectPage.settingsCheck.innerHTML = "<i class=\"fas fa-cog\"></i> <b>Settings Check</b><br><b>Last Checked: </b>".concat(_calc["default"].dateClean(printer.systemChecks.scanning.settings.date));
                elements.connectPage.settingsCheck.className = "btn btn-".concat(printer.systemChecks.scanning.settings.status, " mb-1 btn-block");
                elements.connectPage.systemCheck.innerHTML = "<i class=\"fas fa-server\"></i> <b>System Check</b><br><b>Last Checked: </b>".concat(_calc["default"].dateClean(printer.systemChecks.scanning.system.date));
                elements.connectPage.systemCheck.className = "btn btn-".concat(printer.systemChecks.scanning.system.status, " mb-1 btn-block");
                elements.connectPage.apiClean.innerHTML = "<i class=\"fas fa-server\"></i> <b>Printer Clean</b><br><b>Last Checked: </b>".concat(_calc["default"].dateClean(printer.systemChecks.cleaning.information.date));
                elements.connectPage.apiClean.className = "btn btn-".concat(printer.systemChecks.cleaning.information.status, " mb-1 btn-block");
                elements.connectPage.filesClean.innerHTML = "<i class=\"fas fa-server\"></i> <b>File Clean</b><br><b>Last Checked: </b>".concat(_calc["default"].dateClean(printer.systemChecks.cleaning.file.date));
                elements.connectPage.filesClean.className = "btn btn-".concat(printer.systemChecks.cleaning.file.status, " mb-1 btn-block");
                elements.connectPage.stateClean.innerHTML = "<i class=\"fas fa-server\"></i> <b>Job Clean</b><br><b>Last Checked: </b>".concat(_calc["default"].dateClean(printer.systemChecks.cleaning.job.date));
                elements.connectPage.stateClean.className = "btn btn-".concat(printer.systemChecks.cleaning.job.status, " mb-1 btn-block");

                if (printer.printerState.colour.category === "Offline") {
                  printerProfileBtn = document.getElementById("printer-profile-btn");
                  printerGcodeBtn = document.getElementById("printer-gcode-btn");
                  printerOtherSettings = document.getElementById("printer-settings-btn");
                  printerProfileBtn.disabled = true;
                  printerGcodeBtn.disabled = true;
                  printerOtherSettings.disabled = true;

                  if (!printerProfileBtn.classList.contains("notyet")) {
                    printerProfileBtn.classList.add("notyet");
                  }

                  if (!printerGcodeBtn.classList.contains("notyet")) {
                    printerGcodeBtn.classList.add("notyet");
                  }

                  if (!printerOtherSettings.classList.contains("notyet")) {
                    printerOtherSettings.classList.add("notyet");
                  }
                }

              case 28:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function applyState(_x5) {
        return _applyState.apply(this, arguments);
      }

      return applyState;
    }()
  }]);

  return PrinterSettings;
}();

exports["default"] = PrinterSettings;

},{"../functions/calc.js":1,"../functions/ui.js":4,"../octofarm.js":18,"./scriptCheck.js":17}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ui = _interopRequireDefault(require("../functions/ui.js"));

var _octofarm = _interopRequireDefault(require("../octofarm.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n                           <tr class=\"d-none\">\n\n                </td>\n                <td>  \n                </td>\n                <td>  \n\n                </td> \n                <td>    \n                    No Alerts Found\n                </td>\n                <td>    \n\n                </td>\n                <td>\n\n                </td>\n                </tr>"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _alertsDrop = "\n                                                         <option selected value=\"0\">Choose...</option>\n                                                            <option value=\"done\">Print Done</option>\n                                                            <option value=\"failed\">Print Failed</option>\n                                                            <option value=\"paused\">Print Paused</option>\n                                                            <option value=\"cooldown\">Print Cooled</option>\n                                                            <option value=\"error\">Print Error</option>\n";
var testScriptBtn = document.getElementById("testScript");

if (testScriptBtn) {
  testScriptBtn.addEventListener('click', function (event) {
    event.preventDefault();
    event.stopPropagation();
    var elements = Script.grabPage();
    var errors = Script.checkPage(elements);

    if (errors.length > 0) {
      _ui["default"].createAlert("warning", "There are issues with your input, please correct the highlighted fields", 3000, "Clicked");

      errors.forEach(function (error) {
        if (error === "script") {
          elements.script.style.borderColor = "red";
        }

        if (error === "message") {
          elements.message.style.borderColor = "red";
        }

        if (error === "trigger") {
          elements.trigger.style.borderColor = "red";
        }
      });
    } else {
      elements.script.style.borderColor = "green";
      elements.message.style.borderColor = "green";
      elements.trigger.style.borderColor = "green";
      Script.test(elements.script.value, elements.message.value);
    }
  });
}

var alertsTriggers = document.getElementById("alertsTrigger");

if (alertsTriggers) {
  alertsTriggers.insertAdjacentHTML('beforeend', _alertsDrop);
}

var saveScriptBtn = document.getElementById("saveScript");

if (saveScriptBtn) {
  saveScriptBtn.addEventListener('click', function (event) {
    event.preventDefault();
    event.stopPropagation();
    var elements = Script.grabPage();
    var errors = Script.checkPage(elements);

    if (errors.length > 0) {
      _ui["default"].createAlert("warning", "There are issues with your input, please correct the highlighted fields", 3000, "Clicked");

      errors.forEach(function (error) {
        if (error === "script") {
          elements.script.style.borderColor = "red";
        }

        if (error === "message") {
          elements.message.style.borderColor = "red";
        }

        if (error === "trigger") {
          elements.trigger.style.borderColor = "red";
        }
      });
    } else {
      elements.script.style.borderColor = "green";
      elements.message.style.borderColor = "green";
      elements.trigger.style.borderColor = "green";
      var newAlert = {
        active: true,
        trigger: elements.trigger.value,
        script: elements.script.value,
        message: elements.message.value
      };
      Script.save(newAlert);
    }
  });
}

var Script = /*#__PURE__*/function () {
  function Script() {
    _classCallCheck(this, Script);
  }

  _createClass(Script, null, [{
    key: "alertsDrop",
    value: function () {
      var _alertsDrop2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", _alertsDrop);

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function alertsDrop() {
        return _alertsDrop2.apply(this, arguments);
      }

      return alertsDrop;
    }()
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var post, alertsTable;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _octofarm["default"].get("scripts/get");

              case 2:
                post = _context2.sent;
                _context2.next = 5;
                return post.json();

              case 5:
                post = _context2.sent;
                alertsTable = document.getElementById("alertsTable");
                alertsTable.innerHTML = "";

                if (post.status === 200) {
                  post.alerts.forEach(function (alert) {
                    if (alert.printer.length === 0) {
                      alert.printer = "All Printers";
                    }

                    alertsTable.insertAdjacentHTML('beforeend', "\n                <tr id=\"alertList-".concat(alert._id, "\">\n                <td class=\"d-none\">\n                    ").concat(alert._id, "\n                </td>\n                <td> \n                 <form class=\"was-validated\">\n                      <div class=\"custom-control custom-checkbox mb-3\">\n                            <input type=\"checkbox\" class=\"custom-control-input\" id=\"active-").concat(alert._id, "\" required>\n                            <label class=\"custom-control-label\" for=\"active-").concat(alert._id, "\"></label>\n\n                        </div>\n                    </form>\n                </td>\n                <td>  \n                      <select class=\"custom-select\" id=\"trigger-").concat(alert._id, "\" disabled>\n\n                       </select>\n                </td> \n                <td >    \n                        <div id=\"scriptLocation-").concat(alert._id, "\" contenteditable=\"false\"> ").concat(alert.scriptLocation, "  </div>\n                </td>\n                <td>    \n                        <div  id=\"message-").concat(alert._id, "\" contenteditable=\"false\"> ").concat(alert.message, "</div>\n                </td>\n                <td id=\"printers-").concat(alert._id, "\">\n                        ").concat(alert.printer, "\n                </td>\n                 <td>\n                    <button id=\"edit-").concat(alert._id, "\" type=\"button\" class=\"btn btn-sm btn-info edit\">\n                    <i class=\"fas fa-edit editIcon\"></i>\n                  </button>\n                  <button id=\"save-").concat(alert._id, "\" type=\"button\" class=\"btn btn-sm d-none btn-success save\">\n                    <i class=\"fas fa-save saveIcon\"></i>\n                  </button>\n                  <button id=\"delete-").concat(alert._id, "\" type=\"button\" class=\"btn btn-sm btn-danger delete\">\n                    <i class=\"fas fa-trash deleteIcon\"></i>\n                  </button>\n                </td>\n                </tr>\n           "));
                    var alertsTrigger = document.getElementById('trigger-' + alert._id);
                    alertsTrigger.innerHTML = _alertsDrop;
                    alertsTrigger.value = alert.trigger;
                    document.getElementById('active-' + alert._id).checked = alert.active;
                    document.getElementById('edit-' + alert._id).addEventListener('click', function (event) {
                      Script.edit(alert._id);
                    });
                    document.getElementById('save-' + alert._id).addEventListener('click', function (event) {
                      var newAlert = {
                        active: document.getElementById("active-" + alert._id).checked,
                        trigger: document.getElementById("trigger-" + alert._id).value,
                        script: document.getElementById("scriptLocation-" + alert._id).innerHTML.trim(),
                        message: document.getElementById("message-" + alert._id).innerHTML.trim()
                      };
                      Script.saveEdit(alert._id, newAlert);
                    });
                    document.getElementById('delete-' + alert._id).addEventListener('click', function (event) {
                      Script["delete"](alert._id);
                    });
                  });
                } else {
                  alertsTable.insertAdjacentHTML('beforeend'(_templateObject()));
                }

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function get() {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: "edit",
    value: function () {
      var _edit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(id) {
        var row, editable;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                row = document.getElementById("alertList-" + id);
                editable = row.querySelectorAll("[contenteditable]");
                editable.forEach(function (edit) {
                  edit.contentEditable = true;
                  edit.classList.add("contentEditable");
                });
                document.getElementById("save-" + id).classList.remove("d-none");
                document.getElementById("edit-" + id).classList.add("d-none");
                document.getElementById("trigger-" + id).disabled = false;

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function edit(_x) {
        return _edit.apply(this, arguments);
      }

      return edit;
    }()
  }, {
    key: "saveEdit",
    value: function () {
      var _saveEdit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(id, newAlert) {
        var opts, post, row, editable;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                opts = {
                  id: id,
                  active: newAlert.active,
                  trigger: newAlert.trigger,
                  scriptLocation: newAlert.script,
                  message: newAlert.message
                };
                _context4.next = 3;
                return _octofarm["default"].post("scripts/edit", opts);

              case 3:
                post = _context4.sent;
                _context4.next = 6;
                return post.json();

              case 6:
                post = _context4.sent;

                if (post.status !== 200) {
                  _ui["default"].createAlert("error", "Failed to save your alert!", 3000, "Clicked");
                } else {
                  _ui["default"].createAlert("success", "Successfully saved your alert!", 3000, "Clicked");

                  Script.get();
                }

                row = document.getElementById("alertList-" + id);
                editable = row.querySelectorAll("[contenteditable]");
                editable.forEach(function (edit) {
                  edit.contentEditable = false;
                  edit.classList.remove("contentEditable");
                });
                document.getElementById("save-" + id).classList.add("d-none");
                document.getElementById("edit-" + id).classList.remove("d-none");
                document.getElementById("trigger-" + id).disabled = true;

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function saveEdit(_x2, _x3) {
        return _saveEdit.apply(this, arguments);
      }

      return saveEdit;
    }()
  }, {
    key: "save",
    value: function () {
      var _save = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(newAlert) {
        var opts, post;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                opts = {
                  active: newAlert.active,
                  trigger: newAlert.trigger,
                  scriptLocation: newAlert.script,
                  message: newAlert.message,
                  printer: []
                };
                _context5.next = 3;
                return _octofarm["default"].post("scripts/save", opts);

              case 3:
                post = _context5.sent;
                _context5.next = 6;
                return post.json();

              case 6:
                post = _context5.sent;

                if (post.status !== 200) {
                  _ui["default"].createAlert("error", "Failed to save your alert!", 3000, "Clicked");
                } else {
                  _ui["default"].createAlert("success", "Successfully saved your alert!", 3000, "Clicked");

                  Script.get();
                }

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function save(_x4) {
        return _save.apply(this, arguments);
      }

      return save;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(id) {
        var post;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return _octofarm["default"]["delete"]("scripts/delete/" + id);

              case 2:
                post = _context6.sent;
                _context6.next = 5;
                return post.json();

              case 5:
                post = _context6.sent;

                if (post.status === 200) {
                  _ui["default"].createAlert("error", "Failed to delete your alert.", 3000, "Clicked");

                  document.getElementById("alertList-" + id).remove();
                } else {
                  _ui["default"].createAlert("success", "Successfully deleted your alert.", 3000, "Clicked");
                }

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function _delete(_x5) {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "test",
    value: function () {
      var _test = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(scriptLocation, message) {
        var opts, post;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                opts = {
                  scriptLocation: scriptLocation,
                  message: message
                };
                _context7.next = 3;
                return _octofarm["default"].post("scripts/test", opts);

              case 3:
                post = _context7.sent;
                _context7.next = 6;
                return post.json();

              case 6:
                post = _context7.sent;

                if (_typeof(post.testFire) === "object") {
                  _ui["default"].createAlert("error", post.testFire.stderr, 3000, "Clicked");
                } else {
                  _ui["default"].createAlert("success", post.testFire, 3000, "Clicked");
                }

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function test(_x6, _x7) {
        return _test.apply(this, arguments);
      }

      return test;
    }()
  }, {
    key: "checkPage",
    value: function checkPage(elements) {
      var errors = [];

      if (elements.script.value === "") {
        errors.push("script");
      }

      if (elements.trigger.value === "0") {
        errors.push("trigger");
      }

      if (elements.message.value === "") {
        errors.push("message");
      }

      return errors;
    }
  }, {
    key: "grabPage",
    value: function grabPage() {
      return {
        trigger: document.getElementById("alertsTrigger"),
        script: document.getElementById("scriptLocation"),
        message: document.getElementById("scriptMessage")
      };
    }
  }]);

  return Script;
}();

exports["default"] = Script;

},{"../functions/ui.js":4,"../octofarm.js":18}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var OctoFarmclient = /*#__PURE__*/function () {
  function OctoFarmclient() {
    _classCallCheck(this, OctoFarmclient);
  }

  _createClass(OctoFarmclient, null, [{
    key: "get",
    value: function get(item) {
      var url = "/".concat(item);
      return fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        }
      });
    }
  }, {
    key: "delete",
    value: function _delete(item) {
      var url = "/".concat(item);
      return fetch(url, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json"
        }
      });
    }
  }, {
    key: "post",
    value: function post(item, data) {
      var url = "/".concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      });
    }
  }]);

  return OctoFarmclient;
}();

exports["default"] = OctoFarmclient;

},{}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ui = _interopRequireDefault(require("./functions/ui.js"));

var _octofarm = _interopRequireDefault(require("./octofarm.js"));

var _validate = _interopRequireDefault(require("./functions/validate.js"));

var _filamentGrab = require("./modules/filamentGrab.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var OctoPrintClient = /*#__PURE__*/function () {
  function OctoPrintClient() {
    _classCallCheck(this, OctoPrintClient);
  }

  _createClass(OctoPrintClient, null, [{
    key: "get",
    value: function get(printer, item) {
      var url = "".concat(printer.printerURL, "/").concat(item);
      return fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        }
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "postNOAPI",
    value: function postNOAPI(printer, item, data) {
      var url = "".concat(printer.printerURL, "/").concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        },
        body: JSON.stringify(data)
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "post",
    value: function post(printer, item, data) {
      var url = "".concat(printer.printerURL, "/api/").concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        },
        body: JSON.stringify(data)
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "folder",
    value: function folder(printer, item, data) {
      var url = "".concat(printer.printerURL, "/api/files/").concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "X-Api-Key": printer.apikey
        },
        body: data
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "move",
    value: function move(printer, item, data) {
      var url = "".concat(printer.printerURL, "/api/").concat(item);
      return fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        },
        body: JSON.stringify(data)
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "delete",
    value: function _delete(printer, item) {
      var url = "".concat(printer.printerURL, "/api/").concat(item);
      return fetch(url, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
          "X-Api-Key": printer.apikey
        }
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "selectTool",
    value: function () {
      var _selectTool = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(printer, tool) {
        var opt, post;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                opt = {
                  command: "select",
                  tool: tool
                };
                _context.next = 3;
                return OctoPrintClient.post(printer, "printer/tool", opt);

              case 3:
                post = _context.sent;

                if (!(post.status === 204)) {
                  _context.next = 8;
                  break;
                }

                return _context.abrupt("return", true);

              case 8:
                return _context.abrupt("return", false);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function selectTool(_x, _x2) {
        return _selectTool.apply(this, arguments);
      }

      return selectTool;
    }()
  }, {
    key: "system",
    value: function () {
      var _system = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(printer, action) {
        var url;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                url = "system/commands/core/" + action;
                bootbox.confirm({
                  message: "Are your sure you want to ".concat(action, " ").concat(printer.printerName, "?"),
                  buttons: {
                    cancel: {
                      label: "<i class=\"fa fa-times\"></i> No"
                    },
                    confirm: {
                      label: "<i class=\"fa fa-check\"></i> Yes"
                    }
                  },
                  callback: function callback(result) {
                    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                      var post;
                      return regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              if (!result) {
                                _context2.next = 5;
                                break;
                              }

                              _context2.next = 3;
                              return OctoPrintClient.post(printer, url)["catch"](function (e) {
                                _ui["default"].createAlert("danger", e, 4000, "Clicked");
                              });

                            case 3:
                              post = _context2.sent;

                              if (post.status === 204) {
                                _ui["default"].createAlert("success", "".concat(printer.printerName, ": ").concat(action, " was successful"), 3000, "clicked");
                              } else {
                                _ui["default"].createAlert("error", "".concat(printer.printerName, ": ").concat(action, " was unsuccessful. Please make sure printer is connected and commands are setup in Settings -> Server."), 3000, "clicked");
                              }

                            case 5:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    }))();
                  }
                });

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function system(_x3, _x4) {
        return _system.apply(this, arguments);
      }

      return system;
    }()
  }, {
    key: "systemNoConfirm",
    value: function () {
      var _systemNoConfirm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(printer, action) {
        var url;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                url = "system/commands/core/" + action;
                _context4.next = 3;
                return OctoPrintClient.post(printer, url);

              case 3:
                return _context4.abrupt("return", _context4.sent);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function systemNoConfirm(_x5, _x6) {
        return _systemNoConfirm.apply(this, arguments);
      }

      return systemNoConfirm;
    }()
  }, {
    key: "move",
    value: function () {
      var _move = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(element, printer, action, axis, dir) {
        var flashReturn, url, post, amount, opt;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                flashReturn = function flashReturn() {
                  element.target.classList = "btn btn-light";
                };

                url = "printer/printhead";
                post = null;
                _context5.next = 5;
                return document.querySelectorAll("#pcAxisSteps > .btn.active");

              case 5:
                amount = _context5.sent;
                amount = amount[0].innerHTML;
                opt = null;

                if (action === "home") {
                  opt = {
                    command: action,
                    axes: axis
                  };
                } else if (action === "jog") {
                  if (dir != undefined) {
                    amount = Number(dir + amount);
                  } else {
                    amount = Number(amount);
                  }

                  opt = _defineProperty({
                    command: action
                  }, axis, amount);
                } else if (action === "feedrate") {
                  opt = {
                    command: action,
                    factor: amount
                  };
                }

                _context5.next = 11;
                return OctoPrintClient.post(printer, url, opt);

              case 11:
                post = _context5.sent;

                if (post.status === 204) {
                  element.target.classList = "btn btn-success";
                  setTimeout(flashReturn, 500);
                } else {
                  element.target.classList = "btn btn-danger";
                  setTimeout(flashReturn, 500);
                }

              case 13:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function move(_x7, _x8, _x9, _x10, _x11) {
        return _move.apply(this, arguments);
      }

      return move;
    }()
  }, {
    key: "file",
    value: function () {
      var _file2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(printer, fullPath, action, _file) {
        var url, post, opt, _opt2, flow, feed, _opt3, fileDel;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                url = "files/local/" + fullPath;
                post = null;

                if (!(action === "load")) {
                  _context6.next = 9;
                  break;
                }

                opt = {
                  command: "select",
                  print: false
                };
                _context6.next = 6;
                return OctoPrintClient.post(printer, url, opt);

              case 6:
                post = _context6.sent;
                _context6.next = 26;
                break;

              case 9:
                if (!(action === "print")) {
                  _context6.next = 22;
                  break;
                }

                _opt2 = {
                  command: "select",
                  print: true
                }; // Make sure feed/flow are set before starting print...

                flow = {
                  command: "flowrate",
                  factor: parseInt(printer.flowRate)
                };
                _context6.next = 14;
                return OctoPrintClient.post(printer, "printer/tool", flow);

              case 14:
                feed = {
                  command: "feedrate",
                  factor: parseInt(printer.feedRate)
                };
                _context6.next = 17;
                return OctoPrintClient.post(printer, "printer/printhead", feed);

              case 17:
                _context6.next = 19;
                return OctoPrintClient.post(printer, url, _opt2);

              case 19:
                post = _context6.sent;
                _context6.next = 26;
                break;

              case 22:
                if (!(action === "delete")) {
                  _context6.next = 26;
                  break;
                }

                _context6.next = 25;
                return OctoPrintClient["delete"](printer, url);

              case 25:
                post = _context6.sent;

              case 26:
                if (!(post.status === 204)) {
                  _context6.next = 38;
                  break;
                }

                if (!(action === "delete")) {
                  _context6.next = 35;
                  break;
                }

                _opt3 = {
                  i: printer,
                  fullPath: fullPath
                };
                _context6.next = 31;
                return _octofarm["default"].post("printers/removefile", _opt3);

              case 31:
                fileDel = _context6.sent;

                _ui["default"].createAlert("success", "".concat(printer.printerName, ": ").concat(action, " completed"), 3000, "clicked");

                _context6.next = 36;
                break;

              case 35:
                _ui["default"].createAlert("success", "".concat(printer.printerName, ": ").concat(action, " actioned"), 3000, "clicked");

              case 36:
                _context6.next = 39;
                break;

              case 38:
                _ui["default"].createAlert("error", "".concat(printer.printerName, ": ").concat(action, " failed"), 3000, "clicked");

              case 39:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function file(_x12, _x13, _x14, _x15) {
        return _file2.apply(this, arguments);
      }

      return file;
    }()
  }, {
    key: "jobAction",
    value: function () {
      var _jobAction = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(printer, opts, element) {
        var checkSettings, flow, feed, body, filamentCheck, printerCheck, post;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return _octofarm["default"].get("settings/server/get");

              case 2:
                checkSettings = _context8.sent;
                _context8.next = 5;
                return checkSettings.json();

              case 5:
                checkSettings = _context8.sent;
                // Make sure feed/flow are set before starting print...
                flow = {
                  command: "flowrate",
                  factor: parseInt(printer.flowRate)
                };
                _context8.next = 9;
                return OctoPrintClient.post(printer, "printer/tool", flow);

              case 9:
                feed = {
                  command: "feedrate",
                  factor: parseInt(printer.feedRate)
                };
                _context8.next = 12;
                return OctoPrintClient.post(printer, "printer/printhead", feed);

              case 12:
                body = {
                  i: printer._id
                };
                filamentCheck = false;

                if (typeof checkSettings.filament !== "undefined") {
                  filamentCheck = checkSettings.filament.filamentCheck;
                }

                printerCheck = false;

                if (printer.selectedFilament != null && Array.isArray(printer.selectedFilament)) {
                  printerCheck = printer.selectedFilament.every(function (e) {
                    return e !== null;
                  });
                }

                if (!(filamentCheck && !printerCheck && opts.command === "start")) {
                  _context8.next = 21;
                  break;
                }

                bootbox.confirm({
                  message: "You have spools in the inventory, but none selected. Would you like to select a spool?",
                  buttons: {
                    confirm: {
                      label: "Yes",
                      className: "btn-success"
                    },
                    cancel: {
                      label: "No",
                      className: "btn-danger"
                    }
                  },
                  callback: function callback(result) {
                    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                      var offset, _post, post;

                      return regeneratorRuntime.wrap(function _callee7$(_context7) {
                        while (1) {
                          switch (_context7.prev = _context7.next) {
                            case 0:
                              if (!result) {
                                _context7.next = 3;
                                break;
                              }

                              _context7.next = 15;
                              break;

                            case 3:
                              if (!(printer.selectedFilament != null && Array.isArray(printer.selectedFilament))) {
                                _context7.next = 9;
                                break;
                              }

                              offset = {
                                command: "offset",
                                offsets: {}
                              };
                              printer.selectedFilament.forEach(function (spool, index) {
                                if (spool != null) {
                                  offset.offsets["tool" + index] = spool.spools.tempOffset;
                                }
                              });
                              _context7.next = 8;
                              return OctoPrintClient.post(printer, "printer/tool", offset);

                            case 8:
                              _post = _context7.sent;

                            case 9:
                              _context7.next = 11;
                              return OctoPrintClient.post(printer, "printer/printhead", feed);

                            case 11:
                              _context7.next = 13;
                              return OctoPrintClient.post(printer, "job", opts);

                            case 13:
                              post = _context7.sent;
                              element.target.disabled = false;

                            case 15:
                            case "end":
                              return _context7.stop();
                          }
                        }
                      }, _callee7);
                    }))();
                  }
                });
                _context8.next = 27;
                break;

              case 21:
                _context8.next = 23;
                return OctoPrintClient.post(printer, "printer/printhead", feed);

              case 23:
                _context8.next = 25;
                return OctoPrintClient.post(printer, "job", opts);

              case 25:
                post = _context8.sent;
                element.target.disabled = false;

              case 27:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function jobAction(_x16, _x17, _x18) {
        return _jobAction.apply(this, arguments);
      }

      return jobAction;
    }()
  }, {
    key: "connect",
    value: function () {
      var _connect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(command, printer) {
        var opts, post;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                opts = null;

                if (command === "connect") {
                  opts = {
                    command: "connect",
                    port: document.getElementById("pmSerialPort").value,
                    baudrate: parseInt(document.getElementById("pmBaudrate").value),
                    printerProfile: document.getElementById("pmProfile").value,
                    save: true
                  };
                } else {
                  opts = {
                    command: "disconnect"
                  };
                }

                _context9.next = 4;
                return OctoPrintClient.post(printer, "connection", opts);

              case 4:
                post = _context9.sent;

                if (typeof post !== "undefined" && post.status === 204) {
                  _ui["default"].createAlert("success", "".concat(printer.printerName, ": ").concat(opts.command, "ion attempt was successful"), 3000, "click");

                  if (command === "connect") {
                    document.getElementById("pmSerialPort").disabled = true;
                    document.getElementById("pmBaudrate").disabled = true;
                    document.getElementById("pmProfile").disabled = true;
                  } else {
                    document.getElementById("pmSerialPort").disabled = false;
                    document.getElementById("pmBaudrate").disabled = false;
                    document.getElementById("pmProfile").disabled = false;
                  }
                } else {
                  document.getElementById("pmSerialPort").disabled = false;
                  document.getElementById("pmBaudrate").disabled = false;
                  document.getElementById("pmProfile").disabled = false;

                  _ui["default"].createAlert("error", "".concat(printer.printerName, ": could not ").concat(opts.command, "."), 3000, "click");
                }

              case 6:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function connect(_x19, _x20) {
        return _connect.apply(this, arguments);
      }

      return connect;
    }()
  }, {
    key: "power",
    value: function () {
      var _power = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(printer, url, action, command) {
        var post, _post2;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                if (url.includes("[PrinterURL]")) {
                  url = url.replace("[PrinterURL]", printer.printerURL);
                }

                if (url.includes("[PrinterAPI]")) {
                  url = url.replace("[PrinterAPI]", printer.apikey);
                }

                if (!(typeof command === "undefined" || command.length === 0)) {
                  _context10.next = 15;
                  break;
                }

                _context10.prev = 3;
                _context10.next = 6;
                return fetch(url, {
                  method: "GET",
                  headers: {
                    "Content-Type": "application/json",
                    "X-Api-Key": printer.apikey
                  }
                });

              case 6:
                post = _context10.sent;

                if (post.status !== 200 || post.status !== 204) {
                  _ui["default"].createAlert("error", "".concat(printer.printerName, ": Could not complete ").concat(action), 3000);
                } else {
                  _ui["default"].createAlert("success", "".concat(printer.printerName, ": Successfully completed ").concat(action), 3000);
                }

                _context10.next = 13;
                break;

              case 10:
                _context10.prev = 10;
                _context10.t0 = _context10["catch"](3);

                _ui["default"].createAlert("error", "".concat(printer.printerName, ": Could not complete ").concat(action, " - Error: ").concat(_context10.t0), 3000);

              case 13:
                _context10.next = 25;
                break;

              case 15:
                _context10.prev = 15;
                _context10.next = 18;
                return fetch(url, {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "X-Api-Key": printer.apikey
                  },
                  body: command
                });

              case 18:
                _post2 = _context10.sent;

                if (_post2.status !== 200 || _post2.status !== 204) {
                  _ui["default"].createAlert("error", "".concat(printer.printerName, ": Could not complete ").concat(action), 3000);
                } else {
                  _ui["default"].createAlert("success", "".concat(printer.printerName, ": Successfully completed ").concat(action), 3000);
                }

                _context10.next = 25;
                break;

              case 22:
                _context10.prev = 22;
                _context10.t1 = _context10["catch"](15);

                _ui["default"].createAlert("error", "".concat(printer.printerName, ": Could not complete ").concat(action, " - Error: ").concat(_context10.t1), 3000);

              case 25:
                return _context10.abrupt("return", "done");

              case 26:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, null, [[3, 10], [15, 22]]);
      }));

      function power(_x21, _x22, _x23, _x24) {
        return _power.apply(this, arguments);
      }

      return power;
    }()
  }, {
    key: "getPowerStatus",
    value: function () {
      var _getPowerStatus = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(printer, url, command) {
        var post, _post3, status, powerStatusPrinter;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                if (url.includes("[PrinterURL]")) {
                  url = url.replace("[PrinterURL]", printer.printerURL);
                }

                if (url.includes("[PrinterAPI]")) {
                  url = url.replace("[PrinterAPI]", printer.apikey);
                }

                if (!(typeof command === "undefined" || command === "" || command === null)) {
                  _context11.next = 16;
                  break;
                }

                _context11.next = 5;
                return fetch(url, {
                  method: "GET",
                  headers: {
                    "Content-Type": "application/json",
                    "X-Api-Key": printer.apikey
                  }
                });

              case 5:
                post = _context11.sent;

                if (!(post.status !== 200 || post.status !== 204)) {
                  _context11.next = 10;
                  break;
                }

                return _context11.abrupt("return", "No Status");

              case 10:
                _context11.next = 12;
                return post.json();

              case 12:
                post = _context11.sent;
                return _context11.abrupt("return", post);

              case 14:
                _context11.next = 32;
                break;

              case 16:
                _context11.prev = 16;
                _context11.next = 19;
                return fetch(url, {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "X-Api-Key": printer.apikey
                  },
                  body: command
                });

              case 19:
                _post3 = _context11.sent;
                status = "No Status";

                if (!(_post3.status === 200 || _post3.status === 204)) {
                  _context11.next = 25;
                  break;
                }

                _context11.next = 24;
                return _post3.json();

              case 24:
                status = _context11.sent;

              case 25:
                powerStatusPrinter = document.getElementById("printerStatus-" + printer._id);

                if (powerStatusPrinter) {
                  if (status === "No Status") {
                    powerStatusPrinter.style.color = "black";
                  } else if (status[Object.keys(status)[0]]) {
                    powerStatusPrinter.style.color = "green";
                  } else {
                    powerStatusPrinter.style.color = "red";
                  }
                }

                _context11.next = 32;
                break;

              case 29:
                _context11.prev = 29;
                _context11.t0 = _context11["catch"](16);
                console.log("Printer Power Check failed... classing offline:", _context11.t0);

              case 32:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, null, [[16, 29]]);
      }));

      function getPowerStatus(_x25, _x26, _x27) {
        return _getPowerStatus.apply(this, arguments);
      }

      return getPowerStatus;
    }()
  }]);

  return OctoPrintClient;
}();

exports["default"] = OctoPrintClient;

},{"./functions/ui.js":4,"./functions/validate.js":5,"./modules/filamentGrab.js":9,"./octofarm.js":18}],20:[function(require,module,exports){
"use strict";

require("core-js/modules/es6.array.copy-within");

require("core-js/modules/es6.array.every");

require("core-js/modules/es6.array.fill");

require("core-js/modules/es6.array.filter");

require("core-js/modules/es6.array.find");

require("core-js/modules/es6.array.find-index");

require("core-js/modules/es7.array.flat-map");

require("core-js/modules/es6.array.for-each");

require("core-js/modules/es6.array.from");

require("core-js/modules/es7.array.includes");

require("core-js/modules/es6.array.index-of");

require("core-js/modules/es6.array.is-array");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.array.last-index-of");

require("core-js/modules/es6.array.map");

require("core-js/modules/es6.array.of");

require("core-js/modules/es6.array.reduce");

require("core-js/modules/es6.array.reduce-right");

require("core-js/modules/es6.array.some");

require("core-js/modules/es6.array.sort");

require("core-js/modules/es6.array.species");

require("core-js/modules/es6.date.now");

require("core-js/modules/es6.date.to-iso-string");

require("core-js/modules/es6.date.to-json");

require("core-js/modules/es6.date.to-primitive");

require("core-js/modules/es6.date.to-string");

require("core-js/modules/es6.function.bind");

require("core-js/modules/es6.function.has-instance");

require("core-js/modules/es6.function.name");

require("core-js/modules/es6.map");

require("core-js/modules/es6.math.acosh");

require("core-js/modules/es6.math.asinh");

require("core-js/modules/es6.math.atanh");

require("core-js/modules/es6.math.cbrt");

require("core-js/modules/es6.math.clz32");

require("core-js/modules/es6.math.cosh");

require("core-js/modules/es6.math.expm1");

require("core-js/modules/es6.math.fround");

require("core-js/modules/es6.math.hypot");

require("core-js/modules/es6.math.imul");

require("core-js/modules/es6.math.log1p");

require("core-js/modules/es6.math.log10");

require("core-js/modules/es6.math.log2");

require("core-js/modules/es6.math.sign");

require("core-js/modules/es6.math.sinh");

require("core-js/modules/es6.math.tanh");

require("core-js/modules/es6.math.trunc");

require("core-js/modules/es6.number.constructor");

require("core-js/modules/es6.number.epsilon");

require("core-js/modules/es6.number.is-finite");

require("core-js/modules/es6.number.is-integer");

require("core-js/modules/es6.number.is-nan");

require("core-js/modules/es6.number.is-safe-integer");

require("core-js/modules/es6.number.max-safe-integer");

require("core-js/modules/es6.number.min-safe-integer");

require("core-js/modules/es6.number.parse-float");

require("core-js/modules/es6.number.parse-int");

require("core-js/modules/es6.object.assign");

require("core-js/modules/es6.object.create");

require("core-js/modules/es7.object.define-getter");

require("core-js/modules/es7.object.define-setter");

require("core-js/modules/es6.object.define-property");

require("core-js/modules/es6.object.define-properties");

require("core-js/modules/es7.object.entries");

require("core-js/modules/es6.object.freeze");

require("core-js/modules/es6.object.get-own-property-descriptor");

require("core-js/modules/es7.object.get-own-property-descriptors");

require("core-js/modules/es6.object.get-own-property-names");

require("core-js/modules/es6.object.get-prototype-of");

require("core-js/modules/es7.object.lookup-getter");

require("core-js/modules/es7.object.lookup-setter");

require("core-js/modules/es6.object.prevent-extensions");

require("core-js/modules/es6.object.to-string");

require("core-js/modules/es6.object.is");

require("core-js/modules/es6.object.is-frozen");

require("core-js/modules/es6.object.is-sealed");

require("core-js/modules/es6.object.is-extensible");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.object.seal");

require("core-js/modules/es6.object.set-prototype-of");

require("core-js/modules/es7.object.values");

require("core-js/modules/es6.promise");

require("core-js/modules/es7.promise.finally");

require("core-js/modules/es6.reflect.apply");

require("core-js/modules/es6.reflect.construct");

require("core-js/modules/es6.reflect.define-property");

require("core-js/modules/es6.reflect.delete-property");

require("core-js/modules/es6.reflect.get");

require("core-js/modules/es6.reflect.get-own-property-descriptor");

require("core-js/modules/es6.reflect.get-prototype-of");

require("core-js/modules/es6.reflect.has");

require("core-js/modules/es6.reflect.is-extensible");

require("core-js/modules/es6.reflect.own-keys");

require("core-js/modules/es6.reflect.prevent-extensions");

require("core-js/modules/es6.reflect.set");

require("core-js/modules/es6.reflect.set-prototype-of");

require("core-js/modules/es6.regexp.constructor");

require("core-js/modules/es6.regexp.flags");

require("core-js/modules/es6.regexp.match");

require("core-js/modules/es6.regexp.replace");

require("core-js/modules/es6.regexp.split");

require("core-js/modules/es6.regexp.search");

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es6.set");

require("core-js/modules/es6.symbol");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.string.anchor");

require("core-js/modules/es6.string.big");

require("core-js/modules/es6.string.blink");

require("core-js/modules/es6.string.bold");

require("core-js/modules/es6.string.code-point-at");

require("core-js/modules/es6.string.ends-with");

require("core-js/modules/es6.string.fixed");

require("core-js/modules/es6.string.fontcolor");

require("core-js/modules/es6.string.fontsize");

require("core-js/modules/es6.string.from-code-point");

require("core-js/modules/es6.string.includes");

require("core-js/modules/es6.string.italics");

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.string.link");

require("core-js/modules/es7.string.pad-start");

require("core-js/modules/es7.string.pad-end");

require("core-js/modules/es6.string.raw");

require("core-js/modules/es6.string.repeat");

require("core-js/modules/es6.string.small");

require("core-js/modules/es6.string.starts-with");

require("core-js/modules/es6.string.strike");

require("core-js/modules/es6.string.sub");

require("core-js/modules/es6.string.sup");

require("core-js/modules/es6.string.trim");

require("core-js/modules/es7.string.trim-left");

require("core-js/modules/es7.string.trim-right");

require("core-js/modules/es6.typed.array-buffer");

require("core-js/modules/es6.typed.data-view");

require("core-js/modules/es6.typed.int8-array");

require("core-js/modules/es6.typed.uint8-array");

require("core-js/modules/es6.typed.uint8-clamped-array");

require("core-js/modules/es6.typed.int16-array");

require("core-js/modules/es6.typed.uint16-array");

require("core-js/modules/es6.typed.int32-array");

require("core-js/modules/es6.typed.uint32-array");

require("core-js/modules/es6.typed.float32-array");

require("core-js/modules/es6.typed.float64-array");

require("core-js/modules/es6.weak-map");

require("core-js/modules/es6.weak-set");

require("core-js/modules/web.timers");

require("core-js/modules/web.immediate");

require("core-js/modules/web.dom.iterable");

require("regenerator-runtime/runtime");

var _octoprint = _interopRequireDefault(require("./lib/octoprint.js"));

var _octofarm = _interopRequireDefault(require("./lib/octofarm.js"));

var _ui = _interopRequireDefault(require("./lib/functions/ui.js"));

var _printerManager = _interopRequireDefault(require("./lib/modules/printerManager.js"));

var _printerSettings = _interopRequireDefault(require("./lib/modules/printerSettings.js"));

var _file = _interopRequireDefault(require("./lib/functions/file.js"));

var _validate = _interopRequireDefault(require("./lib/functions/validate.js"));

var _powerButton = _interopRequireDefault(require("./lib/modules/powerButton.js"));

var _actionButtons = require("./lib/modules/Printers/actionButtons.js");

var _printerSelect = _interopRequireDefault(require("./lib/modules/printerSelect"));

var _printerLogs = _interopRequireDefault(require("./lib/modules/printerLogs.js"));

var _customScripts = _interopRequireDefault(require("./lib/modules/customScripts.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var printerInfo = "";
var deletedPrinters = [];
var worker = null;
var powerTimer = 5000;
var printerControlList = null;

function createWebWorker() {
  worker = new Worker("/assets/js/workers/printersManagerWorker.min.js");

  worker.onmessage = function (event) {
    if (event.data !== false) {
      if (event.data.currentTickerList.length > 0) {
        dashUpdate.ticker(event.data.currentTickerList);
      }

      printerInfo = event.data.printersInformation;
      printerControlList = event.data.printerControlList;

      if (event.data.printersInformation.length > 0) {
        if (document.getElementById("printerManagerModal").classList.contains("show")) {
          _printerManager["default"].init("", event.data.printersInformation, printerControlList);
        } else if (document.getElementById("printerSettingsModal").classList.contains("show")) {
          _printerSettings["default"].init("", event.data.printersInformation, event.data.printerControlList);
        } else {
          dashUpdate.printers(event.data.printersInformation, event.data.printerControlList);

          if (powerTimer >= 5000) {
            event.data.printersInformation.forEach(function (printer) {
              _powerButton["default"].applyBtn(printer, "powerBtn-");
            });
            powerTimer = 0;
          } else {
            powerTimer += 500;
          }
        }
      }
    }
  };
}

function handleVisibilityChange() {
  if (document.hidden) {
    if (worker !== null) {
      console.log("Screen Abandonded, closing web worker...");
      worker.terminate();
      worker = null;
    }
  } else {
    if (worker === null) {
      console.log("Screen resumed... opening web worker...");
      createWebWorker();
    }
  }
}

document.addEventListener("visibilitychange", handleVisibilityChange, false);

if (window.Worker) {
  // Yes! Web worker support!
  try {
    if (worker === null) {
      createWebWorker();
    }
  } catch (e) {
    console.log(e);
  }
} else {
  // Sorry! No Web Worker support..
  console.log("Web workers not available... sorry!");
}

var newPrintersIndex = 0;

var removeLine = function removeLine(element) {
  element.remove();
}; // Dash control listeners


var bulkPluginsToUpdate = false;
var bulkPluginUpdateButton = document.getElementById("blkUpdatePluginsBtn");
bulkPluginUpdateButton.addEventListener("click", /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(e) {
    var currentPrinterList, message, toUpdate, printer, currentPrinter, prepPrinter, plugin, currentPlugin;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _octofarm["default"].post("printers/printerInfo");

          case 2:
            currentPrinterList = _context2.sent;
            _context2.next = 5;
            return currentPrinterList.json();

          case 5:
            currentPrinterList = _context2.sent;
            message = "";
            toUpdate = [];

            for (printer = 0; printer < currentPrinterList.length; printer++) {
              currentPrinter = currentPrinterList[printer];

              if (typeof currentPrinter.updateAvailable !== "undefined") {
                if (currentPrinter.updateAvailable.pluginUpdates.length > 0) {
                  message += currentPrinter.printerName + "<br>";
                  prepPrinter = {
                    printer: currentPrinter,
                    plugins: []
                  };
                  toUpdate.push(prepPrinter);

                  for (plugin = 0; plugin < currentPrinter.updateAvailable.pluginUpdates.length; plugin++) {
                    currentPlugin = currentPrinter.updateAvailable.pluginUpdates[plugin];
                    toUpdate[toUpdate.length - 1].plugins.push(currentPlugin.id);
                  }
                }
              }
            }

            message += "Are you sure?";
            bootbox.confirm({
              size: "medium",
              title: "This will update the following printers plugins...",
              message: message,
              callback: function () {
                var _callback = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(result) {
                  var i, data, updateRequest, post;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          if (!result) {
                            _context.next = 19;
                            break;
                          }

                          i = 0;

                        case 2:
                          if (!(i < toUpdate.length)) {
                            _context.next = 19;
                            break;
                          }

                          data = {
                            targets: toUpdate[i].plugins,
                            force: true
                          };
                          _context.next = 6;
                          return _octoprint["default"].postNOAPI(toUpdate[i].printer, "plugin/softwareupdate/update", data);

                        case 6:
                          updateRequest = _context.sent;

                          if (!(updateRequest.status === 200)) {
                            _context.next = 15;
                            break;
                          }

                          _ui["default"].createAlert("success", "".concat(toUpdate[i].printer.printerName, ": Successfully updated! your instance will restart now."), 3000, "Clicked");

                          _context.next = 11;
                          return _octoprint["default"].systemNoConfirm(toUpdate[i].printer, "restart");

                        case 11:
                          post = _context.sent;

                          if (typeof post !== "undefined") {
                            if (post.status === 204) {
                              _ui["default"].createAlert("success", "Successfully made restart attempt to ".concat(toUpdate[i].printer.printerName, "... You may need to Re-Sync!"), 3000, "Clicked");
                            } else {
                              _ui["default"].createAlert("error", "There was an issue sending restart to ".concat(toUpdate[i].printer.printerName, " are you sure it's online?"), 3000, "Clicked");
                            }
                          } else {
                            _ui["default"].createAlert("error", "No response from ".concat(toUpdate[i].printer.printerName, ", is it online???"), 3000, "Clicked");
                          }

                          _context.next = 16;
                          break;

                        case 15:
                          _ui["default"].createAlert("error", "".concat(toUpdate[i].printer.printerName, ": Failed to update, manual intervention required!"), 3000, "Clicked");

                        case 16:
                          i++;
                          _context.next = 2;
                          break;

                        case 19:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                function callback(_x2) {
                  return _callback.apply(this, arguments);
                }

                return callback;
              }()
            });

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
var bulkOctoPrintsToUpdate = false;
var bulkOctoPrintUpdateButton = document.getElementById("blkOctoPrintUpdate");
bulkOctoPrintUpdateButton.addEventListener("click", /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(e) {
    var onScreenButtons, currentUpdates;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            onScreenButtons = document.querySelectorAll("*[id^=octoprintUpdate-]");
            currentUpdates = _toConsumableArray(onScreenButtons).filter(function (item) {
              return !item.classList.contains("d-none");
            });
            bootbox.confirm({
              message: "This will update any OctoPrint instance with one update available, are you sure?",
              buttons: {
                confirm: {
                  label: "Yes",
                  className: "btn-success"
                },
                cancel: {
                  label: "No",
                  className: "btn-danger"
                }
              },
              callback: function () {
                var _callback2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(result) {
                  var _iterator, _step, btn;

                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          if (!result) {
                            _context3.next = 20;
                            break;
                          }

                          _iterator = _createForOfIteratorHelper(currentUpdates);
                          _context3.prev = 2;

                          _iterator.s();

                        case 4:
                          if ((_step = _iterator.n()).done) {
                            _context3.next = 12;
                            break;
                          }

                          btn = _step.value;
                          btn.disabled = false;
                          btn.click();
                          _context3.next = 10;
                          return delay(1000);

                        case 10:
                          _context3.next = 4;
                          break;

                        case 12:
                          _context3.next = 17;
                          break;

                        case 14:
                          _context3.prev = 14;
                          _context3.t0 = _context3["catch"](2);

                          _iterator.e(_context3.t0);

                        case 17:
                          _context3.prev = 17;

                          _iterator.f();

                          return _context3.finish(17);

                        case 20:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3, null, [[2, 14, 17, 20]]);
                }));

                function callback(_x4) {
                  return _callback2.apply(this, arguments);
                }

                return callback;
              }()
            });

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function (_x3) {
    return _ref2.apply(this, arguments);
  };
}());
var deleteAllBtn = document.getElementById("delAllBtn");

function delay(_x5) {
  return _delay.apply(this, arguments);
}

function _delay() {
  _delay = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee51(ms) {
    return regeneratorRuntime.wrap(function _callee51$(_context59) {
      while (1) {
        switch (_context59.prev = _context59.next) {
          case 0:
            return _context59.abrupt("return", new Promise(function (resolve) {
              setTimeout(resolve, ms);
            }));

          case 1:
          case "end":
            return _context59.stop();
        }
      }
    }, _callee51);
  }));
  return _delay.apply(this, arguments);
}

deleteAllBtn.addEventListener("click", /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(e) {
    var onScreenButtons, _iterator2, _step2, btn;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            onScreenButtons = document.querySelectorAll("*[id^=delButton-]");
            _iterator2 = _createForOfIteratorHelper(onScreenButtons);

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                btn = _step2.value;
                btn.click();
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function (_x6) {
    return _ref3.apply(this, arguments);
  };
}());
var saveAllBtn = document.getElementById("saveAllBtn");
saveAllBtn.addEventListener("click", /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(e) {
    var onScreenButtons, onScreenDelete, _iterator3, _step3, btn, _iterator4, _step4, _btn, _iterator5, _step5, _btn2;

    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            saveAllBtn.disabled = true;
            deleteAllBtn.disabled = true;
            onScreenButtons = document.querySelectorAll("*[id^=saveButton-]");
            onScreenDelete = document.querySelectorAll("*[id^=delButton-]");
            _iterator3 = _createForOfIteratorHelper(onScreenButtons);

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                btn = _step3.value;
                btn.disabled = true;
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            _iterator4 = _createForOfIteratorHelper(onScreenDelete);

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                _btn = _step4.value;
                _btn.disabled = true;
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }

            _ui["default"].createAlert("warning", "Starting to save all your instances... this may take some time...", onScreenButtons.length * 1500);

            _iterator5 = _createForOfIteratorHelper(onScreenButtons);
            _context6.prev = 10;

            _iterator5.s();

          case 12:
            if ((_step5 = _iterator5.n()).done) {
              _context6.next = 20;
              break;
            }

            _btn2 = _step5.value;
            _btn2.disabled = false;

            _btn2.click();

            _context6.next = 18;
            return delay(1500);

          case 18:
            _context6.next = 12;
            break;

          case 20:
            _context6.next = 25;
            break;

          case 22:
            _context6.prev = 22;
            _context6.t0 = _context6["catch"](10);

            _iterator5.e(_context6.t0);

          case 25:
            _context6.prev = 25;

            _iterator5.f();

            return _context6.finish(25);

          case 28:
            _ui["default"].createAlert("success", "Successfully saved all your instances", 4000);

            saveAllBtn.disabled = false;
            deleteAllBtn.disabled = true;

          case 31:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, null, [[10, 22, 25, 28]]);
  }));

  return function (_x7) {
    return _ref4.apply(this, arguments);
  };
}());
var bulkConnectBtn = document.getElementById("bulkConnectBtn");
bulkConnectBtn.addEventListener("click", /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(e) {
    var printerConnect;
    return regeneratorRuntime.wrap(function _callee8$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            printerConnect = /*#__PURE__*/function () {
              var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                var printersToConnect, selectedPrinters, _loop, p;

                return regeneratorRuntime.wrap(function _callee7$(_context8) {
                  while (1) {
                    switch (_context8.prev = _context8.next) {
                      case 0:
                        printersToConnect = []; //Grab all check boxes

                        selectedPrinters = _printerSelect["default"].getSelected();
                        selectedPrinters.forEach(function (element) {
                          var ca = element.id.split("-");
                          printersToConnect.push(ca[1]);
                        });
                        _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop(p) {
                          var index, data, post;
                          return regeneratorRuntime.wrap(function _loop$(_context7) {
                            while (1) {
                              switch (_context7.prev = _context7.next) {
                                case 0:
                                  index = _.findIndex(printerInfo, function (o) {
                                    return o._id === printersToConnect[p];
                                  });

                                  if (!(index > -1)) {
                                    _context7.next = 14;
                                    break;
                                  }

                                  data = {};

                                  if (typeof printerInfo[index].connectionOptions !== "undefined") {
                                    data = {
                                      command: "connect",
                                      port: printerInfo[index].connectionOptions.portPreference,
                                      baudrate: printerInfo[index].connectionOptions.baudratePreference,
                                      printerProfile: printerInfo[index].connectionOptions.printerProfilePreference,
                                      save: true
                                    };
                                  } else {
                                    _ui["default"].createAlert("warning", "".concat(printerInfo[index].printerName, " has no preferences saved, defaulting to AUTO..."), 8000, "Clicked");

                                    data.command = "connect";
                                    data.port = "AUTO";
                                    data.baudrate = "AUTO";
                                    data.printerProfile = "_default";
                                    data.save = false;
                                  }

                                  if (!(printerInfo[index].printerState.colour.category === "Disconnected")) {
                                    _context7.next = 11;
                                    break;
                                  }

                                  _context7.next = 7;
                                  return _octoprint["default"].post(printerInfo[index], "connection", data);

                                case 7:
                                  post = _context7.sent;

                                  if (typeof post !== "undefined") {
                                    if (post.status === 204) {
                                      _ui["default"].createAlert("success", "Successfully made connection attempt to ".concat(printerInfo[index].printerName, "..."), 3000, "Clicked");
                                    } else {
                                      _ui["default"].createAlert("error", "There was an issue connecting to ".concat(printerInfo[index].printerName, " it's either not online, or the connection options supplied are not available..."), 3000, "Clicked");
                                    }
                                  } else {
                                    _ui["default"].createAlert("error", "No response from ".concat(printerInfo[index].printerName, ", is it online???"), 3000, "Clicked");
                                  }

                                  _context7.next = 12;
                                  break;

                                case 11:
                                  _ui["default"].createAlert("warning", "Printer ".concat(printerInfo[index].printerName, " is not in \"Disconnected\" state... skipping"), 3000, "Clicked");

                                case 12:
                                  _context7.next = 15;
                                  break;

                                case 14:
                                  _ui["default"].createAlert("error", "Could not find ".concat(printerInfo[index].printerName, " in your printer in the list of available printers..."), 3000, "Clicked");

                                case 15:
                                case "end":
                                  return _context7.stop();
                              }
                            }
                          }, _loop);
                        });
                        p = 0;

                      case 5:
                        if (!(p < printersToConnect.length)) {
                          _context8.next = 10;
                          break;
                        }

                        return _context8.delegateYield(_loop(p), "t0", 7);

                      case 7:
                        p++;
                        _context8.next = 5;
                        break;

                      case 10:
                      case "end":
                        return _context8.stop();
                    }
                  }
                }, _callee7);
              }));

              return function printerConnect() {
                return _ref6.apply(this, arguments);
              };
            }();

            _printerSelect["default"].create(document.getElementById("multiPrintersSection"), false, "Connect Printers", printerConnect);

          case 2:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee8);
  }));

  return function (_x8) {
    return _ref5.apply(this, arguments);
  };
}());
var bulkDisconnectBtn = document.getElementById("bulkDisconnectBtn");
bulkDisconnectBtn.addEventListener("click", /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(e) {
    var printerDisconnect;
    return regeneratorRuntime.wrap(function _callee10$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            printerDisconnect = /*#__PURE__*/function () {
              var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                var printersToConnect, selectedPrinters, _loop2, p;

                return regeneratorRuntime.wrap(function _callee9$(_context11) {
                  while (1) {
                    switch (_context11.prev = _context11.next) {
                      case 0:
                        printersToConnect = []; //Grab all check boxes

                        selectedPrinters = _printerSelect["default"].getSelected();
                        selectedPrinters.forEach(function (element) {
                          var ca = element.id.split("-");
                          printersToConnect.push(ca[1]);
                        });
                        _loop2 = /*#__PURE__*/regeneratorRuntime.mark(function _loop2(p) {
                          var index, data, post;
                          return regeneratorRuntime.wrap(function _loop2$(_context10) {
                            while (1) {
                              switch (_context10.prev = _context10.next) {
                                case 0:
                                  index = _.findIndex(printerInfo, function (o) {
                                    return o._id === printersToConnect[p];
                                  });

                                  if (!(index > -1)) {
                                    _context10.next = 13;
                                    break;
                                  }

                                  data = {
                                    command: "disconnect"
                                  };

                                  if (!(printerInfo[index].printerState.colour.category === "Idle")) {
                                    _context10.next = 10;
                                    break;
                                  }

                                  _context10.next = 6;
                                  return _octoprint["default"].post(printerInfo[index], "connection", data);

                                case 6:
                                  post = _context10.sent;

                                  if (typeof post !== "undefined") {
                                    if (post.status === 204) {
                                      _ui["default"].createAlert("success", "Successfully made disconnect attempt to ".concat(printerInfo[index].printerName, "..."), 3000, "Clicked");
                                    } else {
                                      _ui["default"].createAlert("error", "There was an issue disconnecting to ".concat(printerInfo[index].printerName, " are you sure it's online?"), 3000, "Clicked");
                                    }
                                  } else {
                                    _ui["default"].createAlert("error", "No response from ".concat(printerInfo[index].printerName, ", is it online???"), 3000, "Clicked");
                                  }

                                  _context10.next = 11;
                                  break;

                                case 10:
                                  _ui["default"].createAlert("warning", "Printer ".concat(printerInfo[index].printerName, " is not in \"Idle\" state... skipping"), 3000, "Clicked");

                                case 11:
                                  _context10.next = 14;
                                  break;

                                case 13:
                                  _ui["default"].createAlert("error", "Could not find ".concat(printerInfo[index].printerName, " in your printer in the list of available printers..."), 3000, "Clicked");

                                case 14:
                                case "end":
                                  return _context10.stop();
                              }
                            }
                          }, _loop2);
                        });
                        p = 0;

                      case 5:
                        if (!(p < printersToConnect.length)) {
                          _context11.next = 10;
                          break;
                        }

                        return _context11.delegateYield(_loop2(p), "t0", 7);

                      case 7:
                        p++;
                        _context11.next = 5;
                        break;

                      case 10:
                      case "end":
                        return _context11.stop();
                    }
                  }
                }, _callee9);
              }));

              return function printerDisconnect() {
                return _ref8.apply(this, arguments);
              };
            }();

            _printerSelect["default"].create(document.getElementById("multiPrintersSection"), false, "Disconnect Printers", printerDisconnect);

          case 2:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee10);
  }));

  return function (_x9) {
    return _ref7.apply(this, arguments);
  };
}());
var bulkPowerBtn = document.getElementById("bulkPowerBtn");
bulkPowerBtn.addEventListener("click", /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(e) {
    var printerPower;
    return regeneratorRuntime.wrap(function _callee13$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            printerPower = /*#__PURE__*/function () {
              var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                return regeneratorRuntime.wrap(function _callee12$(_context15) {
                  while (1) {
                    switch (_context15.prev = _context15.next) {
                      case 0:
                        bootbox.prompt({
                          title: "Power command!",
                          message: "<p>Please select an option below:</p>",
                          inputType: "radio",
                          inputOptions: [{
                            text: "Restart OctoPrint",
                            value: "restart"
                          }, {
                            text: "Reboot Host",
                            value: "reboot"
                          }, {
                            text: "Shutdown Host",
                            value: "shutdown"
                          }],
                          callback: function () {
                            var _callback3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(result) {
                              var printersToConnect, selectedPrinters, _loop3, p;

                              return regeneratorRuntime.wrap(function _callee11$(_context14) {
                                while (1) {
                                  switch (_context14.prev = _context14.next) {
                                    case 0:
                                      printersToConnect = []; //Grab all check boxes

                                      selectedPrinters = _printerSelect["default"].getSelected();
                                      selectedPrinters.forEach(function (element) {
                                        var ca = element.id.split("-");
                                        printersToConnect.push(ca[1]);
                                      });
                                      _loop3 = /*#__PURE__*/regeneratorRuntime.mark(function _loop3(p) {
                                        var index, post;
                                        return regeneratorRuntime.wrap(function _loop3$(_context13) {
                                          while (1) {
                                            switch (_context13.prev = _context13.next) {
                                              case 0:
                                                index = _.findIndex(printerInfo, function (o) {
                                                  return o._id === printersToConnect[p];
                                                });

                                                if (!(index > -1)) {
                                                  _context13.next = 14;
                                                  break;
                                                }

                                                if (!(printerInfo[index].printerState.colour.category !== "Active")) {
                                                  _context13.next = 11;
                                                  break;
                                                }

                                                _context13.next = 5;
                                                return _octoprint["default"].systemNoConfirm(printerInfo[index], result);

                                              case 5:
                                                post = _context13.sent;
                                                _context13.next = 8;
                                                return delay(1000);

                                              case 8:
                                                if (typeof post !== "undefined") {
                                                  if (post.status === 204) {
                                                    _ui["default"].createAlert("success", "Successfully made ".concat(result, " attempt to ").concat(printerInfo[index].printerName, "..."), 3000, "Clicked");
                                                  } else {
                                                    _ui["default"].createAlert("error", "There was an issue sending ".concat(result, " to ").concat(printerInfo[index].printerName, " are you sure it's online?"), 3000, "Clicked");
                                                  }
                                                } else {
                                                  _ui["default"].createAlert("error", "No response from ".concat(printerInfo[index].printerName, ", is it online???"), 3000, "Clicked");
                                                }

                                                _context13.next = 12;
                                                break;

                                              case 11:
                                                _ui["default"].createAlert("warning", "Printer ".concat(printerInfo[index].printerName, " is not in \"Idle\" state... skipping"), 3000, "Clicked");

                                              case 12:
                                                _context13.next = 15;
                                                break;

                                              case 14:
                                                _ui["default"].createAlert("error", "Could not find your printer in your printer in the list of available printers...", 3000, "Clicked");

                                              case 15:
                                              case "end":
                                                return _context13.stop();
                                            }
                                          }
                                        }, _loop3);
                                      });
                                      p = 0;

                                    case 5:
                                      if (!(p < printersToConnect.length)) {
                                        _context14.next = 10;
                                        break;
                                      }

                                      return _context14.delegateYield(_loop3(p), "t0", 7);

                                    case 7:
                                      p++;
                                      _context14.next = 5;
                                      break;

                                    case 10:
                                    case "end":
                                      return _context14.stop();
                                  }
                                }
                              }, _callee11);
                            }));

                            function callback(_x11) {
                              return _callback3.apply(this, arguments);
                            }

                            return callback;
                          }()
                        });

                      case 1:
                      case "end":
                        return _context15.stop();
                    }
                  }
                }, _callee12);
              }));

              return function printerPower() {
                return _ref10.apply(this, arguments);
              };
            }();

            _printerSelect["default"].create(document.getElementById("multiPrintersSection"), false, "Power On/Off Printers", printerPower);

          case 2:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee13);
  }));

  return function (_x10) {
    return _ref9.apply(this, arguments);
  };
}());
var scanNetworkBtn = document.getElementById("scanNetworkBtn");
scanNetworkBtn.addEventListener("click", /*#__PURE__*/function () {
  var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(e) {
    var printers, scannedPrinters, index, printer;
    return regeneratorRuntime.wrap(function _callee14$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            e.target.disabled = true;

            _ui["default"].createAlert("warning", "Scanning your network for new devices now... Please wait!", 20000);

            _context17.next = 4;
            return _octofarm["default"].get("printers/scanNetwork");

          case 4:
            printers = _context17.sent;
            _context17.next = 7;
            return printers.json();

          case 7:
            scannedPrinters = _context17.sent;

            for (index = 0; index < scannedPrinters.length; index++) {
              printer = {
                printerURL: "",
                cameraURL: "",
                name: "",
                group: "",
                apikey: ""
              };

              if (typeof scannedPrinters[index].name !== "undefined") {
                printer.name = scannedPrinters[index].name;
              }

              if (typeof scannedPrinters[index].url !== "undefined") {
                printer.printerURL = scannedPrinters[index].url;
              }

              PrintersManagement.addPrinter(printer);
            }

            _ui["default"].createAlert("success", "Scanning your network for new devices now... Please wait!", 3000, "Clicked");

            e.target.disabled = false;

          case 11:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee14);
  }));

  return function (_x12) {
    return _ref11.apply(this, arguments);
  };
}());
var bulkPreHeat = document.getElementById("bulkPreHeat");
bulkPreHeat.addEventListener("click", /*#__PURE__*/function () {
  var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(e) {
    var printersPreHeat;
    return regeneratorRuntime.wrap(function _callee17$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            printersPreHeat = /*#__PURE__*/function () {
              var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
                var printersToConnect, selectedPrinters;
                return regeneratorRuntime.wrap(function _callee16$(_context20) {
                  while (1) {
                    switch (_context20.prev = _context20.next) {
                      case 0:
                        printersToConnect = []; //Grab all check boxes

                        selectedPrinters = _printerSelect["default"].getSelected();
                        selectedPrinters.forEach(function (element) {
                          var ca = element.id.split("-");
                          printersToConnect.push(ca[1]);
                        });
                        bootbox.dialog({
                          title: "Bulk printer heating...",
                          message: "\n        <form class=\"form-inline\">\n           <div class=\"input-group mb-3\">\n            <div class=\"input-group-prepend\">\n              <label class=\"input-group-text\" for=\"preHeatToolSelect\">Tool #: </label>\n            </div>\n            <select class=\"custom-select\" id=\"preHeatToolSelect\">\n              <option selected value=\"0\">0</option>\n              <option value=\"0\">1</option>\n              <option value=\"0\">2</option>\n              <option value=\"0\">3</option>\n              <option value=\"0\">4</option>\n            </select>\n          </div>\n          <div class=\"input-group mb-3\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"0\" aria-label=\"0\" aria-describedby=\"basic-addon1\" id=\"preHeatToolTempSelect\">\n            <div class=\"input-group-append\">\n              <span class=\"input-group-text\" id=\"basic-addon1\">\xB0C</span>\n            </div>\n          </div>\n          <p>&nbsp;</p>\n          <div class=\"input-group mb-3\">\n            <div class=\"input-group-prepend\">\n              <span class=\"input-group-text\" id=\"basic-addon1\">Bed</span>\n            </div>\n            <input type=\"text\" class=\"form-control\" placeholder=\"0\" aria-label=\"0\" aria-describedby=\"basic-addon1\" id=\"preHeatBedTempSelect\">\n            <div class=\"input-group-append\">\n              <span class=\"input-group-text\" id=\"basic-addon1\">\xB0C</span>\n            </div>\n          </div>\n          <p>&nbsp;</p>\n          <div class=\"input-group mb-3\">\n            <div class=\"input-group-prepend\">\n              <span class=\"input-group-text\" id=\"basic-addon1\">Chamber</span>\n            </div>\n            <input type=\"text\" class=\"form-control\" placeholder=\"0\" aria-label=\"0\" aria-describedby=\"basic-addon1\" id=\"preHeatChamberTempSelect\">\n                  <div class=\"input-group-append\">\n              <span class=\"input-group-text\" id=\"basic-addon1\">\xB0C</span>\n            </div>\n          </div>\n        </form>\n        ",
                          size: "large",
                          onEscape: true,
                          backdrop: true,
                          closeButton: true,
                          buttons: {
                            action: {
                              label: "<i class=\"fas fa-fire\"></i> Heat!",
                              className: "btn-success",
                              callback: function () {
                                var _callback4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
                                  var toolNumber, toolTemp, bedTemp, chamberTemp, toolData, bedData, chamberData, _loop4, p;

                                  return regeneratorRuntime.wrap(function _callee15$(_context19) {
                                    while (1) {
                                      switch (_context19.prev = _context19.next) {
                                        case 0:
                                          toolNumber = document.getElementById("preHeatToolSelect");
                                          toolTemp = document.getElementById("preHeatToolTempSelect");
                                          bedTemp = document.getElementById("preHeatBedTempSelect");
                                          chamberTemp = document.getElementById("preHeatChamberTempSelect");
                                          toolData = {
                                            command: "target",
                                            targets: {}
                                          };
                                          bedData = {
                                            command: "target",
                                            target: 0
                                          };
                                          chamberData = {
                                            command: "target",
                                            target: 0
                                          };

                                          if (toolTemp.value !== "" && !isNaN(toolTemp.value)) {
                                            toolData.targets["tool" + toolNumber.value] = parseInt(toolTemp.value);
                                          }

                                          if (bedTemp.value !== "" && !isNaN(bedTemp.value)) {
                                            bedData.target = parseInt(bedTemp.value);
                                          }

                                          if (chamberTemp.value !== "" && !isNaN(chamberTemp.value)) {
                                            chamberData.target = parseInt(chamberTemp.value);
                                          }

                                          _loop4 = /*#__PURE__*/regeneratorRuntime.mark(function _loop4(p) {
                                            var index, post, _post, _post2;

                                            return regeneratorRuntime.wrap(function _loop4$(_context18) {
                                              while (1) {
                                                switch (_context18.prev = _context18.next) {
                                                  case 0:
                                                    index = _.findIndex(printerInfo, function (o) {
                                                      return o._id === printersToConnect[p];
                                                    });

                                                    if (!(index > -1)) {
                                                      _context18.next = 17;
                                                      break;
                                                    }

                                                    if (!(toolTemp.value !== "" && !isNaN(toolTemp.value))) {
                                                      _context18.next = 7;
                                                      break;
                                                    }

                                                    _context18.next = 5;
                                                    return _octoprint["default"].post(printerInfo[index], "printer/tool", toolData);

                                                  case 5:
                                                    post = _context18.sent;

                                                    if (typeof post !== "undefined") {
                                                      if (post.status === 204) {
                                                        _ui["default"].createAlert("success", "Successfully set tool".concat(toolNumber.value, " target attempt to ").concat(printerInfo[index].printerName, "..."), 3000, "Clicked");
                                                      } else {
                                                        _ui["default"].createAlert("error", "There was an issue setting tool".concat(toolNumber.value, " target attempt to ").concat(printerInfo[index].printerName, " are you sure it's online?"), 3000, "Clicked");
                                                      }
                                                    } else {
                                                      _ui["default"].createAlert("error", "No response from ".concat(printerInfo[index].printerName, ", is it online???"), 3000, "Clicked");
                                                    }

                                                  case 7:
                                                    if (!(bedTemp.value !== "" && !isNaN(bedTemp.value))) {
                                                      _context18.next = 12;
                                                      break;
                                                    }

                                                    _context18.next = 10;
                                                    return _octoprint["default"].post(printerInfo[index], "printer/bed", bedData);

                                                  case 10:
                                                    _post = _context18.sent;

                                                    if (typeof _post !== "undefined") {
                                                      if (_post.status === 204) {
                                                        _ui["default"].createAlert("success", "Successfully set bed target attempt to ".concat(printerInfo[index].printerName, "..."), 3000, "Clicked");
                                                      } else {
                                                        _ui["default"].createAlert("error", "There was an issue setting bed target attempt to ".concat(printerInfo[index].printerName, " are you sure it's online?"), 3000, "Clicked");
                                                      }
                                                    } else {
                                                      _ui["default"].createAlert("error", "No response from ".concat(printerInfo[index].printerName, ", is it online???"), 3000, "Clicked");
                                                    }

                                                  case 12:
                                                    if (!(chamberTemp.value !== "" && !isNaN(chamberTemp.value))) {
                                                      _context18.next = 17;
                                                      break;
                                                    }

                                                    _context18.next = 15;
                                                    return _octoprint["default"].post(printerInfo[index], "printer/chamber", chamberData);

                                                  case 15:
                                                    _post2 = _context18.sent;

                                                    if (typeof _post2 !== "undefined") {
                                                      if (_post2.status === 204) {
                                                        _ui["default"].createAlert("success", "Successfully set chamber target attempt to ".concat(printerInfo[index].printerName, "..."), 3000, "Clicked");
                                                      } else {
                                                        _ui["default"].createAlert("error", "There was an issue setting chamber target attempt to ".concat(printerInfo[index].printerName, " are you sure it's online?"), 3000, "Clicked");
                                                      }
                                                    } else {
                                                      _ui["default"].createAlert("error", "No response from ".concat(printerInfo[index].printerName, ", is it online???"), 3000, "Clicked");
                                                    }

                                                  case 17:
                                                  case "end":
                                                    return _context18.stop();
                                                }
                                              }
                                            }, _loop4);
                                          });
                                          p = 0;

                                        case 12:
                                          if (!(p < printersToConnect.length)) {
                                            _context19.next = 17;
                                            break;
                                          }

                                          return _context19.delegateYield(_loop4(p), "t0", 14);

                                        case 14:
                                          p++;
                                          _context19.next = 12;
                                          break;

                                        case 17:
                                        case "end":
                                          return _context19.stop();
                                      }
                                    }
                                  }, _callee15);
                                }));

                                function callback() {
                                  return _callback4.apply(this, arguments);
                                }

                                return callback;
                              }()
                            }
                          }
                        });

                      case 4:
                      case "end":
                        return _context20.stop();
                    }
                  }
                }, _callee16);
              }));

              return function printersPreHeat() {
                return _ref13.apply(this, arguments);
              };
            }();

            _printerSelect["default"].create(document.getElementById("multiPrintersSection"), false, "Pre-Heat Printers", printersPreHeat);

          case 2:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee17);
  }));

  return function (_x13) {
    return _ref12.apply(this, arguments);
  };
}());
var bulkControl = document.getElementById("bulkControl");
bulkControl.addEventListener("click", /*#__PURE__*/function () {
  var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(e) {
    var printersControl;
    return regeneratorRuntime.wrap(function _callee20$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            printersControl = /*#__PURE__*/function () {
              var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
                var printersToConnect, selectedPrinters, cameraBlock;
                return regeneratorRuntime.wrap(function _callee19$(_context23) {
                  while (1) {
                    switch (_context23.prev = _context23.next) {
                      case 0:
                        printersToConnect = []; //Grab all check boxes

                        selectedPrinters = _printerSelect["default"].getSelected();
                        selectedPrinters.forEach(function (element) {
                          var ca = element.id.split("-");
                          printersToConnect.push(ca[1]);
                        });
                        cameraBlock = "";
                        printersToConnect.forEach(function (printer) {
                          var index = _.findIndex(printerInfo, function (o) {
                            return o._id === printer;
                          });

                          if (index > -1) {
                            cameraBlock += "\n        <div class=\"col-lg-3\">\n            <img width=\"100%\" src=\"".concat(printerInfo[index].cameraURL, "\">\n        </div>\n        ");
                          }
                        });
                        bootbox.dialog({
                          title: "Bulk printer control...",
                          message: "\n      <div id=\"printerControls\" class=\"row\">\n            <div class=\"col-lg-12\">\n              <div class=\"row\">\n                 ".concat(cameraBlock, "\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n                            <div class=\"row\">\n                    <div class=\"col-9\">\n                        <center>\n                            <h5>X/Y</h5>\n                        </center>\n                        <hr>\n                    </div>\n                    <div class=\"col-3\">\n                        <center>\n                            <h5>Z</h5>\n                        </center>\n                        <hr>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcYpos\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-up\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZpos\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-up\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-left\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXYhome\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-home\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcXpos\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-right\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZhome\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-home\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcYneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-down\"></i></button></center>\n                    </div>\n                    <div class=\"col-3\"></div>\n                    <div class=\"col-3\">\n                        <center><button id=\"pcZneg\" type=\"button\" class=\"btn btn-light\"><i class=\"fas fa-arrow-down\"></i></button></center>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <center>\n                            <div id=\"pcAxisSteps\" class=\"btn-group\" role=\"group\">\n                                <button id=\"pcAxisSteps01\" type=\"button\" class=\"btn btn-light\" value=\"01\">0.1</button>\n                                <button id=\"pcAxisSteps1\" type=\"button\" class=\"btn btn-light\" value=\"1\">1</button>\n                                <button id=\"pcAxisSteps10\" type=\"button\" class=\"btn btn-dark active\" value=\"10\">10</button>\n                                <button id=\"pcAxisSteps100\" type=\"button\" class=\"btn btn-light\" value=\"100\">100</button>\n                            </div>\n                        </center>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-6\">\n            <center>\n            <button id=\"pmPrintStart\" type=\"button\" class=\"btn btn-success mb-1\" role=\"button\" style=\"display: inline-block;\"><i class=\"fas fa-print\"></i> Print</button> <br>\n            <button id=\"pmPrintPause\" type=\"button\" class=\"btn btn-light mb-1\" role=\"button\" style=\"display: inline-block;\"><i class=\"fas fa-pause\"></i> Pause</button> <br>\n            <button id=\"pmPrintRestart\" type=\"button\" class=\"btn btn-warning mb-1\" role=\"button\"  style=\"display: inline-block;\"><i class=\"fas fa-undo\"></i> Restart</button> <br>\n            <button id=\"pmPrintResume\" type=\"button\" class=\"btn btn-info mb-1\" role=\"button\"  style=\"display: inline-block;\"><i class=\"fas fa-redo\"></i> Resume</button> <br>\n            <button id=\"pmPrintStop\" type=\"button\" class=\"btn btn-danger mb-1\" style=\"display: inline-block;\"><i class=\"fas fa-square\"></i> Cancel</button> <br>\n            </center>\n            </div>\n        "),
                          size: "large",
                          onEscape: true,
                          backdrop: true,
                          closeButton: true,
                          onShow: function onShow(e) {
                            //Grab Page
                            var printerControls = {
                              xPlus: document.getElementById("pcXpos"),
                              xMinus: document.getElementById("pcXneg"),
                              yPlus: document.getElementById("pcYpos"),
                              yMinus: document.getElementById("pcYneg"),
                              xyHome: document.getElementById("pcXYhome"),
                              zPlus: document.getElementById("pcZpos"),
                              zMinus: document.getElementById("pcZneg"),
                              zHome: document.getElementById("pcZhome"),
                              step01: document.getElementById("pcAxisSteps01"),
                              step1: document.getElementById("pcAxisSteps1"),
                              step10: document.getElementById("pcAxisSteps10"),
                              step100: document.getElementById("pcAxisSteps100"),
                              printStart: document.getElementById("pmPrintStart"),
                              printPause: document.getElementById("pmPrintPause"),
                              printRestart: document.getElementById("pmPrintRestart"),
                              printResume: document.getElementById("pmPrintResume"),
                              printStop: document.getElementById("pmPrintStop")
                            };
                            printerControls.printStart.addEventListener("click", /*#__PURE__*/function () {
                              var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(e) {
                                return regeneratorRuntime.wrap(function _callee18$(_context22) {
                                  while (1) {
                                    switch (_context22.prev = _context22.next) {
                                      case 0:
                                        printersToConnect.forEach(function (printer) {
                                          var index = _.findIndex(printerInfo, function (o) {
                                            return o._id === printer;
                                          });

                                          if (index > -1) {
                                            e.target.disabled = true;
                                            var opts = {
                                              command: "start"
                                            };

                                            _octoprint["default"].jobAction(printerInfo[index], opts, e);
                                          }
                                        });

                                      case 1:
                                      case "end":
                                        return _context22.stop();
                                    }
                                  }
                                }, _callee18);
                              }));

                              return function (_x15) {
                                return _ref16.apply(this, arguments);
                              };
                            }());
                            printerControls.printPause.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  e.target.disabled = true;
                                  var opts = {
                                    command: "pause",
                                    action: "pause"
                                  };

                                  _octoprint["default"].jobAction(printerInfo[index], opts, e);
                                }
                              });
                            });
                            printerControls.printRestart.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  e.target.disabled = true;
                                  var opts = {
                                    command: "restart"
                                  };

                                  _octoprint["default"].jobAction(printerInfo[index], opts, e);
                                }
                              });
                            });
                            printerControls.printResume.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  e.target.disabled = true;
                                  var opts = {
                                    command: "pause",
                                    action: "resume"
                                  };

                                  _octoprint["default"].jobAction(printerInfo[index], opts, e);
                                }
                              });
                            });
                            printerControls.printStop.addEventListener("click", function (e) {
                              bootbox.confirm({
                                message: "Are you sure you want to cancel all of your ongoing print?",
                                buttons: {
                                  cancel: {
                                    label: "<i class=\"fa fa-times\"></i> Cancel"
                                  },
                                  confirm: {
                                    label: "<i class=\"fa fa-check\"></i> Confirm"
                                  }
                                },
                                callback: function callback(result) {
                                  if (result) {
                                    printersToConnect.forEach(function (printer) {
                                      var index = _.findIndex(printerInfo, function (o) {
                                        return o._id === printer;
                                      });

                                      if (index > -1) {
                                        e.target.disabled = true;
                                        var opts = {
                                          command: "cancel"
                                        };

                                        _octoprint["default"].jobAction(printerInfo[index], opts, e);
                                      }
                                    });
                                  }
                                }
                              });
                            });
                            printerControls.xPlus.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  _octoprint["default"].move(e, printerInfo[index], "jog", "x");
                                }
                              });
                            });
                            printerControls.xMinus.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  _octoprint["default"].move(e, printerInfo[index], "jog", "x", "-");
                                }
                              });
                            });
                            printerControls.yPlus.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  _octoprint["default"].move(e, printerInfo[index], "jog", "y");
                                }
                              });
                            });
                            printerControls.yMinus.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  _octoprint["default"].move(e, printerInfo[index], "jog", "y", "-");
                                }
                              });
                            });
                            printerControls.xyHome.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  _octoprint["default"].move(e, printerInfo[index], "home", ["x", "y"]);
                                }
                              });
                            });
                            printerControls.zPlus.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  _octoprint["default"].move(e, printerInfo[index], "jog", "z");
                                }
                              });
                            });
                            printerControls.zMinus.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  _octoprint["default"].move(e, printerInfo[index], "jog", "z", "-");
                                }
                              });
                            });
                            printerControls.zHome.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  _octoprint["default"].move(e, printerInfo[index], "home", ["z"]);
                                }
                              });
                            });
                            printerControls.step01.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  _octofarm["default"].post("printers/stepChange", {
                                    printer: printerInfo[index]._id,
                                    newSteps: "01"
                                  });
                                }
                              });
                              printerControls.step01.className = "btn btn-dark active";
                              printerControls.step1.className = "btn btn-light";
                              printerControls.step10.className = "btn btn-light";
                              printerControls.step100.className = "btn btn-light";
                            });
                            printerControls.step1.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  _octofarm["default"].post("printers/stepChange", {
                                    printer: printerInfo[index]._id,
                                    newSteps: "1"
                                  });
                                }
                              });
                              printerControls.step1.className = "btn btn-dark active";
                              printerControls.step01.className = "btn btn-light";
                              printerControls.step10.className = "btn btn-light";
                              printerControls.step100.className = "btn btn-light";
                            });
                            printerControls.step10.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  _octofarm["default"].post("printers/stepChange", {
                                    printer: printerInfo[index]._id,
                                    newSteps: "10"
                                  });
                                }
                              });
                              printerControls.step10.className = "btn btn-dark active";
                              printerControls.step1.className = "btn btn-light";
                              printerControls.step01.className = "btn btn-light";
                              printerControls.step100.className = "btn btn-light";
                            });
                            printerControls.step100.addEventListener("click", function (e) {
                              printersToConnect.forEach(function (printer) {
                                var index = _.findIndex(printerInfo, function (o) {
                                  return o._id === printer;
                                });

                                if (index > -1) {
                                  _octofarm["default"].post("printers/stepChange", {
                                    printer: printerInfo[index]._id,
                                    newSteps: "100"
                                  });
                                }
                              });
                              printerControls.step100.className = "btn btn-dark active";
                              printerControls.step1.className = "btn btn-light";
                              printerControls.step10.className = "btn btn-light";
                              printerControls.step01.className = "btn btn-light";
                            });
                          }
                        });

                      case 6:
                      case "end":
                        return _context23.stop();
                    }
                  }
                }, _callee19);
              }));

              return function printersControl() {
                return _ref15.apply(this, arguments);
              };
            }();

            _printerSelect["default"].create(document.getElementById("multiPrintersSection"), false, "Control Printers", printersControl);

          case 2:
          case "end":
            return _context24.stop();
        }
      }
    }, _callee20);
  }));

  return function (_x14) {
    return _ref14.apply(this, arguments);
  };
}());
var bulkGcodeCommands = document.getElementById("bulkGcodeCommands");
bulkGcodeCommands.addEventListener("click", /*#__PURE__*/function () {
  var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(e) {
    var printersControl;
    return regeneratorRuntime.wrap(function _callee24$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            printersControl = /*#__PURE__*/function () {
              var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {
                var printersToConnect, selectedPrinters;
                return regeneratorRuntime.wrap(function _callee23$(_context27) {
                  while (1) {
                    switch (_context27.prev = _context27.next) {
                      case 0:
                        printersToConnect = []; //Grab all check boxes

                        selectedPrinters = _printerSelect["default"].getSelected();
                        selectedPrinters.forEach(function (element) {
                          var ca = element.id.split("-");
                          printersToConnect.push(ca[1]);
                        });
                        bootbox.prompt({
                          size: "large",
                          title: "What gcode commands would you like sent?",
                          inputType: "textarea",
                          onShow: function onShow(e) {
                            var textArea = document.getElementsByClassName("bootbox-input bootbox-input-textarea form-control");
                            var customGcodeEE = "<div class='mb-1' id='customGcodeCommandsArea'></div>";
                            textArea[0].insertAdjacentHTML("beforebegin", customGcodeEE);
                            var buttonPrinters = [];
                            printersToConnect.forEach( /*#__PURE__*/function () {
                              var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(printer) {
                                var index;
                                return regeneratorRuntime.wrap(function _callee21$(_context25) {
                                  while (1) {
                                    switch (_context25.prev = _context25.next) {
                                      case 0:
                                        index = _.findIndex(printerInfo, function (o) {
                                          return o._id === printer;
                                        });

                                        if (index > -1) {
                                          buttonPrinters.push(printerInfo[index]);
                                        }

                                      case 2:
                                      case "end":
                                        return _context25.stop();
                                    }
                                  }
                                }, _callee21);
                              }));

                              return function (_x17) {
                                return _ref19.apply(this, arguments);
                              };
                            }());

                            _customScripts["default"].generateButtons(buttonPrinters);
                          },
                          callback: function callback(result) {
                            if (result !== null) {
                              printersToConnect.forEach( /*#__PURE__*/function () {
                                var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(printer) {
                                  var index, lines, opt, post;
                                  return regeneratorRuntime.wrap(function _callee22$(_context26) {
                                    while (1) {
                                      switch (_context26.prev = _context26.next) {
                                        case 0:
                                          index = _.findIndex(printerInfo, function (o) {
                                            return o._id === printer;
                                          });

                                          if (!(index > -1)) {
                                            _context26.next = 9;
                                            break;
                                          }

                                          lines = result.match(/[^\r\n]+/g);
                                          lines = lines.map(function (name) {
                                            if (!name.includes("=")) {
                                              return name.toLocaleUpperCase();
                                            } else {
                                              return name;
                                            }
                                          });
                                          opt = {
                                            commands: lines
                                          };
                                          _context26.next = 7;
                                          return _octoprint["default"].post(printerInfo[index], "printer/command", opt);

                                        case 7:
                                          post = _context26.sent;

                                          if (post.status === 204) {
                                            _ui["default"].createAlert("success", "Your gcode commands have successfully been sent!", 3000, "Clicked");
                                          } else {
                                            _ui["default"].createAlert("danger", "Your gcode failed to send! Please check the printer is able to receive these commands.", 3000, "Clicked");
                                          }

                                        case 9:
                                        case "end":
                                          return _context26.stop();
                                      }
                                    }
                                  }, _callee22);
                                }));

                                return function (_x18) {
                                  return _ref20.apply(this, arguments);
                                };
                              }());
                            }
                          }
                        });

                      case 4:
                      case "end":
                        return _context27.stop();
                    }
                  }
                }, _callee23);
              }));

              return function printersControl() {
                return _ref18.apply(this, arguments);
              };
            }();

            _printerSelect["default"].create(document.getElementById("multiPrintersSection"), false, "Send Gcode to Printers", printersControl);

          case 2:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee24);
  }));

  return function (_x16) {
    return _ref17.apply(this, arguments);
  };
}());
var customGcodeScripts = document.getElementById("customGcodeBtn");
customGcodeScripts.addEventListener("click", /*#__PURE__*/function () {
  var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25(e) {
    var customScripts, scriptTable;
    return regeneratorRuntime.wrap(function _callee25$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            _context29.next = 2;
            return _octofarm["default"].get("settings/customGcode");

          case 2:
            customScripts = _context29.sent;
            _context29.next = 5;
            return customScripts.json();

          case 5:
            customScripts = _context29.sent;
            //Draw Scripts
            scriptTable = document.getElementById("gcodeScriptTable");
            scriptTable.innerHTML = "";
            customScripts.forEach(function (scripts) {
              drawScriptTable(scripts);
            });

          case 9:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee25);
  }));

  return function (_x19) {
    return _ref21.apply(this, arguments);
  };
}());
var createNewScriptBtn = document.getElementById("createNewScriptBtn");

function newGcodeScript(_x20) {
  return _newGcodeScript.apply(this, arguments);
}

function _newGcodeScript() {
  _newGcodeScript = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee52(newScript) {
    var keys, errors, _i, _keys, key, lines, post, _post3;

    return regeneratorRuntime.wrap(function _callee52$(_context60) {
      while (1) {
        switch (_context60.prev = _context60.next) {
          case 0:
            keys = Object.keys(newScript);
            errors = [];

            for (_i = 0, _keys = keys; _i < _keys.length; _i++) {
              key = _keys[_i];

              if (newScript["name"] === "") {
                errors.push(key);
              }

              if (newScript["gcode"] === "") {
                errors.push(key);
              }
            }

            if (!(errors.length !== 0)) {
              _context60.next = 8;
              break;
            }

            _ui["default"].createAlert("error", "You have blank fields sony jim!, sort them out...", 3000, "Clicked");

            return _context60.abrupt("return", false);

          case 8:
            lines = newScript.gcode.match(/[^\r\n]+/g);
            newScript.gcode = lines.map(function (name) {
              if (!name.includes("=")) {
                return name.toLocaleUpperCase();
              } else {
                return name;
              }
            });

            if (!newScript.id) {
              _context60.next = 23;
              break;
            }

            _context60.next = 13;
            return _octofarm["default"].post("settings/customGcode/edit", newScript);

          case 13:
            post = _context60.sent;

            if (!(post.status === 200)) {
              _context60.next = 20;
              break;
            }

            _context60.next = 17;
            return post.json();

          case 17:
            post = _context60.sent;
            _context60.next = 21;
            break;

          case 20:
            _ui["default"].createAlert("error", "Something went wrong updating, is the server online?");

          case 21:
            _context60.next = 34;
            break;

          case 23:
            _context60.next = 25;
            return _octofarm["default"].post("settings/customGcode", newScript);

          case 25:
            _post3 = _context60.sent;

            if (!(_post3.status === 200)) {
              _context60.next = 33;
              break;
            }

            _context60.next = 29;
            return _post3.json();

          case 29:
            _post3 = _context60.sent;
            drawScriptTable(_post3);
            _context60.next = 34;
            break;

          case 33:
            _ui["default"].createAlert("error", "Something went wrong updating, is the server online?");

          case 34:
            return _context60.abrupt("return", true);

          case 35:
          case "end":
            return _context60.stop();
        }
      }
    }, _callee52);
  }));
  return _newGcodeScript.apply(this, arguments);
}

createNewScriptBtn.addEventListener("click", /*#__PURE__*/function () {
  var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(e) {
    var newScript;
    return regeneratorRuntime.wrap(function _callee26$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            newScript = {
              name: document.getElementById("gcodeScriptName").value,
              description: document.getElementById("gcodeScriptDescription").value,
              gcode: document.getElementById("gcodeScriptScript").value
            };
            _context30.next = 3;
            return newGcodeScript(newScript);

          case 3:
            document.getElementById("gcodeScriptName").value = "";
            document.getElementById("gcodeScriptDescription").value = "";
            document.getElementById("gcodeScriptScript").value = "";

          case 6:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee26);
  }));

  return function (_x21) {
    return _ref22.apply(this, arguments);
  };
}());

function drawScriptTable(scripts) {
  var scriptTable = document.getElementById("gcodeScriptTable");
  var scriptLines = "";
  scripts.gcode.forEach(function (e) {
    scriptLines += "".concat(e, "\n");
  });
  scriptTable.insertAdjacentHTML("beforeend", "\n             <tr id=\"scriptRow-".concat(scripts._id, "\" >\n                <td id=\"script_id_").concat(scripts._id, "\" class=\"d-none\">").concat(scripts._id, "</td>\n                <td><input type=\"text\" class=\"form-control\" id=\"script_name_").concat(scripts._id, "\" placeholder=\"").concat(scripts.name, "\" disabled></input></td>\n                <td><input type=\"text\" class=\"form-control\" id=\"script_desc_").concat(scripts._id, "\"  placeholder=\"").concat(scripts.description, "\" disabled></input></td>\n                <td><textarea type=\"text\" class=\"form-control\" id=\"script_lines_").concat(scripts._id, "\"  placeholder=\"").concat(scriptLines, "\" disabled></textarea></td>\n                <td>                                \n                <button id=\"editScript-").concat(scripts._id, "\" type=\"button\" class=\"btn btn-sm btn-info edit bg-colour-1\">\n                    <i class=\"fas fa-edit editIcon\"></i>\n                </button>\n                <button id=\"saveScript-").concat(scripts._id, "\" type=\"button\" class=\"btn btn-sm btn-success save bg-colour-2 d-none\">\n                    <i class=\"fas fa-save saveIcon\"></i>\n                </button>\n                <button id=\"deleteScript-").concat(scripts._id, "\" type=\"button\" class=\"btn btn-sm btn-danger delete\">\n                    <i class=\"fas fa-trash deleteIcon\"></i>\n                </button>\n                </td>\n            </tr>\n      "));
  document.getElementById("deleteScript-" + scripts._id).addEventListener("click", /*#__PURE__*/function () {
    var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(e) {
      var delt;
      return regeneratorRuntime.wrap(function _callee27$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              _context31.next = 2;
              return _octofarm["default"].get("settings/customGcode/delete/" + scripts._id);

            case 2:
              delt = _context31.sent;

              if (delt.status === 200) {
                _ui["default"].createAlert("success", "Successfully deleted your script...", 3000, "Clicked");

                document.getElementById("scriptRow-" + scripts._id).remove();
              } else {
                _ui["default"].createAlert("error", "Something went wrong, is the OctoFarm server online?", 3000, "Clicked");
              }

            case 4:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee27);
    }));

    return function (_x22) {
      return _ref23.apply(this, arguments);
    };
  }());
  document.getElementById("editScript-" + scripts._id).addEventListener("click", /*#__PURE__*/function () {
    var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(e) {
      return regeneratorRuntime.wrap(function _callee28$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              document.getElementById("script_name_".concat(scripts._id)).disabled = false;
              document.getElementById("script_desc_".concat(scripts._id)).disabled = false;
              document.getElementById("script_lines_".concat(scripts._id)).disabled = false;
              document.getElementById("script_name_".concat(scripts._id)).value = document.getElementById("script_name_".concat(scripts._id)).placeholder;
              document.getElementById("script_desc_".concat(scripts._id)).value = document.getElementById("script_desc_".concat(scripts._id)).placeholder;
              document.getElementById("script_lines_".concat(scripts._id)).value = document.getElementById("script_lines_".concat(scripts._id)).placeholder;
              document.getElementById("editScript-".concat(scripts._id)).classList.toggle("d-none");
              document.getElementById("saveScript-".concat(scripts._id)).classList.toggle("d-none");

            case 8:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee28);
    }));

    return function (_x23) {
      return _ref24.apply(this, arguments);
    };
  }());
  document.getElementById("saveScript-" + scripts._id).addEventListener("click", /*#__PURE__*/function () {
    var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(e) {
      var newScript, save;
      return regeneratorRuntime.wrap(function _callee29$(_context33) {
        while (1) {
          switch (_context33.prev = _context33.next) {
            case 0:
              newScript = {
                id: document.getElementById("script_id_".concat(scripts._id)).innerHTML,
                name: document.getElementById("script_name_".concat(scripts._id)).value,
                description: document.getElementById("script_desc_".concat(scripts._id)).value,
                gcode: document.getElementById("script_lines_".concat(scripts._id)).value
              };
              console.log(newScript);
              _context33.next = 4;
              return newGcodeScript(newScript);

            case 4:
              save = _context33.sent;

              if (save) {
                document.getElementById("script_name_".concat(scripts._id)).placeholder = document.getElementById("script_name_".concat(scripts._id)).value;
                document.getElementById("script_desc_".concat(scripts._id)).placeholder = document.getElementById("script_desc_".concat(scripts._id)).value;
                document.getElementById("script_lines_".concat(scripts._id)).placeholder = document.getElementById("script_lines_".concat(scripts._id)).value;
                document.getElementById("script_name_".concat(scripts._id)).value = "";
                document.getElementById("script_desc_".concat(scripts._id)).value = "";
                document.getElementById("script_lines_".concat(scripts._id)).value = "";
                document.getElementById("script_name_".concat(scripts._id)).disabled = true;
                document.getElementById("script_desc_".concat(scripts._id)).disabled = true;
                document.getElementById("script_lines_".concat(scripts._id)).disabled = true;
                document.getElementById("editScript-".concat(scripts._id)).classList.toggle("d-none");
                document.getElementById("saveScript-".concat(scripts._id)).classList.toggle("d-none");
              }

            case 6:
            case "end":
              return _context33.stop();
          }
        }
      }, _callee29);
    }));

    return function (_x24) {
      return _ref25.apply(this, arguments);
    };
  }());
}

function pluginListTemplate(plugin) {
  //Also need check inplace for incompatible...
  var abandoned = "";

  if (plugin.abandoned === true) {
    abandoned = "<i class=\"fa fa-heartbeat\" title=\"Abandoned by its maintainer\"></i>";
  }

  var latestRelease = "";

  if (typeof plugin.github !== "undefined" && typeof plugin.github.latest_release !== "undefined") {
    latestRelease = "\n    <small class=\"prop\" title=\"Github stars\"><i class=\"fa fa-star\"></i> <span >".concat(plugin.github.stars, "</span></small>\n    <small class=\"prop\" title=\"Last push to main branch\"><i class=\"fa fa-refresh\"></i> <span>").concat(plugin.github.stars, "</span></small>\n    <small class=\"prop\" title=\"Latest release &amp; date\"><i class=\"fa fa-tag\"></i> <span >").concat(plugin.github.latest_release.tag, "</span> (<span >").concat(plugin.github.latest_release.date, "</span>)</small>");
  }

  return "\n      <div class=\"entry\" id=\"plugin-".concat(plugin.title.replace(/ /g, "_"), "\">\n                        <div class=\"row-fluid\">\n                            <div class=\"span12\">\n                                <div>\n                                    <span>").concat(plugin.title, "</span>\n\n                                    ").concat(abandoned, "\n                           \n                                </div>\n                                <div class=\"meta\">\n                                    <small class=\"prop\"><i class=\"fa fa-info\"></i>&nbsp;<a target=\"_blank\" href=\"").concat(plugin.page, "\" title=\"").concat(plugin.page, "\">Details</a></small>\n                                    <small class=\"prop\"><i class=\"fa fa-home\"></i>&nbsp;<a target=\"_blank\" href=\"").concat(plugin.homepage, "\" title=\"").concat(plugin.homepage, "\">Homepage</a></small>\n                                    <small class=\"prop\"><i class=\"fa fa-user\"></i> <span title=\"").concat(plugin.author, "\">").concat(plugin.author, "</span></small>\n                                </div>\n                                <div class=\"muted\"><small>").concat(plugin.description, "</small></div>\n                                <div class=\"stats\">\n                                    <small class=\"prop\" title=\"License\"><i class=\"fa fa-gavel\"></i> <span>").concat(plugin.license, "</span></small>\n                                    <small class=\"prop\" title=\"Publication date\"><i class=\"fa fa-birthday-cake\"></i> <span>").concat(JSON.stringify(plugin.published).substring(1, 11), "</span></small>\n                                    <small class=\"prop\" title=\"Active instances past month\"><i class=\"fa fa-server\"></i> <span >").concat(JSON.stringify(plugin.stats.instances_month).substring(0, 11), "</span></small>\n                                    ").concat(latestRelease, "\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n  \n  \n  ");
}

var pluginAction = /*#__PURE__*/function () {
  var _ref26 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34(action) {
    var printersToConnect, selectedPrinters, index, pluginList, printerPluginList;
    return regeneratorRuntime.wrap(function _callee34$(_context42) {
      while (1) {
        switch (_context42.prev = _context42.next) {
          case 0:
            printersToConnect = []; //Grab all check boxes

            selectedPrinters = _printerSelect["default"].getSelected();
            selectedPrinters.forEach(function (element) {
              var ca = element.id.split("-");
              printersToConnect.push(ca[1]);
            }); //Grab first printer for now...

            index = _.findIndex(printerInfo, function (o) {
              return o._id === printersToConnect[0];
            });

            if (!(index > -1)) {
              _context42.next = 24;
              break;
            }

            pluginList = [];
            printerPluginList = null;

            if (!(action === "install")) {
              _context42.next = 13;
              break;
            }

            _context42.next = 10;
            return _octofarm["default"].get("printers/pluginList/" + printerInfo[index]._id);

          case 10:
            printerPluginList = _context42.sent;
            _context42.next = 16;
            break;

          case 13:
            _context42.next = 15;
            return _octofarm["default"].get("printers/pluginList/all");

          case 15:
            printerPluginList = _context42.sent;

          case 16:
            _context42.next = 18;
            return printerPluginList.json();

          case 18:
            printerPluginList = _context42.sent;
            printerPluginList.forEach(function (plugin) {
              if (action === "install") {
                pluginList.push({
                  text: pluginListTemplate(plugin),
                  value: plugin.archive
                });
              } else {
                pluginList.push({
                  text: pluginListTemplate(plugin),
                  value: plugin.id
                });
              }
            });
            pluginList = _.sortBy(pluginList, [function (o) {
              return o.text;
            }]); //Install Promt

            if (action === "install") {
              bootbox.prompt({
                size: "large",
                title: "<form class=\"form-inline float-right\">\n                  <div class=\"form-group\">\n                    <label for=\"searchPlugins\">\n                      Please choose the plugin you'd like to install... or: &nbsp;\n                    </label>\n                    <input width=\"50%\" id=\"searchPlugins\" type=\"text\" placeholder=\"Type your plugin name here...\" class=\"search-control search-control-underlined\">\n                  </div>\n                </form>",
                inputType: "checkbox",
                multiple: true,
                inputOptions: pluginList,
                scrollable: true,
                onShow: function onShow(e) {
                  var pluginSearch = document.getElementById("searchPlugins");
                  pluginSearch.addEventListener("keyup", function (e) {
                    var fileList = document.getElementsByClassName("bootbox-checkbox-list");
                    var input = document.getElementById("searchPlugins").value.toUpperCase();
                    input = input.replace(/ /g, "_");
                    var button = fileList[0].querySelectorAll("*[id^=\"plugin-\"]");

                    for (var i = 0; i < button.length; i++) {
                      var file = button[i].id.replace("plugin-", "");

                      if (file.toUpperCase().indexOf(input) > -1) {
                        button[i].parentNode.parentNode.style.display = "";
                      } else {
                        button[i].parentNode.parentNode.style.display = "none";
                      }
                    }
                  });
                },
                callback: function () {
                  var _callback5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31(result) {
                    var tracker, trackerBtn, pluginAmount, _loop5, p, restartInstance;

                    return regeneratorRuntime.wrap(function _callee31$(_context37) {
                      while (1) {
                        switch (_context37.prev = _context37.next) {
                          case 0:
                            if (!result) {
                              _context37.next = 17;
                              break;
                            }

                            tracker = document.getElementById("pluginTracking");
                            trackerBtn = document.getElementById("pluginTracking");
                            trackerBtn.classList.remove("d-none");
                            pluginAmount = result.length * printersToConnect.length;
                            tracker.innerHTML = "\n               Installing Plugins!<br>\n               <i class=\"fas fa-print\"></i>".concat(printersToConnect.length, " / <i class=\"fas fa-plug\"></i> ").concat(pluginAmount, "\n        ");
                            _loop5 = /*#__PURE__*/regeneratorRuntime.mark(function _loop5(p) {
                              var index, r, alert, postData, post, response;
                              return regeneratorRuntime.wrap(function _loop5$(_context36) {
                                while (1) {
                                  switch (_context36.prev = _context36.next) {
                                    case 0:
                                      //grab index
                                      index = _.findIndex(printerInfo, function (o) {
                                        return o._id === printersToConnect[p];
                                      });

                                      if (!(printerInfo[index].printerState.colour.category !== "Active")) {
                                        _context36.next = 30;
                                        break;
                                      }

                                      r = 0;

                                    case 3:
                                      if (!(r < result.length)) {
                                        _context36.next = 28;
                                        break;
                                      }

                                      alert = _ui["default"].createAlert("warning", "".concat(printerInfo[index].printerName, ": Installing - ").concat(result[r], "<br>Do not navigate away from this screen!"));
                                      postData = {
                                        command: action,
                                        dependency_links: false,
                                        url: result[r]
                                      };
                                      _context36.next = 8;
                                      return _octoprint["default"].post(printerInfo[index], "plugin/pluginmanager", postData);

                                    case 8:
                                      post = _context36.sent;
                                      tracker.innerHTML = "\n                Installing Plugins!<br>\n                <i class=\"fas fa-print\"></i>".concat(printersToConnect.length - p, " / <i class=\"fas fa-plug\"></i> ").concat(pluginAmount, "\n              ");
                                      pluginAmount = pluginAmount - 1;
                                      alert.close();

                                      if (!(post.status == 409)) {
                                        _context36.next = 16;
                                        break;
                                      }

                                      _ui["default"].createAlert("error", "Plugin not installed... Printer could be active...", 4000, "Clicked");

                                      _context36.next = 25;
                                      break;

                                    case 16:
                                      if (!(post.status == 400)) {
                                        _context36.next = 20;
                                        break;
                                      }

                                      _ui["default"].createAlert("error", "Malformed request... please log an issue...", 4000, "Clicked");

                                      _context36.next = 25;
                                      break;

                                    case 20:
                                      if (!(post.status === 200)) {
                                        _context36.next = 25;
                                        break;
                                      }

                                      _context36.next = 23;
                                      return post.json();

                                    case 23:
                                      response = _context36.sent;

                                      if (response.needs_restart || response.needs_refresh) {
                                        _ui["default"].createAlert("success", "".concat(printerInfo[index].printerName, ": ").concat(result[r], " - Has successfully been installed... OctoPrint restart is required!"), 4000, "Clicked");
                                      } else {
                                        _ui["default"].createAlert("success", "".concat(printerInfo[index].printerName, ": ").concat(result[r], " - Has successfully been installed... No further action requested..."), 4000, "Clicked");
                                      }

                                    case 25:
                                      r++;
                                      _context36.next = 3;
                                      break;

                                    case 28:
                                      _context36.next = 31;
                                      break;

                                    case 30:
                                      _ui["default"].createAlert("danger", "".concat(printerInfo[index].printerName, ": Is active skipping the plugin installation command..."));

                                    case 31:
                                    case "end":
                                      return _context36.stop();
                                  }
                                }
                              }, _loop5);
                            });
                            p = 0;

                          case 8:
                            if (!(p < printersToConnect.length)) {
                              _context37.next = 13;
                              break;
                            }

                            return _context37.delegateYield(_loop5(p), "t0", 10);

                          case 10:
                            p++;
                            _context37.next = 8;
                            break;

                          case 13:
                            restartInstance = document.getElementById("restartInstances");
                            restartInstance.classList.remove("d-none");
                            restartInstance.addEventListener("click", /*#__PURE__*/function () {
                              var _ref27 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30(e) {
                                var _loop6, _p;

                                return regeneratorRuntime.wrap(function _callee30$(_context35) {
                                  while (1) {
                                    switch (_context35.prev = _context35.next) {
                                      case 0:
                                        restartInstance.classList.add("d-none");
                                        _loop6 = /*#__PURE__*/regeneratorRuntime.mark(function _loop6(_p) {
                                          var index, post;
                                          return regeneratorRuntime.wrap(function _loop6$(_context34) {
                                            while (1) {
                                              switch (_context34.prev = _context34.next) {
                                                case 0:
                                                  index = _.findIndex(printerInfo, function (o) {
                                                    return o._id === printersToConnect[_p];
                                                  });

                                                  if (!(index > -1)) {
                                                    _context34.next = 12;
                                                    break;
                                                  }

                                                  if (!(printerInfo[index].printerState.colour.category !== "Active")) {
                                                    _context34.next = 9;
                                                    break;
                                                  }

                                                  _context34.next = 5;
                                                  return _octoprint["default"].systemNoConfirm(printerInfo[index], "restart");

                                                case 5:
                                                  post = _context34.sent;

                                                  if (typeof post !== "undefined") {
                                                    if (post.status === 204) {
                                                      _ui["default"].createAlert("success", "Successfully made restart attempt to ".concat(printerInfo[index].printerName, "..."), 3000, "Clicked");
                                                    } else {
                                                      _ui["default"].createAlert("error", "There was an issue sending restart to ".concat(printerInfo[index].printerName, " are you sure it's online?"), 3000, "Clicked");
                                                    }
                                                  } else {
                                                    _ui["default"].createAlert("error", "No response from ".concat(printerInfo[index].printerName, ", is it online???"), 3000, "Clicked");
                                                  }

                                                  _context34.next = 10;
                                                  break;

                                                case 9:
                                                  _ui["default"].createAlert("warning", "Printer ".concat(printerInfo[index].printerName, " is not in \"Idle\" state... skipping"), 3000, "Clicked");

                                                case 10:
                                                  _context34.next = 13;
                                                  break;

                                                case 12:
                                                  _ui["default"].createAlert("error", "Could not find your printer in your printer in the list of available printers...", 3000, "Clicked");

                                                case 13:
                                                case "end":
                                                  return _context34.stop();
                                              }
                                            }
                                          }, _loop6);
                                        });
                                        _p = 0;

                                      case 3:
                                        if (!(_p < printersToConnect.length)) {
                                          _context35.next = 8;
                                          break;
                                        }

                                        return _context35.delegateYield(_loop6(_p), "t0", 5);

                                      case 5:
                                        _p++;
                                        _context35.next = 3;
                                        break;

                                      case 8:
                                      case "end":
                                        return _context35.stop();
                                    }
                                  }
                                }, _callee30);
                              }));

                              return function (_x27) {
                                return _ref27.apply(this, arguments);
                              };
                            }());
                            trackerBtn.classList.add("d-none");

                          case 17:
                          case "end":
                            return _context37.stop();
                        }
                      }
                    }, _callee31);
                  }));

                  function callback(_x26) {
                    return _callback5.apply(this, arguments);
                  }

                  return callback;
                }()
              });
            } else {
              bootbox.prompt({
                size: "large",
                title: "<form class=\"form-inline float-right\">\n                  <div class=\"form-group\">\n                    <label for=\"searchPlugins\">\n                      Please choose the plugin you'd like to ".concat(action, "... or: &nbsp;\n                    </label>\n                    <input width=\"50%\" id=\"searchPlugins\" type=\"text\" placeholder=\"Type your plugin name here...\" class=\"search-control search-control-underlined\">\n                  </div>\n                </form>"),
                inputType: "checkbox",
                multiple: true,
                inputOptions: pluginList,
                scrollable: true,
                onShow: function onShow(e) {
                  var pluginSearch = document.getElementById("searchPlugins");
                  pluginSearch.addEventListener("keyup", function (e) {
                    var fileList = document.getElementsByClassName("bootbox-checkbox-list");
                    var input = document.getElementById("searchPlugins").value.toUpperCase();
                    input = input.replace(/ /g, "_");
                    var button = fileList[0].querySelectorAll("*[id^=\"plugin-\"]");

                    for (var i = 0; i < button.length; i++) {
                      var file = button[i].id.replace("plugin-", "");

                      if (file.toUpperCase().indexOf(input) > -1) {
                        button[i].parentNode.parentNode.style.display = "";
                      } else {
                        button[i].parentNode.parentNode.style.display = "none";
                      }
                    }
                  });
                },
                callback: function () {
                  var _callback6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33(result) {
                    var tracker, trackerBtn, pluginAmount, cleanAction, _loop7, p, restartInstance;

                    return regeneratorRuntime.wrap(function _callee33$(_context41) {
                      while (1) {
                        switch (_context41.prev = _context41.next) {
                          case 0:
                            if (!result) {
                              _context41.next = 18;
                              break;
                            }

                            tracker = document.getElementById("pluginTracking");
                            trackerBtn = document.getElementById("pluginTracking");
                            trackerBtn.classList.remove("d-none");
                            pluginAmount = result.length * printersToConnect.length;
                            cleanAction = action.charAt(0).toUpperCase() + action.slice(1);
                            tracker.innerHTML = "\n                   ".concat(cleanAction, " Plugins!<br>\n                   <i class=\"fas fa-print\"></i>").concat(printersToConnect.length, " / <i class=\"fas fa-plug\"></i> ").concat(pluginAmount, "\n            ");
                            _loop7 = /*#__PURE__*/regeneratorRuntime.mark(function _loop7(p) {
                              var index, r, alert, postData, post, response;
                              return regeneratorRuntime.wrap(function _loop7$(_context40) {
                                while (1) {
                                  switch (_context40.prev = _context40.next) {
                                    case 0:
                                      //grab index
                                      index = _.findIndex(printerInfo, function (o) {
                                        return o._id === printersToConnect[p];
                                      });

                                      if (!(printerInfo[index].printerState.colour.category !== "Active")) {
                                        _context40.next = 30;
                                        break;
                                      }

                                      r = 0;

                                    case 3:
                                      if (!(r < result.length)) {
                                        _context40.next = 28;
                                        break;
                                      }

                                      alert = _ui["default"].createAlert("warning", "".concat(printerInfo[index].printerName, ": ").concat(cleanAction, " - ").concat(result[r], "<br>Do not navigate away from this screen!"));
                                      postData = {
                                        command: action,
                                        plugin: result[r]
                                      };
                                      _context40.next = 8;
                                      return _octoprint["default"].post(printerInfo[index], "plugin/pluginmanager", postData);

                                    case 8:
                                      post = _context40.sent;
                                      tracker.innerHTML = "\n                    Installing Plugins!<br>\n                    <i class=\"fas fa-print\"></i>".concat(printersToConnect.length - p, " / <i class=\"fas fa-plug\"></i> ").concat(pluginAmount, "\n                  ");
                                      pluginAmount = pluginAmount - 1;
                                      alert.close();

                                      if (!(post.status == 409)) {
                                        _context40.next = 16;
                                        break;
                                      }

                                      _ui["default"].createAlert("error", "Plugin not installed... Printer could be active...", 4000, "Clicked");

                                      _context40.next = 25;
                                      break;

                                    case 16:
                                      if (!(post.status == 400)) {
                                        _context40.next = 20;
                                        break;
                                      }

                                      _ui["default"].createAlert("error", "Malformed request... please log an issue...", 4000, "Clicked");

                                      _context40.next = 25;
                                      break;

                                    case 20:
                                      if (!(post.status === 200)) {
                                        _context40.next = 25;
                                        break;
                                      }

                                      _context40.next = 23;
                                      return post.json();

                                    case 23:
                                      response = _context40.sent;

                                      if (response.needs_restart || response.needs_refresh) {
                                        _ui["default"].createAlert("success", "".concat(printerInfo[index].printerName, ": ").concat(response.plugin.name, " - Has successfully been ").concat(cleanAction, "... OctoPrint restart is required!"), 4000, "Clicked");
                                      } else {
                                        _ui["default"].createAlert("success", "".concat(printerInfo[index].printerName, ": ").concat(response.plugin.name, " - Has successfully been ").concat(cleanAction, "... No further action requested..."), 4000, "Clicked");
                                      }

                                    case 25:
                                      r++;
                                      _context40.next = 3;
                                      break;

                                    case 28:
                                      _context40.next = 31;
                                      break;

                                    case 30:
                                      _ui["default"].createAlert("danger", "".concat(printerInfo[index].printerName, ": Is active skipping the plugin  ").concat(cleanAction, " command..."));

                                    case 31:
                                    case "end":
                                      return _context40.stop();
                                  }
                                }
                              }, _loop7);
                            });
                            p = 0;

                          case 9:
                            if (!(p < printersToConnect.length)) {
                              _context41.next = 14;
                              break;
                            }

                            return _context41.delegateYield(_loop7(p), "t0", 11);

                          case 11:
                            p++;
                            _context41.next = 9;
                            break;

                          case 14:
                            restartInstance = document.getElementById("restartInstances");
                            restartInstance.classList.remove("d-none");
                            restartInstance.addEventListener("click", /*#__PURE__*/function () {
                              var _ref28 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32(e) {
                                var _loop8, _p2;

                                return regeneratorRuntime.wrap(function _callee32$(_context39) {
                                  while (1) {
                                    switch (_context39.prev = _context39.next) {
                                      case 0:
                                        restartInstance.classList.add("d-none");
                                        _loop8 = /*#__PURE__*/regeneratorRuntime.mark(function _loop8(_p2) {
                                          var index, post;
                                          return regeneratorRuntime.wrap(function _loop8$(_context38) {
                                            while (1) {
                                              switch (_context38.prev = _context38.next) {
                                                case 0:
                                                  index = _.findIndex(printerInfo, function (o) {
                                                    return o._id === printersToConnect[_p2];
                                                  });

                                                  if (!(index > -1)) {
                                                    _context38.next = 12;
                                                    break;
                                                  }

                                                  if (!(printerInfo[index].printerState.colour.category !== "Active")) {
                                                    _context38.next = 9;
                                                    break;
                                                  }

                                                  _context38.next = 5;
                                                  return _octoprint["default"].systemNoConfirm(printerInfo[index], "restart");

                                                case 5:
                                                  post = _context38.sent;

                                                  if (typeof post !== "undefined") {
                                                    if (post.status === 204) {
                                                      _ui["default"].createAlert("success", "Successfully made restart attempt to ".concat(printerInfo[index].printerName, "..."), 3000, "Clicked");
                                                    } else {
                                                      _ui["default"].createAlert("error", "There was an issue sending restart to ".concat(printerInfo[index].printerName, " are you sure it's online?"), 3000, "Clicked");
                                                    }
                                                  } else {
                                                    _ui["default"].createAlert("error", "No response from ".concat(printerInfo[index].printerName, ", is it online???"), 3000, "Clicked");
                                                  }

                                                  _context38.next = 10;
                                                  break;

                                                case 9:
                                                  _ui["default"].createAlert("warning", "Printer ".concat(printerInfo[index].printerName, " is not in \"Idle\" state... skipping"), 3000, "Clicked");

                                                case 10:
                                                  _context38.next = 13;
                                                  break;

                                                case 12:
                                                  _ui["default"].createAlert("error", "Could not find your printer in your printer in the list of available printers...", 3000, "Clicked");

                                                case 13:
                                                case "end":
                                                  return _context38.stop();
                                              }
                                            }
                                          }, _loop8);
                                        });
                                        _p2 = 0;

                                      case 3:
                                        if (!(_p2 < printersToConnect.length)) {
                                          _context39.next = 8;
                                          break;
                                        }

                                        return _context39.delegateYield(_loop8(_p2), "t0", 5);

                                      case 5:
                                        _p2++;
                                        _context39.next = 3;
                                        break;

                                      case 8:
                                      case "end":
                                        return _context39.stop();
                                    }
                                  }
                                }, _callee32);
                              }));

                              return function (_x29) {
                                return _ref28.apply(this, arguments);
                              };
                            }());
                            trackerBtn.classList.add("d-none");

                          case 18:
                          case "end":
                            return _context41.stop();
                        }
                      }
                    }, _callee33);
                  }));

                  function callback(_x28) {
                    return _callback6.apply(this, arguments);
                  }

                  return callback;
                }()
              });
            }

            _context42.next = 24;
            break;

          case 24:
          case "end":
            return _context42.stop();
        }
      }
    }, _callee34);
  }));

  return function pluginAction(_x25) {
    return _ref26.apply(this, arguments);
  };
}();

var blkPluginsBtn = document.getElementById("blkPluginsInstallBtn");
blkPluginsBtn.addEventListener("click", /*#__PURE__*/function () {
  var _ref29 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35(e) {
    return regeneratorRuntime.wrap(function _callee35$(_context43) {
      while (1) {
        switch (_context43.prev = _context43.next) {
          case 0:
            _printerSelect["default"].create(document.getElementById("multiPrintersSection"), false, "Install Plugins", function () {
              pluginAction("install");
            });

          case 1:
          case "end":
            return _context43.stop();
        }
      }
    }, _callee35);
  }));

  return function (_x30) {
    return _ref29.apply(this, arguments);
  };
}());
var blkPluginsUninstallBtn = document.getElementById("blkPluginsUnInstallBtn");
blkPluginsUninstallBtn.addEventListener("click", /*#__PURE__*/function () {
  var _ref30 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36(e) {
    return regeneratorRuntime.wrap(function _callee36$(_context44) {
      while (1) {
        switch (_context44.prev = _context44.next) {
          case 0:
            _printerSelect["default"].create(document.getElementById("multiPrintersSection"), false, "Uninstall Plugins", function () {
              pluginAction("uninstall");
            });

          case 1:
          case "end":
            return _context44.stop();
        }
      }
    }, _callee36);
  }));

  return function (_x31) {
    return _ref30.apply(this, arguments);
  };
}());
var blkPluginsEnableBtn = document.getElementById("blkPluginsEnableBtn");
blkPluginsEnableBtn.addEventListener("click", /*#__PURE__*/function () {
  var _ref31 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee37(e) {
    return regeneratorRuntime.wrap(function _callee37$(_context45) {
      while (1) {
        switch (_context45.prev = _context45.next) {
          case 0:
            _printerSelect["default"].create(document.getElementById("multiPrintersSection"), false, "Enable Plugins", function () {
              pluginAction("enable");
            });

          case 1:
          case "end":
            return _context45.stop();
        }
      }
    }, _callee37);
  }));

  return function (_x32) {
    return _ref31.apply(this, arguments);
  };
}());
var blkPluginsDisableBtn = document.getElementById("blkPluginsDisableBtn");
blkPluginsDisableBtn.addEventListener("click", /*#__PURE__*/function () {
  var _ref32 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee38(e) {
    return regeneratorRuntime.wrap(function _callee38$(_context46) {
      while (1) {
        switch (_context46.prev = _context46.next) {
          case 0:
            _printerSelect["default"].create(document.getElementById("multiPrintersSection"), false, "Disable Plugins", function () {
              pluginAction("disable");
            });

          case 1:
          case "end":
            return _context46.stop();
        }
      }
    }, _callee38);
  }));

  return function (_x33) {
    return _ref32.apply(this, arguments);
  };
}());
var searchOffline = document.getElementById("searchOfflineBtn");
searchOffline.addEventListener("click", /*#__PURE__*/function () {
  var _ref33 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee39(e) {
    var alert, post;
    return regeneratorRuntime.wrap(function _callee39$(_context47) {
      while (1) {
        switch (_context47.prev = _context47.next) {
          case 0:
            alert = _ui["default"].createAlert("success", "Started a background re-sync of all printers connected to OctoFarm. You may navigate away from this screen.");
            searchOffline.innerHTML = "<i class=\"fas fa-redo fa-sm fa-spin\"></i> Syncing...";
            _context47.next = 4;
            return _octofarm["default"].post("printers/reScanOcto", {
              id: null
            });

          case 4:
            post = _context47.sent;
            alert.close();
            searchOffline.innerHTML = "<i class=\"fas fa-redo fa-sm\"></i> Re-Sync";

          case 7:
          case "end":
            return _context47.stop();
        }
      }
    }, _callee39);
  }));

  return function (_x34) {
    return _ref33.apply(this, arguments);
  };
}());
var editBtn = document.getElementById("editPrinterBtn");
editBtn.addEventListener("click", function (event) {
  var confirmEditFunction = /*#__PURE__*/function () {
    var _ref34 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee40() {
      var editedPrinters, inputBoxes, i, printerID, printerURL, printerCamURL, printerAPIKEY, printerGroup, printerName, printer, post, printersAdded;
      return regeneratorRuntime.wrap(function _callee40$(_context48) {
        while (1) {
          switch (_context48.prev = _context48.next) {
            case 0:
              editedPrinters = [];
              inputBoxes = document.querySelectorAll("*[id^=editPrinterCard-]");

              for (i = 0; i < inputBoxes.length; i++) {
                if (inputBoxes[i]) {
                  printerID = inputBoxes[i].id;
                  printerID = printerID.split("-");
                  printerID = printerID[1];
                  printerURL = document.getElementById("editInputURL-".concat(printerID));
                  printerCamURL = document.getElementById("editInputCamera-".concat(printerID));
                  printerAPIKEY = document.getElementById("editInputApikey-".concat(printerID));
                  printerGroup = document.getElementById("editInputGroup-".concat(printerID));
                  printerName = document.getElementById("editInputName-".concat(printerID)); //Check if value updated, if not fill in the old value from placeholder

                  if (printerURL.value.length !== 0 || printerCamURL.value.length !== 0 || printerAPIKEY.value.length !== 0 || printerGroup.value.length !== 0 || printerName.value.length !== 0) {
                    if (printerURL.value.length === 0) {
                      printerURL.value = printerURL.placeholder;
                    }

                    if (printerCamURL.value.length === 0) {
                      printerCamURL.value = printerCamURL.placeholder;
                    }

                    if (printerAPIKEY.value.length === 0) {
                      printerAPIKEY.value = printerAPIKEY.placeholder;
                    }

                    if (printerGroup.value.length === 0) {
                      printerGroup.value = printerGroup.placeholder;
                    }

                    if (printerName.value.length === 0) {
                      printerName.value = printerName.placeholder;
                    }

                    printer = new PrintersManagement(_validate["default"].stripHTML(printerURL.value), _validate["default"].stripHTML(printerCamURL.value), _validate["default"].stripHTML(printerAPIKEY.value), _validate["default"].stripHTML(printerGroup.value), _validate["default"].stripHTML(printerName.value)).build();
                    printer._id = printerID;
                    editedPrinters.push(printer);
                  }
                }
              }

              if (!(editedPrinters.length > 0)) {
                _context48.next = 17;
                break;
              }

              _context48.next = 6;
              return _octofarm["default"].post("printers/update", editedPrinters);

            case 6:
              post = _context48.sent;

              if (!(post.status === 200)) {
                _context48.next = 15;
                break;
              }

              _context48.next = 10;
              return post.json();

            case 10:
              printersAdded = _context48.sent;
              printersAdded = printersAdded.printersAdded;
              printersAdded.forEach(function (printer) {
                _ui["default"].createAlert("success", "Printer: ".concat(printer.printerURL, " information has been updated on the farm..."), 1000, "Clicked");
              });
              _context48.next = 17;
              break;

            case 15:
              _ui["default"].createAlert("error", "Something went wrong updating the Server...", 3000, "Clicked");

              saveEdits.innerHTML = "<i class=\"fas fa-save\"></i> Save Edits";

            case 17:
            case "end":
              return _context48.stop();
          }
        }
      }, _callee40);
    }));

    return function confirmEditFunction() {
      return _ref34.apply(this, arguments);
    };
  }();

  _printerSelect["default"].create(document.getElementById("multiPrintersSection"), true, "Edit Printers", confirmEditFunction);
});
document.getElementById("deletePrintersBtn").addEventListener("click", function (event) {
  var printerDelete = function printerDelete() {
    //Grab all check boxes
    var selectedPrinters = _printerSelect["default"].getSelected();

    selectedPrinters.forEach(function (element) {
      var ca = element.id.split("-");
      deletedPrinters.push(ca[1]);
    });
    PrintersManagement.deletePrinter();
  };

  _printerSelect["default"].create(document.getElementById("multiPrintersSection"), false, "Printer Deletion", printerDelete);
});
document.getElementById("exportPrinterBtn").addEventListener("click", /*#__PURE__*/function () {
  var _ref35 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee41(event) {
    var printers, printersExport, r, printer;
    return regeneratorRuntime.wrap(function _callee41$(_context49) {
      while (1) {
        switch (_context49.prev = _context49.next) {
          case 0:
            _context49.next = 2;
            return _octofarm["default"].post("printers/printerInfo", {});

          case 2:
            printers = _context49.sent;
            _context49.next = 5;
            return printers.json();

          case 5:
            printers = _context49.sent;
            printersExport = [];

            for (r = 0; r < printers.length; r++) {
              printer = {
                name: printers[r].printerName,
                group: printers[r].group,
                printerURL: printers[r].printerURL,
                cameraURL: printers[r].cameraURL,
                apikey: printers[r].apikey
              };
              printersExport.push(printer);
            }

            _file["default"].download("printers.json", JSON.stringify(printersExport));

          case 9:
          case "end":
            return _context49.stop();
        }
      }
    }, _callee41);
  }));

  return function (_x35) {
    return _ref35.apply(this, arguments);
  };
}());
document.getElementById("importPrinterBtn").addEventListener("change", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee42() {
  var Afile, files, reader;
  return regeneratorRuntime.wrap(function _callee42$(_context50) {
    while (1) {
      switch (_context50.prev = _context50.next) {
        case 0:
          Afile = this.files;

          if (!Afile[0].name.includes(".json")) {
            _context50.next = 10;
            break;
          }

          files = Afile[0];
          reader = new FileReader();
          _context50.next = 6;
          return PrintersManagement.importPrinters(files);

        case 6:
          reader.onload = _context50.sent;
          reader.readAsText(files);
          _context50.next = 11;
          break;

        case 10:
          // File not json
          _ui["default"].createAlert("error", "File type not .json!", 3000);

        case 11:
        case "end":
          return _context50.stop();
      }
    }
  }, _callee42, this);
})));
document.getElementById("addPrinterBtn").addEventListener("click", function (event) {
  var currentPrinterCount = document.getElementById("printerTable").rows.length;
  var newPrinterCount = document.getElementById("printerNewTable").rows.length;

  if (currentPrinterCount === 1 && newPrinterCount === 1) {
    bootbox.alert({
      message: "\n            <div class=\"row\">\n              <div class=\"col-lg-12\">\n                <h4><u>OctoPrint / OctoFarm Setup Instructions</u></h4><br>\n                <p>Octoprint will require some setting's changes applying and an OctoPrint service restart actioning before a connection can be established. </p><p>Click the buttons below to display instructions if required. Otherwise close and continue. </p>\n              </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                  <button class=\"btn btn-primary\" type=\"button\" data-toggle=\"collapse\" data-target=\"#octoprintCollapse\" aria-expanded=\"false\" aria-controls=\"octoprintCollapse\">\n                    OctoPrint Setup\n                  </button>\n                </div>\n                <div class=\"col-md-6\">\n                    <button class=\"btn btn-primary\" type=\"button\" data-toggle=\"collapse\" data-target=\"#octofarmCollapse\" aria-expanded=\"false\" aria-controls=\"octofarmCollapse\">\n                      OctoFarm Instructions\n                    </button>\n                </div>\n            </div>\n              <div class=\"collapse\" id=\"octofarmCollapse\">\n                <div class=\"card card-body\">\n                  <div class=\"row pb-1\">\n                     <div class=\"col\">\n                          <label for=\"psPrinterURL\">Name:</label>\n                          <input id=\"psPrinterURL\" type=\"text\" class=\"form-control\" placeholder=\"Printer URL\" disabled>\n                          <small class=\"form-text text-muted\">Custom name for your OctoPrint instance, leave this blank to grab from OctoPrint -> Settings -> Appearance Name.</small>\n                          <small class=\"form-text text-muted\">If this is blank and no name is found then it will default to the Printer URL.</small>\n                          <small>Example: <code>My Awesome Printer Name</code></small>\n                      </div>\n                      <div class=\"col\">\n                          <label for=\"psPrinterURL\">Printer URL:</label>\n                          <input id=\"psPrinterURL\" type=\"text\" class=\"form-control\" placeholder=\"Printer URL\" disabled>\n                          <small class=\"form-text text-muted\">URL of OctoPrint Host inc. port. Defaults to \"http://\" if not specified.</small>\n                          <small>Example: <code>http://192.168.1.5:81</code></small>\n                      </div>\n                      <div class=\"col\">\n                          <label for=\"psCamURL\">Camera URL:</label>\n                          <input id=\"psCamURL\" type=\"text\" class=\"form-control\" placeholder=\"Camera URL\" disabled>\n                          <small class=\"form-text text-muted\">URL of mjpeg camera stream. Defaults to \"http://\" if not specified.</small>\n                          <small class=\"form-text text-muted\">You may also leave this blank to be automatically detected from OctoPrint.</small>\n                          <small>Example: <code>http://192.168.1.5/webcam/?action=stream</code></small>\n                      </div>\n                  </div>\n                  <div class=\"row pb-2\">\n                      <div class=\"col\">\n                          <label for=\"psPrinterURL\">Group:</label>\n                          <input id=\"psPrinterURL\" type=\"text\" class=\"form-control\" placeholder=\"Printer URL\" disabled>\n                          <small class=\"form-text text-muted\">OctoFarm allows for groups </small>\n                          <small>Example: <code>http://192.168.1.5:81</code></small>\n                      </div>\n                      <div class=\"col\">\n                          <label for=\"psAPIKEY\">API Key:</label>\n                          <input id=\"psAPIKEY\" type=\"text\" class=\"form-control\" placeholder=\"API Key\" disabled>\n                          <small class=\"form-text text-muted\">OctoPrints API Key. It's required to use the User/Application API Key for OctoPrint version 1.4.1+.</small>\n                          <small class=\"form-text text-muted\">If you do not use authentication on your OctoPrint instance just use the global API Key which should work across all OctoPrint versions.</small>\n                      </div>\n                  \n                  </div>\n                </div>\n              </div>\n              <div class=\"collapse\" id=\"octoprintCollapse\">\n                <div class=\"card card-body\">\n                   <div class=\"row\">\n                        <div class=\"col-md-3\">\n                            <p>1. Make sure CORS is switched on and OctoPrint has been restarted...</p>\n                        </div>\n                        <div class=\"col-md-9\">\n                                 <img width=\"100%\" src=\"/images/userCORSOctoPrint.png\">\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-9\">\n                            <p>2. Grab your OctoPrint instances API Key.<br> This can be generated in the User Settings dialog.</p>\n                            <code>Note: since OctoPrint version 1.4.1 it is recommended to connect using the Application Key / User Key detailed below. Versions before that are fine using the Global API Key generated by OctoPrint.</code>\n                        </div>\n                        <div class=\"col-md-3\">\n                                 <img src=\"/images/userSettingsOctoPrint.png\">\n                        </div>\n                    </div>\n                     <div class=\"row\">\n                        <div class=\"col-md-5\">\n                            <p>2.1 You can generate a API Key from your current user.</p>\n                            <code>Please note, this user currently requires Admin permission rights. If in doubt, it's usually the first user you have created.</code>              \n                        </div>\n                        <div class=\"col-md-7\">\n                                 <img src=\"/images/userAPIKEYOctoPrint.png\">\n                        </div>\n                    </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-5\">\n                            <p>2.1 You can generate a API Key for a specific application.</p>\n                            <code>Please note, this user currently requires Admin permission rights. If in doubt, it's usually the first user you have created.</code>         \n                        </div>\n                        <div class=\"col-md-7\">\n                                 <img src=\"/images/userApplicationKeyOctoPrint.png\">\n                        </div>\n                    </div>\n                </div>\n\n            ",
      size: "large",
      scrollable: false
    });
  }

  PrintersManagement.addPrinter();
});

var Printer = function Printer(printerURL, camURL, apikey, group, name) {
  _classCallCheck(this, Printer);

  this.settingsAppearance = {
    color: "default",
    colorTransparent: false,
    defaultLanguage: "_default",
    name: name,
    showFahrenheitAlso: false
  };
  this.printerURL = printerURL;
  this.camURL = camURL;
  this.apikey = apikey;
  this.group = group;
};

var PrintersManagement = /*#__PURE__*/function () {
  function PrintersManagement(printerURL, camURL, apikey, group, name) {
    _classCallCheck(this, PrintersManagement);

    this.printer = new Printer(printerURL, camURL, apikey, group, name);
  }

  _createClass(PrintersManagement, [{
    key: "build",
    value: function build() {
      return this.printer;
    }
  }], [{
    key: "addPrinter",
    value: function addPrinter(newPrinter) {
      // Insert Blank Row at top of printer list
      if (document.getElementById("printerNewTable").classList.contains("d-none")) {
        document.getElementById("printerNewTable").classList.remove("d-none");
      }

      if (typeof newPrinter !== "undefined") {
        document.getElementById("printerNewList").insertAdjacentHTML("beforebegin", "\n         <tr id=\"newPrinterCard-".concat(newPrintersIndex, "\">\n              <td><div class=\"input-group mb-3\">\n                  <input id=\"newPrinterName-").concat(newPrintersIndex, "\" type=\"text\" class=\"form-control\" value=\"").concat(newPrinter.name, "\">\n\n                </div></td>\n                <td><div class=\"input-group mb-3\">\n                  <input id=\"newPrinterGroup-").concat(newPrintersIndex, "\" type=\"text\" class=\"form-control\" value=\"").concat(newPrinter.group, "\">\n\n                </div></td>\n                <td><div class=\"input-group mb-3\">\n                  <input id=\"newPrinterGroups-").concat(newPrintersIndex, "\" type=\"text\" class=\"form-control\" value=\"").concat(newPrinter.groups, "\">\n\n                </div></td>\n                <td><div class=\"input-group mb-3\">\n                  <input id=\"newPrinterURL-").concat(newPrintersIndex, "\" type=\"text\" class=\"form-control\" value=\"").concat(newPrinter.printerURL, "\">\n\n                </div></td>\n                <td><div class=\"input-group mb-3\">\n                  <input id=\"newPrinterCamURL-").concat(newPrintersIndex, "\" type=\"text\" class=\"form-control\" value=\"").concat(newPrinter.cameraURL, "\">\n\n                </div></td>\n                <td><div class=\"input-group mb-3\">\n                  <input id=\"newPrinterAPIKEY-").concat(newPrintersIndex, "\" type=\"text\" class=\"form-control\" value=\"").concat(newPrinter.apikey, "\">\n                </div></td>\n              <td><button id=\"saveButton-").concat(newPrintersIndex, "\" type=\"button\" class=\"btn btn-success btn-sm\">\n                      <i class=\"fas fa-save\"></i>\n                  </button></td>\n              <td><button id=\"delButton-").concat(newPrintersIndex, "\" type=\"button\" class=\"btn btn-danger btn-sm\">\n                      <i class=\"fas fa-trash\"></i>\n                  </button></td>\n      \n          </tr>\n  "));
      } else {
        document.getElementById("printerNewList").insertAdjacentHTML("beforebegin", "\n        <tr id=\"newPrinterCard-".concat(newPrintersIndex, "\">\n        <td><div class=\"mb-0\">\n          <input id=\"newPrinterName-").concat(newPrintersIndex, "\" type=\"text\" class=\"form-control\" placeholder=\"Leave blank to grab from OctoPrint\">\n          <small>Example: <code>My Awesome Printer Name</code></small>\n        </div></td>\n        <td><div class=\"mb-0\">\n          <input id=\"newPrinterGroup-").concat(newPrintersIndex, "\" type=\"text\" class=\"form-control\" placeholder=\"\">\n          <small>Example: <code>Rack 1</code></small>\n        </div></td>\n        <td><div class=\"mb-0\">\n          <input id=\"newPrinterURL-").concat(newPrintersIndex, "\" type=\"text\" class=\"form-control\" placeholder=\"\">\n          <small>Example: <code>http://192.168.1.5:80</code></small>\n        </div></td>\n        <td><div class=\"mb-0\">\n          <input id=\"newPrinterCamURL-").concat(newPrintersIndex, "\" type=\"text\" class=\"form-control\" placeholder=\"Leave blank to grab from OctoPrint\">\n          <small>Example: <code>http://192.168.1.5/webcam/?action=stream</code></small>\n        </div></td>\n        <td><div class=\"mb-0\">\n          <input id=\"newPrinterAPIKEY-").concat(newPrintersIndex, "\" type=\"text\" class=\"form-control\" placeholder=\"\">\n          <small>OctoPrint Version 1.4.1+: <code>Must use generated User/Application Key</code></small>\n        </div></td>\n        <td><button id=\"saveButton-").concat(newPrintersIndex, "\" type=\"button\" class=\"btn btn-success btn-sm\">\n                <i class=\"fas fa-save\"></i>\n            </button></td>\n        <td><button id=\"delButton-").concat(newPrintersIndex, "\" type=\"button\" class=\"btn btn-danger btn-sm\">\n                <i class=\"fas fa-trash\"></i>\n            </button></td>\n\n    </tr>\n  "));
      }

      var currentIndex = JSON.parse(JSON.stringify(newPrintersIndex));
      document.getElementById("delButton-".concat(newPrintersIndex)).addEventListener("click", function (event) {
        removeLine(document.getElementById("newPrinterCard-".concat(currentIndex)));
        var table = document.getElementById("printerNewTable");

        if (table.rows.length === 1) {
          if (!table.classList.contains("d-none")) {
            table.classList.add("d-none");
          }
        }
      });
      document.getElementById("saveButton-".concat(newPrintersIndex)).addEventListener("click", function (event) {
        PrintersManagement.savePrinter(event.target);
      });
      var printerName = document.getElementById("newPrinterName-".concat(newPrintersIndex));
      newPrintersIndex++;
    }
  }, {
    key: "importPrinters",
    value: function () {
      var _importPrinters = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee43() {
        return regeneratorRuntime.wrap(function _callee43$(_context51) {
          while (1) {
            switch (_context51.prev = _context51.next) {
              case 0:
                return _context51.abrupt("return", function (e) {
                  var theBytes = e.target.result; // .split('base64,')[1];
                  // Initial JSON validation

                  if (_validate["default"].JSON(theBytes)) {
                    // If we can parse the file.
                    // Grab uploaded file contents into an object
                    var _importPrinters2 = JSON.parse(theBytes); // Loop over import only importing printers with correct fields.


                    for (var index = 0; index < _importPrinters2.length; index++) {
                      var printer = {
                        printerURL: "Key not found",
                        cameraURL: "Key not found",
                        name: "Key not found",
                        group: "Key not found",
                        apikey: "Key not found"
                      };

                      if (typeof _importPrinters2[index].name !== "undefined") {
                        printer.name = _importPrinters2[index].name;
                      }

                      if (typeof _importPrinters2[index].printerURL !== "undefined") {
                        printer.printerURL = _importPrinters2[index].printerURL;
                      }

                      if (typeof _importPrinters2[index].cameraURL !== "undefined") {
                        printer.cameraURL = _importPrinters2[index].cameraURL;
                      }

                      if (typeof _importPrinters2[index].group !== "undefined") {
                        printer.group = _importPrinters2[index].group;
                      }

                      if (typeof _importPrinters2[index].apikey !== "undefined") {
                        printer.apikey = _importPrinters2[index].apikey;
                      }

                      PrintersManagement.addPrinter(printer);
                    }

                    _ui["default"].createAlert("success", "Successfully imported your printer list, Please check it over and save when ready.", 3000);
                  } else {
                    _ui["default"].createAlert("error", "The file you have tried to upload contains json syntax errors.", 3000);
                  }
                });

              case 1:
              case "end":
                return _context51.stop();
            }
          }
        }, _callee43);
      }));

      function importPrinters() {
        return _importPrinters.apply(this, arguments);
      }

      return importPrinters;
    }()
  }, {
    key: "deletePrinter",
    value: function () {
      var _deletePrinter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee44() {
        var post, printersRemoved;
        return regeneratorRuntime.wrap(function _callee44$(_context52) {
          while (1) {
            switch (_context52.prev = _context52.next) {
              case 0:
                if (!(deletedPrinters.length > 0)) {
                  _context52.next = 15;
                  break;
                }

                _context52.next = 3;
                return _octofarm["default"].post("printers/remove", deletedPrinters);

              case 3:
                post = _context52.sent;

                if (!(post.status === 200)) {
                  _context52.next = 12;
                  break;
                }

                _context52.next = 7;
                return post.json();

              case 7:
                printersRemoved = _context52.sent;
                printersRemoved = printersRemoved.printersRemoved;
                printersRemoved.forEach(function (printer) {
                  _ui["default"].createAlert("success", "Printer: ".concat(printer.printerURL, " has successfully been removed from the farm..."), 1000, "Clicked");

                  document.getElementById("printerCard-".concat(printer.printerId)).remove();
                });
                _context52.next = 13;
                break;

              case 12:
                _ui["default"].createAlert("error", "Something went wrong updating the Server...", 3000, "Clicked");

              case 13:
                _context52.next = 16;
                break;

              case 15:
                _ui["default"].createAlert("error", "To delete a printer... one must first select a printer.", 3000, "Clicked");

              case 16:
              case "end":
                return _context52.stop();
            }
          }
        }, _callee44);
      }));

      function deletePrinter() {
        return _deletePrinter.apply(this, arguments);
      }

      return deletePrinter;
    }()
  }, {
    key: "savePrinter",
    value: function () {
      var _savePrinter = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee45(event) {
        var newId, printerURL, printerCamURL, printerAPIKEY, printerGroup, printerName, errors, printCheck, printers, saveButton, printer, post, printersAdded, table;
        return regeneratorRuntime.wrap(function _callee45$(_context53) {
          while (1) {
            switch (_context53.prev = _context53.next) {
              case 0:
                // Gather the printer data...
                newId = event.id.split("-");
                newId = newId[1]; // Grab new printer cells...

                printerURL = document.getElementById("newPrinterURL-".concat(newId));
                printerCamURL = document.getElementById("newPrinterCamURL-".concat(newId));
                printerAPIKEY = document.getElementById("newPrinterAPIKEY-".concat(newId));
                printerGroup = document.getElementById("newPrinterGroup-".concat(newId));
                printerName = document.getElementById("newPrinterName-".concat(newId));
                errors = [];
                printCheck = -1;

                if (printerURL.value !== "") {
                  printCheck = _.findIndex(printerInfo, function (o) {
                    return JSON.stringify(o.printerURL) === JSON.stringify(printerURL.value);
                  });
                } // Check information is filled correctly...


                if (printerURL.value === "" || printCheck > -1 || printerAPIKEY.value === "" || printerName.value === "" || printerCamURL.value === "") {
                  if (printerURL.value === "") {
                    errors.push({
                      type: "warning",
                      msg: "Please input your printers URL"
                    });
                  }

                  if (printerAPIKEY.value === "") {
                    errors.push({
                      type: "warning",
                      msg: "Please input your printers API Key"
                    });
                  }

                  if (printCheck > -1) {
                    errors.push({
                      type: "error",
                      msg: "Printer URL: ".concat(printerURL.value, " already exists on farm")
                    });
                  }
                }

                if (!(errors.length > 0)) {
                  _context53.next = 15;
                  break;
                }

                errors.forEach(function (error) {
                  _ui["default"].createAlert(error.type, error.msg, 3000, "clicked");
                });
                _context53.next = 36;
                break;

              case 15:
                printers = [];
                saveButton = document.getElementById("saveButton-".concat(newId));
                saveButton.innerHTML = "<i class=\"fas fa-spinner fa-spin\"></i>";
                saveButton.disabled = true;
                printer = new PrintersManagement(printerURL.value, printerCamURL.value, printerAPIKEY.value, printerGroup.value, printerName.value).build();
                printers.push(printer);
                _context53.next = 23;
                return _octofarm["default"].post("printers/add", printers);

              case 23:
                post = _context53.sent;

                if (!(post.status === 200)) {
                  _context53.next = 33;
                  break;
                }

                _context53.next = 27;
                return post.json();

              case 27:
                printersAdded = _context53.sent;
                printersAdded = printersAdded.printersAdded;
                printersAdded.forEach(function (printer) {
                  _ui["default"].createAlert("success", "Printer: ".concat(printer.printerURL, " has successfully been added to the farm..."), 500, "Clicked");
                });
                event.parentElement.parentElement.parentElement.remove();
                _context53.next = 36;
                break;

              case 33:
                _ui["default"].createAlert("error", "Something went wrong updating the Server...", 3000, "Clicked");

                saveButton.innerHTML = "<i class=\"fas fa-save\"></i>";
                saveButton.disabled = false;

              case 36:
                table = document.getElementById("printerNewTable");

                if (table.rows.length === 1) {
                  if (!table.classList.contains("d-none")) {
                    table.classList.add("d-none");
                  }
                }

              case 38:
              case "end":
                return _context53.stop();
            }
          }
        }, _callee45);
      }));

      function savePrinter(_x36) {
        return _savePrinter.apply(this, arguments);
      }

      return savePrinter;
    }()
  }]);

  return PrintersManagement;
}(); // Initial listeners
// class dashActions {
//   static async connectionAction(action) {
//     $("#connectionModal").modal("hide");
//     const selected = document.querySelectorAll("[id^='printerSel-']");
//     document.getElementById("connectionAction").remove();
//     if (action === "connect") {
//       for (let i = 0; i < selected.length; i++) {
//         if (selected[i].checked === true) {
//           const index = selected[i].id.replace("printerSel-", "");
//           let printerName = "";
//           if (typeof printerInfo[index].settingsAppearance !== "undefined") {
//             printerName = printerInfo[index].settingsAppearance.name;
//           }
//           let preferBaud = printerInfo[index].options.baudratePreference;
//           let preferPort = printerInfo[index].options.portPreference;
//           let preferProfile =
//             printerInfo[index].options.printerProfilePreference;
//           if (preferBaud === null) {
//             preferBaud = "115200";
//           }
//           if (preferPort === null) {
//             preferPort = printerInfo[index].options.ports[0];
//           }
//           if (preferProfile === null) {
//             preferProfile = printerInfo[index].options.printerProfiles[0];
//           }
//           const opts = {
//             command: "connect",
//             port: preferPort,
//             baudrate: parseInt(preferPort),
//             printerProfile: preferProfile,
//             save: true,
//           };
//           let post = null;
//           try {
//             post = await OctoPrintClient.post(
//               printerInfo[index],
//               "connection",
//               opts
//             );
//             if (post.status === 204) {
//               UI.createAlert(
//                 "success",
//                 `Connected: ${printerInfo[index].index}. ${printerName}`,
//                 1000,
//                 "clicked"
//               );
//             } else {
//               UI.createAlert(
//                 "error",
//                 `Couldn't Connect ${printerInfo[index].index}with Port: ${preferPort}, Baud: ${preferBaud}, Profile: ${preferProfile}`,
//                 1000,
//                 "clicked"
//               );
//             }
//           } catch (e) {
//             console.log(e);
//             UI.createAlert(
//               "error",
//               `Couldn't Connect ${printerInfo[index].index}with Port: ${preferPort}, Baud: ${preferBaud}, Profile: ${preferProfile}`,
//               1000,
//               "clicked"
//             );
//           }
//         }
//       }
//     } else if (action === "disconnect") {
//       for (let i = 0; i < selected.length; i++) {
//         if (selected[i].checked === true) {
//           const index = selected[i].id.replace("printerSel-", "");
//           let printerName = "";
//           if (typeof printerInfo[index].settingsAppearance !== "undefined") {
//             printerName = printerInfo[index].settingsAppearance.name;
//           }
//           const opts = {
//             command: "disconnect",
//           };
//           const post = await OctoPrintClient.post(
//             printerInfo[index],
//             "connection",
//             opts
//           );
//           if (post.status === 204) {
//             UI.createAlert(
//               "success",
//               `Disconnected: ${printerInfo[index].index}. ${printerName}`,
//               1000,
//               "clicked"
//             );
//           } else {
//             UI.createAlert(
//               "error",
//               `Couldn't Disconnect: ${printerInfo[index].index}. ${printerName}`,
//               1000,
//               "clicked"
//             );
//           }
//         }
//       }
//     }
//   }
//
//   static async connectAll() {
//     // Create bootbox confirmation message
//     document.getElementById("connectionActionBtn").insertAdjacentHTML(
//       "beforeBegin",
//       `
//     <button id="connectionAction" type="button" class="btn btn-success" data-dismiss="modal">
//       Connect All
//     </button>
//     `
//     );
//     const message = document.getElementById("printerConnection");
//
//     message.innerHTML =
//       "You must have at least 1 printer in the Disconnected state to use this function...";
//
//     let printersList = "";
//     printerInfo.forEach((printer) => {
//       if (printer.state === "Disconnected") {
//         let printerName = "";
//         if (typeof printer.settingsAppearance !== "undefined") {
//           printerName = printer.settingsAppearance.name;
//         }
//         const print = `
//           <div style="display:inline-block;">
//           <form class="was-validated">
//           <div class="custom-control custom-checkbox mb-3">
//             <input type="checkbox" class="custom-control-input" id="printerSel-${printer.index}" required>
//             <label class="custom-control-label" for="printerSel-${printer.index}">${printer.index}. ${printerName}</label>
//             <div class="valid-feedback">Attempt to connect</div>
//             <div class="invalid-feedback">DO NOT connect</div>
//           </div>
//         </form></div>
//           `;
//         printersList += print;
//         message.innerHTML = printersList;
//       }
//     });
//     const checkBoxes = document.querySelectorAll("[id^='printerSel-']");
//     checkBoxes.forEach((box) => {
//       box.checked = true;
//     });
//     document
//       .getElementById("connectionAction")
//       .addEventListener("click", () => {
//         dashActions.connectionAction("connect");
//       });
//   }
//
//   static async disconnectAll() {
//     // Create bootbox confirmation message
//     document.getElementById("connectionActionBtn").insertAdjacentHTML(
//       "beforeBegin",
//       `
//         <button id="connectionAction" type="button" class="btn btn-success" data-dismiss="modal">
//           Disconnect All
//         </button>
//         `
//     );
//     const message = document.getElementById("printerConnection");
//     message.innerHTML =
//       "You must have at least 1 printer in the Idle category to use this function...";
//     let printersList = "";
//     printerInfo.forEach((printer) => {
//       if (
//         printer.stateColour.category === "Idle" ||
//         printer.stateColour.category === "Complete"
//       ) {
//         let printerName = "";
//         if (typeof printer.settingsAppearance !== "undefined") {
//           printerName = printer.settingsAppearance.name;
//         }
//         const print = `
//               <div style="display:inline-block;">
//               <form class="was-validated">
//               <div class="custom-control custom-checkbox mb-3">
//                 <input type="checkbox" class="custom-control-input" id="printerSel-${printer.index}" required>
//                 <label class="custom-control-label" for="printerSel-${printer.index}">${printer.index}. ${printerName}</label>
//                 <div class="valid-feedback">Attempt to connect</div>
//                 <div class="invalid-feedback">DO NOT connect</div>
//               </div>
//             </form></div>
//               `;
//         printersList += print;
//         message.innerHTML = printersList;
//       }
//     });
//
//     const checkBoxes = document.querySelectorAll("[id^='printerSel-']");
//     checkBoxes.forEach((box) => {
//       box.checked = true;
//     });
//     document
//       .getElementById("connectionAction")
//       .addEventListener("click", () => {
//         dashActions.connectionAction("disconnect");
//       });
//   }
// }


var dashUpdate = /*#__PURE__*/function () {
  function dashUpdate() {
    _classCallCheck(this, dashUpdate);
  }

  _createClass(dashUpdate, null, [{
    key: "ticker",
    value: function ticker(list) {
      var textList = "";
      list.forEach(function (e) {
        var date = new Date(e.date);
        date = "".concat(date.getHours(), ":").concat(date.getMinutes(), ":").concat(date.getSeconds());

        if (!document.getElementById(e.id)) {
          document.getElementById("printerTickerMessageBox").insertAdjacentHTML("afterbegin", "<div id=\"".concat(e.id, "\" style=\"width: 100%; font-size:11px;\" class=\"text-left ").concat(e.state, " text-wrap\"> ").concat(date, " | ").concat(e.printer, " | ").concat(e.message, "</div>"));
        }
      });
    }
  }, {
    key: "printers",
    value: function printers(_printers) {
      _printers.forEach(function (printer) {
        var printerName = "";

        if (typeof printer.printerState !== "undefined") {
          if (typeof printer.printerName !== "undefined") {
            printerName = printer.printerName;
          }

          var printerCard = document.getElementById("printerCard-".concat(printer._id));

          if (printerCard) {
            var printName = document.getElementById("printerName-".concat(printer._id));
            var printButton = document.getElementById("printerButton-".concat(printer._id));
            var webButton = document.getElementById("printerWeb-".concat(printer._id));
            var hostBadge = document.getElementById("hostBadge-".concat(printer._id));
            var printerBadge = document.getElementById("printerBadge-".concat(printer._id));
            var socketBadge = document.getElementById("webSocketIcon-".concat(printer._id));
            var printerPrinterInformation = document.getElementById("printerPrinterInformation-".concat(printer._id));
            var printerOctoPrintInformation = document.getElementById("printerOctoPrintInformation-".concat(printer._id));
            var printerSortIndex = document.getElementById("printerSortIndex-".concat(printer._id));
            var printerGroup = document.getElementById("printerGroup-".concat(printer._id));
            printerGroup.innerHTML = printer.groups.map(function (g) {
              return g.name;
            }).join();

            if (typeof printer.octoPrintSystemInfo !== "undefined") {
              if (typeof printer.currentProfile !== "undefined" && printer.currentProfile !== null) {
                if (typeof printer.octoPrintSystemInfo["printer.firmware"] === "undefined") {
                  printerPrinterInformation.innerHTML = "\n             <small title=\"Please connect and resync to display printer firmware\"><b>Firmware: </b>Unknown</small><br>\n             <small><b>Name: </b>".concat(printer.currentProfile.name, "</small><br>\n             <small><b>Model: </b>").concat(printer.currentProfile.model, "</small><br>\n            ");
                } else {
                  printerPrinterInformation.innerHTML = "\n             <small><b>Firmware: </b>".concat(printer.octoPrintSystemInfo["printer.firmware"], "</small><br>\n             <small><b>Name: </b>").concat(printer.currentProfile.name, "</small><br>\n             <small><b>Model: </b>").concat(printer.currentProfile.model, "</small><br>\n            ");
                }
              }
            }

            if (typeof printer.octoPi !== "undefined") {
              printerOctoPrintInformation.innerHTML = "\n          <small><b>OctoPrint: </b>".concat(printer.octoPrintVersion, "</small><br>\n          <small><b>OctoPi: </b>").concat(printer.octoPi.version, "</small><br>\n          <small><b>RaspberryPi: </b>").concat(printer.octoPi.model, "</small>");
            } else {
              printerOctoPrintInformation.innerHTML = "\n          <small><b>OctoPrint: </b>".concat(printer.octoPrintVersion, "</small><br>\n          ");
            }

            printerSortIndex.innerHTML = printer.sortIndex;
            printName.innerHTML = "".concat(printerName);

            if (typeof printer.corsCheck !== "undefined") {
              if (printer.corsCheck) {
                printerBadge.innerHTML = printer.printerState.state;
              } else {
                printerBadge.innerHTML = "CORS NOT ENABLED!";
              }
            } else {
              printerBadge.innerHTML = printer.printerState.state;
            }

            printerBadge.className = "tag badge badge-".concat(printer.printerState.colour.name, " badge-pill");
            printerBadge.setAttribute("title", printer.printerState.desc);
            hostBadge.innerHTML = printer.hostState.state;
            hostBadge.setAttribute("title", printer.hostState.desc);
            hostBadge.className = "tag badge badge-".concat(printer.hostState.colour.name, " badge-pill");
            socketBadge.className = "tag badge badge-".concat(printer.webSocketState.colour, " badge-pill");
            socketBadge.setAttribute("title", printer.webSocketState.desc);

            if (typeof printer.updateAvailable !== "undefined") {
              var updateButton = document.getElementById("octoprintUpdate-".concat(printer._id));
              var updatePluginButton = document.getElementById("octoprintPluginUpdate-".concat(printer._id));

              if (printer.updateAvailable.octoPrintUpdate.updateAvailable) {
                if (updateButton.classList.contains("d-none")) {
                  updateButton.classList.remove("d-none");
                }

                bulkOctoPrintsToUpdate = true;
              } else {
                if (!updateButton.classList.contains("d-none")) {
                  updateButton.classList.add("d-none");
                }
              }

              if (printer.updateAvailable.pluginUpdates.length > 0) {
                if (updatePluginButton.classList.contains("d-none")) {
                  updatePluginButton.classList.remove("d-none");
                }

                bulkPluginsToUpdate = true;
              } else {
                if (!updatePluginButton.classList.contains("d-none")) {
                  updatePluginButton.classList.add("d-none");
                }
              }

              if (bulkOctoPrintsToUpdate) {
                if (bulkOctoPrintUpdateButton.classList.contains("d-none")) {
                  bulkOctoPrintUpdateButton.classList.remove("d-none");
                }
              }

              if (bulkPluginsToUpdate) {
                if (bulkPluginUpdateButton.classList.contains("d-none")) {
                  bulkPluginUpdateButton.classList.remove("d-none");
                }
              }
            }

            webButton.href = printer.printerURL;

            if (typeof printer.updateAvailable !== "undefined") {
              var _updateButton = document.getElementById("octoprintUpdate-".concat(printer._id));

              var _updatePluginButton = document.getElementById("octoprintPluginUpdate-".concat(printer._id));

              if (printer.updateAvailable.octoPrintUpdate.updateAvailable) {} else {
                if (!_updateButton.classList.contains("d-none")) {
                  _updateButton.classList.add("d-none");
                } // if (!bulkOctoPrintUpdateButton.classList.contains("d-none")) {
                //   bulkOctoPrintUpdateButton.classList.add("d-none");
                // }

              }

              if (printer.updateAvailable.pluginUpdates.length > 0) {} else {
                if (!_updatePluginButton.classList.contains("d-none")) {
                  _updatePluginButton.classList.add("d-none");
                } // if (!bulkPluginUpdateButton.classList.contains("d-none")) {
                //   bulkPluginUpdateButton.classList.add("d-none");
                // }

              }
            }

            if (printer.hostState.state === "Online") {
              var apiErrors = 0;

              for (var key in printer.systemChecks.scanning) {
                if (printer.systemChecks.scanning.hasOwnProperty(key)) {
                  if (printer.systemChecks.scanning[key].status !== "success") {
                    apiErrors = apiErrors + 1;
                  }
                }
              }

              var apiErrorTag = document.getElementById("scanningIssues-".concat(printer._id));

              if (apiErrors > 0 && printer.printerState.colour.category !== "Offline") {
                if (!apiErrorTag.classList.contains("badge-danger")) {
                  apiErrorTag.classList.add("tag", "badge", "badge-danger", "badge-pill");
                  apiErrorTag.innerHTML = "API Issues Detected!";
                }
              } else {
                if (apiErrorTag.classList.contains("badge-danger")) {
                  apiErrorTag.classList.remove("tag", "badge", "badge-danger", "badge-pill");
                  apiErrorTag.innerHTML = "";
                }
              }
            }

            (0, _actionButtons.checkQuickConnectState)(printer);
            printButton.disabled = printer.printerState.colour.category === "Offline";
          } else {
            // Insert new printer addition...
            document.getElementById("printerList").insertAdjacentHTML("beforeend", "\n        <tr id=\"printerCard-".concat(printer._id, "\">\n        <th><span title=\"Drag and Change your Printers sorting\"  id=\"printerSortIndex-").concat(printer._id, "\"\n                   class=\"tag btn btn-light btn-sm sortableList\"\n            >\n    ").concat(printer.sortIndex, "\n    </span></td>\n        <td class=\"align-middle\"><div id=\"printerName-").concat(printer._id, "\">").concat(printerName, "</div></td>\n        <td class=\"align-middle\" id=\"printerActionBtns-").concat(printer._id, "\"></td>\n        <td class=\"align-middle\">\n          <button  title=\"Change your Printer Settings\"\n            id=\"printerSettings-").concat(printer._id, "\"\n                                 type=\"button\"\n                                 class=\"tag btn btn-secondary btn-sm bg-colour-1\"\n                                 data-toggle=\"modal\"\n                                 data-target=\"#printerSettingsModal\"\n            ><i class=\"fas fa-cog\"></i>\n            </button>\n            <button  title=\"View individual Printer Logs for OctoFarm/OctoPrint\"\n            id=\"printerLog-").concat(printer._id, "\"\n                                 type=\"button\"\n                                 class=\"tag btn btn-secondary btn-sm bg-colour-2\"\n                                 data-toggle=\"modal\"\n                                 data-target=\"#printerLogsModal\"\n            ><i class=\"fas fa-file-alt\"></i>\n            </button>\n            <button title=\"You have an OctoPrint update to install!\" id=\"octoprintUpdate-").concat(printer._id, "\" class='tag btn btn-secondary btn-sm bg-colour-3 d-none'><i class=\"fas fa-wrench\"></i> Update!</button>\n            <button title=\"You have OctoPrint plugin updates to install!\" id=\"octoprintPluginUpdate-").concat(printer._id, "\" class='tag btn btn-secondary btn-sm bg-colour-4 d-none'><i class=\"fas fa-plug\"></i> Update!</button>\n            <button title=\"View individual Printer Statistics\"\n            id=\"printerStatistics-").concat(printer._id, "\"\n                                 type=\"button\"\n                                 class=\"tag btn btn-secondary btn-sm bg-colour-3\"\n                                 data-toggle=\"modal\"\n                                 data-target=\"#printerStatisticsModal\"\n            ><i class=\"fas fa-chart-pie\"></i>\n            </button>\n           <button  title=\"Setup and track Maintenance Issues with Printers\"\n            id=\"printerMaintenance-").concat(printer._id, "\"\n                                 type=\"button\"\n                                 class=\"tag btn btn-secondary btn-sm bg-colour-4 d-none\"\n                                 data-toggle=\"modal\"\n                                 data-target=\"#printerMaintenanceModal\"\n                                 disabled\n            ><i class=\"fas fa-wrench\"></i>\n            </button>\n    </span></td>\n        <td class=\"align-middle\"><small><span data-title=\"").concat(printer.hostState.desc, "\" id=\"hostBadge-").concat(printer._id, "\" class=\"tag badge badge-").concat(printer.hostState.colour.name, " badge-pill\">\n                ").concat(printer.hostState.state, "</small></span></td>\n        <td class=\"align-middle\"><small><span data-title=\"").concat(printer.printerState.desc, "\" id=\"printerBadge-").concat(printer._id, "\" class=\"tag badge badge-").concat(printer.printerState.colour.name, " badge-pill\">\n                ").concat(printer.printerState.state, "</small></span><br><span data-title=\"Check printer settings, API issues detected...\" id=\"scanningIssues-").concat(printer._id, "\"></small></span></td>\n        <td class=\"align-middle\"><small><span data-title=\"").concat(printer.webSocketState.desc, "\" id=\"webSocketIcon-").concat(printer._id, "\" class=\"tag badge badge-").concat(printer.webSocketState.colour, " badge-pill\">\n                <i  class=\"fas fa-plug\"></i></span></td>\n\n        <td class=\"align-middle\"><div id=\"printerGroup-").concat(printer._id, "\" ></div></td>\n        <td class=\"align-middle\" id=\"printerPrinterInformation-").concat(printer._id, "\"></td>\n        <td class=\"align-middle\" id=\"printerOctoPrintInformation-").concat(printer._id, "\"></td>\n    </tr>\n          "));
            (0, _actionButtons.init)(printer, "printerActionBtns-".concat(printer._id));
            document.getElementById("octoprintUpdate-".concat(printer._id)).addEventListener("click", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee47() {
              return regeneratorRuntime.wrap(function _callee47$(_context55) {
                while (1) {
                  switch (_context55.prev = _context55.next) {
                    case 0:
                      bootbox.confirm({
                        message: "This will tell OctoPrint to update, are you sure?",
                        buttons: {
                          confirm: {
                            label: "Yes",
                            className: "btn-success"
                          },
                          cancel: {
                            label: "No",
                            className: "btn-danger"
                          }
                        },
                        callback: function () {
                          var _callback7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee46(result) {
                            var data, updateRequest;
                            return regeneratorRuntime.wrap(function _callee46$(_context54) {
                              while (1) {
                                switch (_context54.prev = _context54.next) {
                                  case 0:
                                    if (!result) {
                                      _context54.next = 6;
                                      break;
                                    }

                                    data = {
                                      targets: ["octoprint"],
                                      force: true
                                    };
                                    _context54.next = 4;
                                    return _octoprint["default"].postNOAPI(printer, "plugin/softwareupdate/update", data);

                                  case 4:
                                    updateRequest = _context54.sent;

                                    if (updateRequest.status === 200) {
                                      _ui["default"].createAlert("success", "".concat(printer.printerName, ": Update command fired, you may need to restart OctoPrint once complete."), 3000, "Clicked"); // let post = await OctoPrintClient.systemNoConfirm(
                                      //   printer,
                                      //   "restart"
                                      // );
                                      // if (typeof post !== "undefined") {
                                      //   if (post.status === 204) {
                                      //     UI.createAlert(
                                      //       "success",
                                      //       `Successfully made restart attempt to ${printer.printerName}... You may need to Re-Sync!`,
                                      //       3000,
                                      //       "Clicked"
                                      //     );
                                      //   } else {
                                      //     UI.createAlert(
                                      //       "error",
                                      //       `There was an issue sending restart to ${printer.printerName} are you sure it's online?`,
                                      //       3000,
                                      //       "Clicked"
                                      //     );
                                      //   }
                                      // } else {
                                      //   UI.createAlert(
                                      //     "error",
                                      //     `No response from ${printer.printerName}, is it online???`,
                                      //     3000,
                                      //     "Clicked"
                                      //   );
                                      // }

                                    } else {
                                      _ui["default"].createAlert("error", "".concat(printer.printerName, ": Failed to update, manual intervention required!"), 3000, "Clicked");
                                    }

                                  case 6:
                                  case "end":
                                    return _context54.stop();
                                }
                              }
                            }, _callee46);
                          }));

                          function callback(_x37) {
                            return _callback7.apply(this, arguments);
                          }

                          return callback;
                        }()
                      });

                    case 1:
                    case "end":
                      return _context55.stop();
                  }
                }
              }, _callee47);
            })));
            document.getElementById("octoprintPluginUpdate-".concat(printer._id)).addEventListener("click", function () {
              var pluginsToUpdate = [];
              var autoSelect = [];

              if (printer.updateAvailable.pluginUpdates.length > 0) {
                printer.updateAvailable.pluginUpdates.forEach(function (plugin) {
                  pluginsToUpdate.push({
                    text: "".concat(plugin.displayName, " - Version: ").concat(plugin.displayVersion),
                    value: plugin.id
                  });
                  autoSelect.push(plugin.id);
                });
                bootbox.prompt({
                  title: "Select the plugins you'd like to update below...",
                  inputType: "select",
                  multiple: true,
                  value: autoSelect,
                  inputOptions: pluginsToUpdate,
                  callback: function () {
                    var _callback8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee48(result) {
                      var data, updateRequest, post;
                      return regeneratorRuntime.wrap(function _callee48$(_context56) {
                        while (1) {
                          switch (_context56.prev = _context56.next) {
                            case 0:
                              data = {
                                targets: result,
                                force: true
                              };
                              _context56.next = 3;
                              return _octoprint["default"].postNOAPI(printer, "plugin/softwareupdate/update", data);

                            case 3:
                              updateRequest = _context56.sent;

                              if (!(updateRequest.status === 200)) {
                                _context56.next = 12;
                                break;
                              }

                              _ui["default"].createAlert("success", "".concat(printer.printerName, ": Successfully updated! your instance will restart now."), 3000, "Clicked");

                              _context56.next = 8;
                              return _octoprint["default"].systemNoConfirm(printer, "restart");

                            case 8:
                              post = _context56.sent;

                              if (typeof post !== "undefined") {
                                if (post.status === 204) {
                                  _ui["default"].createAlert("success", "Successfully made restart attempt to ".concat(printer.printerName, "... You may need to Re-Sync!"), 3000, "Clicked");
                                } else {
                                  _ui["default"].createAlert("error", "There was an issue sending restart to ".concat(printer.printerName, " are you sure it's online?"), 3000, "Clicked");
                                }
                              } else {
                                _ui["default"].createAlert("error", "No response from ".concat(printer.printerName, ", is it online???"), 3000, "Clicked");
                              }

                              _context56.next = 13;
                              break;

                            case 12:
                              _ui["default"].createAlert("error", "".concat(printer.printerName, ": Failed to update, manual intervention required!"), 3000, "Clicked");

                            case 13:
                            case "end":
                              return _context56.stop();
                          }
                        }
                      }, _callee48);
                    }));

                    function callback(_x38) {
                      return _callback8.apply(this, arguments);
                    }

                    return callback;
                  }()
                });
              } else {
                _ui["default"].createAlert("info", "Please rescan your device as there's no plugins actually available...");
              }
            });
            document.getElementById("printerButton-".concat(printer._id)).addEventListener("click", function () {
              // eslint-disable-next-line no-underscore-dangle
              _printerManager["default"].init(printer._id, printerInfo, printerControlList);
            });
            document.getElementById("printerSettings-".concat(printer._id)).addEventListener("click", function (e) {
              _printerSettings["default"].init( // eslint-disable-next-line no-underscore-dangle
              printer._id, printerInfo, printerControlList);
            });
            document.getElementById("printerLog-".concat(printer._id)).addEventListener("click", /*#__PURE__*/function () {
              var _ref38 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee49(e) {
                var connectionLogs;
                return regeneratorRuntime.wrap(function _callee49$(_context57) {
                  while (1) {
                    switch (_context57.prev = _context57.next) {
                      case 0:
                        _context57.next = 2;
                        return _octofarm["default"].get("printers/connectionLogs/" + printer._id);

                      case 2:
                        connectionLogs = _context57.sent;
                        _context57.next = 5;
                        return connectionLogs.json();

                      case 5:
                        connectionLogs = _context57.sent;

                        _printerLogs["default"].loadLogs(printer, connectionLogs);

                      case 7:
                      case "end":
                        return _context57.stop();
                    }
                  }
                }, _callee49);
              }));

              return function (_x39) {
                return _ref38.apply(this, arguments);
              };
            }());
            document.getElementById("printerStatistics-".concat(printer._id)).addEventListener("click", /*#__PURE__*/function () {
              var _ref39 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee50(e) {
                return regeneratorRuntime.wrap(function _callee50$(_context58) {
                  while (1) {
                    switch (_context58.prev = _context58.next) {
                      case 0:
                        _printerLogs["default"].loadStatistics(printer._id);

                      case 1:
                      case "end":
                        return _context58.stop();
                    }
                  }
                }, _callee50);
              }));

              return function (_x40) {
                return _ref39.apply(this, arguments);
              };
            }());
          }
        }
      });
    }
  }]);

  return dashUpdate;
}();

var el = document.getElementById("printerList");
var sortable = Sortable.create(el, {
  handle: ".sortableList",
  animation: 150,
  onUpdate: function onUpdate(
  /** Event */
  e) {
    var elements = e.target.querySelectorAll("[id^='printerCard-']");
    var listID = [];
    elements.forEach(function (e) {
      var ca = e.id.split("-");
      listID.push(ca[1]);
    });

    _octofarm["default"].post("printers/updateSortIndex", listID);
  }
});

},{"./lib/functions/file.js":3,"./lib/functions/ui.js":4,"./lib/functions/validate.js":5,"./lib/modules/Printers/actionButtons.js":6,"./lib/modules/customScripts.js":8,"./lib/modules/powerButton.js":12,"./lib/modules/printerLogs.js":13,"./lib/modules/printerManager.js":14,"./lib/modules/printerSelect":15,"./lib/modules/printerSettings.js":16,"./lib/octofarm.js":18,"./lib/octoprint.js":19,"core-js/modules/es6.array.copy-within":142,"core-js/modules/es6.array.every":143,"core-js/modules/es6.array.fill":144,"core-js/modules/es6.array.filter":145,"core-js/modules/es6.array.find":147,"core-js/modules/es6.array.find-index":146,"core-js/modules/es6.array.for-each":148,"core-js/modules/es6.array.from":149,"core-js/modules/es6.array.index-of":150,"core-js/modules/es6.array.is-array":151,"core-js/modules/es6.array.iterator":152,"core-js/modules/es6.array.last-index-of":153,"core-js/modules/es6.array.map":154,"core-js/modules/es6.array.of":155,"core-js/modules/es6.array.reduce":157,"core-js/modules/es6.array.reduce-right":156,"core-js/modules/es6.array.some":158,"core-js/modules/es6.array.sort":159,"core-js/modules/es6.array.species":160,"core-js/modules/es6.date.now":161,"core-js/modules/es6.date.to-iso-string":162,"core-js/modules/es6.date.to-json":163,"core-js/modules/es6.date.to-primitive":164,"core-js/modules/es6.date.to-string":165,"core-js/modules/es6.function.bind":166,"core-js/modules/es6.function.has-instance":167,"core-js/modules/es6.function.name":168,"core-js/modules/es6.map":169,"core-js/modules/es6.math.acosh":170,"core-js/modules/es6.math.asinh":171,"core-js/modules/es6.math.atanh":172,"core-js/modules/es6.math.cbrt":173,"core-js/modules/es6.math.clz32":174,"core-js/modules/es6.math.cosh":175,"core-js/modules/es6.math.expm1":176,"core-js/modules/es6.math.fround":177,"core-js/modules/es6.math.hypot":178,"core-js/modules/es6.math.imul":179,"core-js/modules/es6.math.log10":180,"core-js/modules/es6.math.log1p":181,"core-js/modules/es6.math.log2":182,"core-js/modules/es6.math.sign":183,"core-js/modules/es6.math.sinh":184,"core-js/modules/es6.math.tanh":185,"core-js/modules/es6.math.trunc":186,"core-js/modules/es6.number.constructor":187,"core-js/modules/es6.number.epsilon":188,"core-js/modules/es6.number.is-finite":189,"core-js/modules/es6.number.is-integer":190,"core-js/modules/es6.number.is-nan":191,"core-js/modules/es6.number.is-safe-integer":192,"core-js/modules/es6.number.max-safe-integer":193,"core-js/modules/es6.number.min-safe-integer":194,"core-js/modules/es6.number.parse-float":195,"core-js/modules/es6.number.parse-int":196,"core-js/modules/es6.object.assign":197,"core-js/modules/es6.object.create":198,"core-js/modules/es6.object.define-properties":199,"core-js/modules/es6.object.define-property":200,"core-js/modules/es6.object.freeze":201,"core-js/modules/es6.object.get-own-property-descriptor":202,"core-js/modules/es6.object.get-own-property-names":203,"core-js/modules/es6.object.get-prototype-of":204,"core-js/modules/es6.object.is":208,"core-js/modules/es6.object.is-extensible":205,"core-js/modules/es6.object.is-frozen":206,"core-js/modules/es6.object.is-sealed":207,"core-js/modules/es6.object.keys":209,"core-js/modules/es6.object.prevent-extensions":210,"core-js/modules/es6.object.seal":211,"core-js/modules/es6.object.set-prototype-of":212,"core-js/modules/es6.object.to-string":213,"core-js/modules/es6.promise":214,"core-js/modules/es6.reflect.apply":215,"core-js/modules/es6.reflect.construct":216,"core-js/modules/es6.reflect.define-property":217,"core-js/modules/es6.reflect.delete-property":218,"core-js/modules/es6.reflect.get":221,"core-js/modules/es6.reflect.get-own-property-descriptor":219,"core-js/modules/es6.reflect.get-prototype-of":220,"core-js/modules/es6.reflect.has":222,"core-js/modules/es6.reflect.is-extensible":223,"core-js/modules/es6.reflect.own-keys":224,"core-js/modules/es6.reflect.prevent-extensions":225,"core-js/modules/es6.reflect.set":227,"core-js/modules/es6.reflect.set-prototype-of":226,"core-js/modules/es6.regexp.constructor":228,"core-js/modules/es6.regexp.flags":230,"core-js/modules/es6.regexp.match":231,"core-js/modules/es6.regexp.replace":232,"core-js/modules/es6.regexp.search":233,"core-js/modules/es6.regexp.split":234,"core-js/modules/es6.regexp.to-string":235,"core-js/modules/es6.set":236,"core-js/modules/es6.string.anchor":237,"core-js/modules/es6.string.big":238,"core-js/modules/es6.string.blink":239,"core-js/modules/es6.string.bold":240,"core-js/modules/es6.string.code-point-at":241,"core-js/modules/es6.string.ends-with":242,"core-js/modules/es6.string.fixed":243,"core-js/modules/es6.string.fontcolor":244,"core-js/modules/es6.string.fontsize":245,"core-js/modules/es6.string.from-code-point":246,"core-js/modules/es6.string.includes":247,"core-js/modules/es6.string.italics":248,"core-js/modules/es6.string.iterator":249,"core-js/modules/es6.string.link":250,"core-js/modules/es6.string.raw":251,"core-js/modules/es6.string.repeat":252,"core-js/modules/es6.string.small":253,"core-js/modules/es6.string.starts-with":254,"core-js/modules/es6.string.strike":255,"core-js/modules/es6.string.sub":256,"core-js/modules/es6.string.sup":257,"core-js/modules/es6.string.trim":258,"core-js/modules/es6.symbol":259,"core-js/modules/es6.typed.array-buffer":260,"core-js/modules/es6.typed.data-view":261,"core-js/modules/es6.typed.float32-array":262,"core-js/modules/es6.typed.float64-array":263,"core-js/modules/es6.typed.int16-array":264,"core-js/modules/es6.typed.int32-array":265,"core-js/modules/es6.typed.int8-array":266,"core-js/modules/es6.typed.uint16-array":267,"core-js/modules/es6.typed.uint32-array":268,"core-js/modules/es6.typed.uint8-array":269,"core-js/modules/es6.typed.uint8-clamped-array":270,"core-js/modules/es6.weak-map":271,"core-js/modules/es6.weak-set":272,"core-js/modules/es7.array.flat-map":273,"core-js/modules/es7.array.includes":274,"core-js/modules/es7.object.define-getter":275,"core-js/modules/es7.object.define-setter":276,"core-js/modules/es7.object.entries":277,"core-js/modules/es7.object.get-own-property-descriptors":278,"core-js/modules/es7.object.lookup-getter":279,"core-js/modules/es7.object.lookup-setter":280,"core-js/modules/es7.object.values":281,"core-js/modules/es7.promise.finally":282,"core-js/modules/es7.string.pad-end":283,"core-js/modules/es7.string.pad-start":284,"core-js/modules/es7.string.trim-left":285,"core-js/modules/es7.string.trim-right":286,"core-js/modules/es7.symbol.async-iterator":287,"core-js/modules/web.dom.iterable":288,"core-js/modules/web.immediate":289,"core-js/modules/web.timers":290,"regenerator-runtime/runtime":291}],21:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],22:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_hide":59,"./_wks":140}],23:[function(require,module,exports){
'use strict';
var at = require('./_string-at')(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

},{"./_string-at":117}],24:[function(require,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],25:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":68}],26:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"./_to-absolute-index":125,"./_to-length":129,"./_to-object":130}],27:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"./_to-absolute-index":125,"./_to-length":129,"./_to-object":130}],28:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":125,"./_to-iobject":128,"./_to-length":129}],29:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_array-species-create":32,"./_ctx":41,"./_iobject":64,"./_to-length":129,"./_to-object":130}],30:[function(require,module,exports){
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var toLength = require('./_to-length');

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

},{"./_a-function":21,"./_iobject":64,"./_to-length":129,"./_to-object":130}],31:[function(require,module,exports){
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-array":66,"./_is-object":68,"./_wks":140}],32:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":31}],33:[function(require,module,exports){
'use strict';
var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"./_a-function":21,"./_invoke":63,"./_is-object":68}],34:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":35,"./_wks":140}],35:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],36:[function(require,module,exports){
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_an-instance":24,"./_ctx":41,"./_descriptors":45,"./_for-of":55,"./_iter-define":72,"./_iter-step":74,"./_meta":81,"./_object-create":85,"./_object-dp":86,"./_redefine-all":105,"./_set-species":111,"./_validate-collection":137}],37:[function(require,module,exports){
'use strict';
var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_an-instance":24,"./_an-object":25,"./_array-methods":29,"./_for-of":55,"./_has":58,"./_is-object":68,"./_meta":81,"./_redefine-all":105,"./_validate-collection":137}],38:[function(require,module,exports){
'use strict';
var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_an-instance":24,"./_export":49,"./_fails":51,"./_for-of":55,"./_global":57,"./_inherit-if-required":62,"./_is-object":68,"./_iter-detect":73,"./_meta":81,"./_redefine":106,"./_redefine-all":105,"./_set-to-string-tag":112}],39:[function(require,module,exports){
var core = module.exports = { version: '2.6.11' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],40:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":86,"./_property-desc":104}],41:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":21}],42:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = require('./_fails');
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

},{"./_fails":51}],43:[function(require,module,exports){
'use strict';
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

},{"./_an-object":25,"./_to-primitive":131}],44:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],45:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":51}],46:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":57,"./_is-object":68}],47:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],48:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-gops":92,"./_object-keys":95,"./_object-pie":96}],49:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":39,"./_ctx":41,"./_global":57,"./_hide":59,"./_redefine":106}],50:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

},{"./_wks":140}],51:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],52:[function(require,module,exports){
'use strict';
require('./es6.regexp.exec');
var redefine = require('./_redefine');
var hide = require('./_hide');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');
var regexpExec = require('./_regexp-exec');

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"./_defined":44,"./_fails":51,"./_hide":59,"./_redefine":106,"./_regexp-exec":108,"./_wks":140,"./es6.regexp.exec":229}],53:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"./_an-object":25}],54:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = require('./_is-array');
var isObject = require('./_is-object');
var toLength = require('./_to-length');
var ctx = require('./_ctx');
var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;

},{"./_ctx":41,"./_is-array":66,"./_is-object":68,"./_to-length":129,"./_wks":140}],55:[function(require,module,exports){
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_an-object":25,"./_ctx":41,"./_is-array-iter":65,"./_iter-call":70,"./_to-length":129,"./core.get-iterator-method":141}],56:[function(require,module,exports){
module.exports = require('./_shared')('native-function-to-string', Function.toString);

},{"./_shared":114}],57:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],58:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],59:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":45,"./_object-dp":86,"./_property-desc":104}],60:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":57}],61:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":45,"./_dom-create":46,"./_fails":51}],62:[function(require,module,exports){
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};

},{"./_is-object":68,"./_set-proto":110}],63:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],64:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":35}],65:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":75,"./_wks":140}],66:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":35}],67:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":68}],68:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],69:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_cof":35,"./_is-object":68,"./_wks":140}],70:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":25}],71:[function(require,module,exports){
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":59,"./_object-create":85,"./_property-desc":104,"./_set-to-string-tag":112,"./_wks":140}],72:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":49,"./_hide":59,"./_iter-create":71,"./_iterators":75,"./_library":76,"./_object-gpo":93,"./_redefine":106,"./_set-to-string-tag":112,"./_wks":140}],73:[function(require,module,exports){
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":140}],74:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],75:[function(require,module,exports){
module.exports = {};

},{}],76:[function(require,module,exports){
module.exports = false;

},{}],77:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],78:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var sign = require('./_math-sign');
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"./_math-sign":80}],79:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],80:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],81:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":51,"./_has":58,"./_is-object":68,"./_object-dp":86,"./_uid":135}],82:[function(require,module,exports){
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_cof":35,"./_global":57,"./_task":124}],83:[function(require,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":21}],84:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = require('./_descriptors');
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;

},{"./_descriptors":45,"./_fails":51,"./_iobject":64,"./_object-gops":92,"./_object-keys":95,"./_object-pie":96,"./_to-object":130}],85:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":25,"./_dom-create":46,"./_enum-bug-keys":47,"./_html":60,"./_object-dps":87,"./_shared-key":113}],86:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":25,"./_descriptors":45,"./_ie8-dom-define":61,"./_to-primitive":131}],87:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":25,"./_descriptors":45,"./_object-dp":86,"./_object-keys":95}],88:[function(require,module,exports){
'use strict';
// Forced replacement prototype accessors methods
module.exports = require('./_library') || !require('./_fails')(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete require('./_global')[K];
});

},{"./_fails":51,"./_global":57,"./_library":76}],89:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":45,"./_has":58,"./_ie8-dom-define":61,"./_object-pie":96,"./_property-desc":104,"./_to-iobject":128,"./_to-primitive":131}],90:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":91,"./_to-iobject":128}],91:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_enum-bug-keys":47,"./_object-keys-internal":94}],92:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],93:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":58,"./_shared-key":113,"./_to-object":130}],94:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":28,"./_has":58,"./_shared-key":113,"./_to-iobject":128}],95:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":47,"./_object-keys-internal":94}],96:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],97:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_core":39,"./_export":49,"./_fails":51}],98:[function(require,module,exports){
var DESCRIPTORS = require('./_descriptors');
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

},{"./_descriptors":45,"./_object-keys":95,"./_object-pie":96,"./_to-iobject":128}],99:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN = require('./_object-gopn');
var gOPS = require('./_object-gops');
var anObject = require('./_an-object');
var Reflect = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"./_an-object":25,"./_global":57,"./_object-gopn":91,"./_object-gops":92}],100:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat;
var $trim = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"./_global":57,"./_string-trim":122,"./_string-ws":123}],101:[function(require,module,exports){
var $parseInt = require('./_global').parseInt;
var $trim = require('./_string-trim').trim;
var ws = require('./_string-ws');
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"./_global":57,"./_string-trim":122,"./_string-ws":123}],102:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],103:[function(require,module,exports){
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":25,"./_is-object":68,"./_new-promise-capability":83}],104:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],105:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"./_redefine":106}],106:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var $toString = require('./_function-to-string');
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_core":39,"./_function-to-string":56,"./_global":57,"./_has":58,"./_hide":59,"./_uid":135}],107:[function(require,module,exports){
'use strict';

var classof = require('./_classof');
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};

},{"./_classof":34}],108:[function(require,module,exports){
'use strict';

var regexpFlags = require('./_flags');

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

},{"./_flags":53}],109:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],110:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_an-object":25,"./_ctx":41,"./_is-object":68,"./_object-gopd":89}],111:[function(require,module,exports){
'use strict';
var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_descriptors":45,"./_global":57,"./_object-dp":86,"./_wks":140}],112:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":58,"./_object-dp":86,"./_wks":140}],113:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":114,"./_uid":135}],114:[function(require,module,exports){
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":39,"./_global":57,"./_library":76}],115:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_a-function":21,"./_an-object":25,"./_wks":140}],116:[function(require,module,exports){
'use strict';
var fails = require('./_fails');

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

},{"./_fails":51}],117:[function(require,module,exports){
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_defined":44,"./_to-integer":127}],118:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"./_defined":44,"./_is-regexp":69}],119:[function(require,module,exports){
var $export = require('./_export');
var fails = require('./_fails');
var defined = require('./_defined');
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"./_defined":44,"./_export":49,"./_fails":51}],120:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length');
var repeat = require('./_string-repeat');
var defined = require('./_defined');

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":44,"./_string-repeat":121,"./_to-length":129}],121:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer');
var defined = require('./_defined');

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"./_defined":44,"./_to-integer":127}],122:[function(require,module,exports){
var $export = require('./_export');
var defined = require('./_defined');
var fails = require('./_fails');
var spaces = require('./_string-ws');
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"./_defined":44,"./_export":49,"./_fails":51,"./_string-ws":123}],123:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],124:[function(require,module,exports){
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_cof":35,"./_ctx":41,"./_dom-create":46,"./_global":57,"./_html":60,"./_invoke":63}],125:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":127}],126:[function(require,module,exports){
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

},{"./_to-integer":127,"./_to-length":129}],127:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],128:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":44,"./_iobject":64}],129:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":127}],130:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":44}],131:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":68}],132:[function(require,module,exports){
'use strict';
if (require('./_descriptors')) {
  var LIBRARY = require('./_library');
  var global = require('./_global');
  var fails = require('./_fails');
  var $export = require('./_export');
  var $typed = require('./_typed');
  var $buffer = require('./_typed-buffer');
  var ctx = require('./_ctx');
  var anInstance = require('./_an-instance');
  var propertyDesc = require('./_property-desc');
  var hide = require('./_hide');
  var redefineAll = require('./_redefine-all');
  var toInteger = require('./_to-integer');
  var toLength = require('./_to-length');
  var toIndex = require('./_to-index');
  var toAbsoluteIndex = require('./_to-absolute-index');
  var toPrimitive = require('./_to-primitive');
  var has = require('./_has');
  var classof = require('./_classof');
  var isObject = require('./_is-object');
  var toObject = require('./_to-object');
  var isArrayIter = require('./_is-array-iter');
  var create = require('./_object-create');
  var getPrototypeOf = require('./_object-gpo');
  var gOPN = require('./_object-gopn').f;
  var getIterFn = require('./core.get-iterator-method');
  var uid = require('./_uid');
  var wks = require('./_wks');
  var createArrayMethod = require('./_array-methods');
  var createArrayIncludes = require('./_array-includes');
  var speciesConstructor = require('./_species-constructor');
  var ArrayIterators = require('./es6.array.iterator');
  var Iterators = require('./_iterators');
  var $iterDetect = require('./_iter-detect');
  var setSpecies = require('./_set-species');
  var arrayFill = require('./_array-fill');
  var arrayCopyWithin = require('./_array-copy-within');
  var $DP = require('./_object-dp');
  var $GOPD = require('./_object-gopd');
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };

},{"./_an-instance":24,"./_array-copy-within":26,"./_array-fill":27,"./_array-includes":28,"./_array-methods":29,"./_classof":34,"./_ctx":41,"./_descriptors":45,"./_export":49,"./_fails":51,"./_global":57,"./_has":58,"./_hide":59,"./_is-array-iter":65,"./_is-object":68,"./_iter-detect":73,"./_iterators":75,"./_library":76,"./_object-create":85,"./_object-dp":86,"./_object-gopd":89,"./_object-gopn":91,"./_object-gpo":93,"./_property-desc":104,"./_redefine-all":105,"./_set-species":111,"./_species-constructor":115,"./_to-absolute-index":125,"./_to-index":126,"./_to-integer":127,"./_to-length":129,"./_to-object":130,"./_to-primitive":131,"./_typed":134,"./_typed-buffer":133,"./_uid":135,"./_wks":140,"./core.get-iterator-method":141,"./es6.array.iterator":152}],133:[function(require,module,exports){
'use strict';
var global = require('./_global');
var DESCRIPTORS = require('./_descriptors');
var LIBRARY = require('./_library');
var $typed = require('./_typed');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var fails = require('./_fails');
var anInstance = require('./_an-instance');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var toIndex = require('./_to-index');
var gOPN = require('./_object-gopn').f;
var dP = require('./_object-dp').f;
var arrayFill = require('./_array-fill');
var setToStringTag = require('./_set-to-string-tag');
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"./_an-instance":24,"./_array-fill":27,"./_descriptors":45,"./_fails":51,"./_global":57,"./_hide":59,"./_library":76,"./_object-dp":86,"./_object-gopn":91,"./_redefine-all":105,"./_set-to-string-tag":112,"./_to-index":126,"./_to-integer":127,"./_to-length":129,"./_typed":134}],134:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var uid = require('./_uid');
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

},{"./_global":57,"./_hide":59,"./_uid":135}],135:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],136:[function(require,module,exports){
var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":57}],137:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":68}],138:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_core":39,"./_global":57,"./_library":76,"./_object-dp":86,"./_wks-ext":139}],139:[function(require,module,exports){
exports.f = require('./_wks');

},{"./_wks":140}],140:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":57,"./_shared":114,"./_uid":135}],141:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":34,"./_core":39,"./_iterators":75,"./_wks":140}],142:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });

require('./_add-to-unscopables')('copyWithin');

},{"./_add-to-unscopables":22,"./_array-copy-within":26,"./_export":49}],143:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $every = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":29,"./_export":49,"./_strict-method":116}],144:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { fill: require('./_array-fill') });

require('./_add-to-unscopables')('fill');

},{"./_add-to-unscopables":22,"./_array-fill":27,"./_export":49}],145:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":29,"./_export":49,"./_strict-method":116}],146:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":22,"./_array-methods":29,"./_export":49}],147:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":22,"./_array-methods":29,"./_export":49}],148:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $forEach = require('./_array-methods')(0);
var STRICT = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":29,"./_export":49,"./_strict-method":116}],149:[function(require,module,exports){
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":40,"./_ctx":41,"./_export":49,"./_is-array-iter":65,"./_iter-call":70,"./_iter-detect":73,"./_to-length":129,"./_to-object":130,"./core.get-iterator-method":141}],150:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $indexOf = require('./_array-includes')(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});

},{"./_array-includes":28,"./_export":49,"./_strict-method":116}],151:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', { isArray: require('./_is-array') });

},{"./_export":49,"./_is-array":66}],152:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":22,"./_iter-define":72,"./_iter-step":74,"./_iterators":75,"./_to-iobject":128}],153:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});

},{"./_export":49,"./_strict-method":116,"./_to-integer":127,"./_to-iobject":128,"./_to-length":129}],154:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $map = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":29,"./_export":49,"./_strict-method":116}],155:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"./_create-property":40,"./_export":49,"./_fails":51}],156:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

},{"./_array-reduce":30,"./_export":49,"./_strict-method":116}],157:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

},{"./_array-reduce":30,"./_export":49,"./_strict-method":116}],158:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $some = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":29,"./_export":49,"./_strict-method":116}],159:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var fails = require('./_fails');
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"./_a-function":21,"./_export":49,"./_fails":51,"./_strict-method":116,"./_to-object":130}],160:[function(require,module,exports){
require('./_set-species')('Array');

},{"./_set-species":111}],161:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });

},{"./_export":49}],162:[function(require,module,exports){
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export');
var toISOString = require('./_date-to-iso-string');

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

},{"./_date-to-iso-string":42,"./_export":49}],163:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"./_export":49,"./_fails":51,"./_to-object":130,"./_to-primitive":131}],164:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));

},{"./_date-to-primitive":43,"./_hide":59,"./_wks":140}],165:[function(require,module,exports){
var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  require('./_redefine')(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

},{"./_redefine":106}],166:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', { bind: require('./_bind') });

},{"./_bind":33,"./_export":49}],167:[function(require,module,exports){
'use strict';
var isObject = require('./_is-object');
var getPrototypeOf = require('./_object-gpo');
var HAS_INSTANCE = require('./_wks')('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });

},{"./_is-object":68,"./_object-dp":86,"./_object-gpo":93,"./_wks":140}],168:[function(require,module,exports){
var dP = require('./_object-dp').f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"./_descriptors":45,"./_object-dp":86}],169:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection":38,"./_collection-strong":36,"./_validate-collection":137}],170:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"./_export":49,"./_math-log1p":79}],171:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"./_export":49}],172:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"./_export":49}],173:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export');
var sign = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

},{"./_export":49,"./_math-sign":80}],174:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

},{"./_export":49}],175:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export');
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"./_export":49}],176:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"./_export":49,"./_math-expm1":77}],177:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export = require('./_export');

$export($export.S, 'Math', { fround: require('./_math-fround') });

},{"./_export":49,"./_math-fround":78}],178:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export');
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

},{"./_export":49}],179:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export');
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"./_export":49,"./_fails":51}],180:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

},{"./_export":49}],181:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', { log1p: require('./_math-log1p') });

},{"./_export":49,"./_math-log1p":79}],182:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

},{"./_export":49}],183:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', { sign: require('./_math-sign') });

},{"./_export":49,"./_math-sign":80}],184:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"./_export":49,"./_fails":51,"./_math-expm1":77}],185:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"./_export":49,"./_math-expm1":77}],186:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

},{"./_export":49}],187:[function(require,module,exports){
'use strict';
var global = require('./_global');
var has = require('./_has');
var cof = require('./_cof');
var inheritIfRequired = require('./_inherit-if-required');
var toPrimitive = require('./_to-primitive');
var fails = require('./_fails');
var gOPN = require('./_object-gopn').f;
var gOPD = require('./_object-gopd').f;
var dP = require('./_object-dp').f;
var $trim = require('./_string-trim').trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}

},{"./_cof":35,"./_descriptors":45,"./_fails":51,"./_global":57,"./_has":58,"./_inherit-if-required":62,"./_object-create":85,"./_object-dp":86,"./_object-gopd":89,"./_object-gopn":91,"./_redefine":106,"./_string-trim":122,"./_to-primitive":131}],188:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

},{"./_export":49}],189:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export = require('./_export');
var _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

},{"./_export":49,"./_global":57}],190:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', { isInteger: require('./_is-integer') });

},{"./_export":49,"./_is-integer":67}],191:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"./_export":49}],192:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export = require('./_export');
var isInteger = require('./_is-integer');
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"./_export":49,"./_is-integer":67}],193:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

},{"./_export":49}],194:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

},{"./_export":49}],195:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

},{"./_export":49,"./_parse-float":100}],196:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

},{"./_export":49,"./_parse-int":101}],197:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":49,"./_object-assign":84}],198:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":49,"./_object-create":85}],199:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });

},{"./_descriptors":45,"./_export":49,"./_object-dps":87}],200:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_descriptors":45,"./_export":49,"./_object-dp":86}],201:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"./_is-object":68,"./_meta":81,"./_object-sap":97}],202:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_object-gopd":89,"./_object-sap":97,"./_to-iobject":128}],203:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function () {
  return require('./_object-gopn-ext').f;
});

},{"./_object-gopn-ext":90,"./_object-sap":97}],204:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"./_object-gpo":93,"./_object-sap":97,"./_to-object":130}],205:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"./_is-object":68,"./_object-sap":97}],206:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

},{"./_is-object":68,"./_object-sap":97}],207:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

},{"./_is-object":68,"./_object-sap":97}],208:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', { is: require('./_same-value') });

},{"./_export":49,"./_same-value":109}],209:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_object-keys":95,"./_object-sap":97,"./_to-object":130}],210:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"./_is-object":68,"./_meta":81,"./_object-sap":97}],211:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

},{"./_is-object":68,"./_meta":81,"./_object-sap":97}],212:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":49,"./_set-proto":110}],213:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof');
var test = {};
test[require('./_wks')('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  require('./_redefine')(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

},{"./_classof":34,"./_redefine":106,"./_wks":140}],214:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_a-function":21,"./_an-instance":24,"./_classof":34,"./_core":39,"./_ctx":41,"./_export":49,"./_for-of":55,"./_global":57,"./_is-object":68,"./_iter-detect":73,"./_library":76,"./_microtask":82,"./_new-promise-capability":83,"./_perform":102,"./_promise-resolve":103,"./_redefine-all":105,"./_set-species":111,"./_set-to-string-tag":112,"./_species-constructor":115,"./_task":124,"./_user-agent":136,"./_wks":140}],215:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var rApply = (require('./_global').Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"./_a-function":21,"./_an-object":25,"./_export":49,"./_fails":51,"./_global":57}],216:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = require('./_export');
var create = require('./_object-create');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var fails = require('./_fails');
var bind = require('./_bind');
var rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"./_a-function":21,"./_an-object":25,"./_bind":33,"./_export":49,"./_fails":51,"./_global":57,"./_is-object":68,"./_object-create":85}],217:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = require('./_object-dp');
var $export = require('./_export');
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":25,"./_export":49,"./_fails":51,"./_object-dp":86,"./_to-primitive":131}],218:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = require('./_export');
var gOPD = require('./_object-gopd').f;
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

},{"./_an-object":25,"./_export":49,"./_object-gopd":89}],219:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = require('./_object-gopd');
var $export = require('./_export');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

},{"./_an-object":25,"./_export":49,"./_object-gopd":89}],220:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = require('./_export');
var getProto = require('./_object-gpo');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

},{"./_an-object":25,"./_export":49,"./_object-gpo":93}],221:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var isObject = require('./_is-object');
var anObject = require('./_an-object');

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

},{"./_an-object":25,"./_export":49,"./_has":58,"./_is-object":68,"./_object-gopd":89,"./_object-gpo":93}],222:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"./_export":49}],223:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

},{"./_an-object":25,"./_export":49}],224:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });

},{"./_export":49,"./_own-keys":99}],225:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":25,"./_export":49}],226:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = require('./_export');
var setProto = require('./_set-proto');

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":49,"./_set-proto":110}],227:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = require('./_object-dp');
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var createDesc = require('./_property-desc');
var anObject = require('./_an-object');
var isObject = require('./_is-object');

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

},{"./_an-object":25,"./_export":49,"./_has":58,"./_is-object":68,"./_object-dp":86,"./_object-gopd":89,"./_object-gpo":93,"./_property-desc":104}],228:[function(require,module,exports){
var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegExp = require('./_is-regexp');
var $flags = require('./_flags');
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');

},{"./_descriptors":45,"./_fails":51,"./_flags":53,"./_global":57,"./_inherit-if-required":62,"./_is-regexp":69,"./_object-dp":86,"./_object-gopn":91,"./_redefine":106,"./_set-species":111,"./_wks":140}],229:[function(require,module,exports){
'use strict';
var regexpExec = require('./_regexp-exec');
require('./_export')({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});

},{"./_export":49,"./_regexp-exec":108}],230:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});

},{"./_descriptors":45,"./_flags":53,"./_object-dp":86}],231:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var toLength = require('./_to-length');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');

// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"./_advance-string-index":23,"./_an-object":25,"./_fix-re-wks":52,"./_regexp-exec-abstract":107,"./_to-length":129}],232:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

},{"./_advance-string-index":23,"./_an-object":25,"./_fix-re-wks":52,"./_regexp-exec-abstract":107,"./_to-integer":127,"./_to-length":129,"./_to-object":130}],233:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var sameValue = require('./_same-value');
var regExpExec = require('./_regexp-exec-abstract');

// @@search logic
require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});

},{"./_an-object":25,"./_fix-re-wks":52,"./_regexp-exec-abstract":107,"./_same-value":109}],234:[function(require,module,exports){
'use strict';

var isRegExp = require('./_is-regexp');
var anObject = require('./_an-object');
var speciesConstructor = require('./_species-constructor');
var advanceStringIndex = require('./_advance-string-index');
var toLength = require('./_to-length');
var callRegExpExec = require('./_regexp-exec-abstract');
var regexpExec = require('./_regexp-exec');
var fails = require('./_fails');
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

// @@split logic
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});

},{"./_advance-string-index":23,"./_an-object":25,"./_fails":51,"./_fix-re-wks":52,"./_is-regexp":69,"./_regexp-exec":108,"./_regexp-exec-abstract":107,"./_species-constructor":115,"./_to-length":129}],235:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject = require('./_an-object');
var $flags = require('./_flags');
var DESCRIPTORS = require('./_descriptors');
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"./_an-object":25,"./_descriptors":45,"./_fails":51,"./_flags":53,"./_redefine":106,"./es6.regexp.flags":230}],236:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection":38,"./_collection-strong":36,"./_validate-collection":137}],237:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"./_string-html":119}],238:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"./_string-html":119}],239:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"./_string-html":119}],240:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"./_string-html":119}],241:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $at = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"./_export":49,"./_string-at":117}],242:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"./_export":49,"./_fails-is-regexp":50,"./_string-context":118,"./_to-length":129}],243:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"./_string-html":119}],244:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"./_string-html":119}],245:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"./_string-html":119}],246:[function(require,module,exports){
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

},{"./_export":49,"./_to-absolute-index":125}],247:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"./_export":49,"./_fails-is-regexp":50,"./_string-context":118}],248:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"./_string-html":119}],249:[function(require,module,exports){
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_iter-define":72,"./_string-at":117}],250:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"./_string-html":119}],251:[function(require,module,exports){
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});

},{"./_export":49,"./_to-iobject":128,"./_to-length":129}],252:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});

},{"./_export":49,"./_string-repeat":121}],253:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"./_string-html":119}],254:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"./_export":49,"./_fails-is-regexp":50,"./_string-context":118,"./_to-length":129}],255:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"./_string-html":119}],256:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"./_string-html":119}],257:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"./_string-html":119}],258:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

},{"./_string-trim":122}],259:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toObject = require('./_to-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $GOPS = require('./_object-gops');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_an-object":25,"./_descriptors":45,"./_enum-keys":48,"./_export":49,"./_fails":51,"./_global":57,"./_has":58,"./_hide":59,"./_is-array":66,"./_is-object":68,"./_library":76,"./_meta":81,"./_object-create":85,"./_object-dp":86,"./_object-gopd":89,"./_object-gopn":91,"./_object-gopn-ext":90,"./_object-gops":92,"./_object-keys":95,"./_object-pie":96,"./_property-desc":104,"./_redefine":106,"./_set-to-string-tag":112,"./_shared":114,"./_to-iobject":128,"./_to-object":130,"./_to-primitive":131,"./_uid":135,"./_wks":140,"./_wks-define":138,"./_wks-ext":139}],260:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $typed = require('./_typed');
var buffer = require('./_typed-buffer');
var anObject = require('./_an-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var isObject = require('./_is-object');
var ArrayBuffer = require('./_global').ArrayBuffer;
var speciesConstructor = require('./_species-constructor');
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);

},{"./_an-object":25,"./_export":49,"./_fails":51,"./_global":57,"./_is-object":68,"./_set-species":111,"./_species-constructor":115,"./_to-absolute-index":125,"./_to-length":129,"./_typed":134,"./_typed-buffer":133}],261:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});

},{"./_export":49,"./_typed":134,"./_typed-buffer":133}],262:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":132}],263:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":132}],264:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":132}],265:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":132}],266:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":132}],267:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":132}],268:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":132}],269:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":132}],270:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"./_typed-array":132}],271:[function(require,module,exports){
'use strict';
var global = require('./_global');
var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var validate = require('./_validate-collection');
var NATIVE_WEAK_MAP = require('./_validate-collection');
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"./_array-methods":29,"./_collection":38,"./_collection-weak":37,"./_global":57,"./_is-object":68,"./_meta":81,"./_object-assign":84,"./_redefine":106,"./_validate-collection":137}],272:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');
var validate = require('./_validate-collection');
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
require('./_collection')(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

},{"./_collection":38,"./_collection-weak":37,"./_validate-collection":137}],273:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var aFunction = require('./_a-function');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

require('./_add-to-unscopables')('flatMap');

},{"./_a-function":21,"./_add-to-unscopables":22,"./_array-species-create":32,"./_export":49,"./_flatten-into-array":54,"./_to-length":129,"./_to-object":130}],274:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export = require('./_export');
var $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');

},{"./_add-to-unscopables":22,"./_array-includes":28,"./_export":49}],275:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});

},{"./_a-function":21,"./_descriptors":45,"./_export":49,"./_object-dp":86,"./_object-forced-pam":88,"./_to-object":130}],276:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});

},{"./_a-function":21,"./_descriptors":45,"./_export":49,"./_object-dp":86,"./_object-forced-pam":88,"./_to-object":130}],277:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"./_export":49,"./_object-to-array":98}],278:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = require('./_export');
var ownKeys = require('./_own-keys');
var toIObject = require('./_to-iobject');
var gOPD = require('./_object-gopd');
var createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

},{"./_create-property":40,"./_export":49,"./_object-gopd":89,"./_own-keys":99,"./_to-iobject":128}],279:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_descriptors":45,"./_export":49,"./_object-forced-pam":88,"./_object-gopd":89,"./_object-gpo":93,"./_to-object":130,"./_to-primitive":131}],280:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_descriptors":45,"./_export":49,"./_object-forced-pam":88,"./_object-gopd":89,"./_object-gpo":93,"./_to-object":130,"./_to-primitive":131}],281:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

},{"./_export":49,"./_object-to-array":98}],282:[function(require,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_core":39,"./_export":49,"./_global":57,"./_promise-resolve":103,"./_species-constructor":115}],283:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

},{"./_export":49,"./_string-pad":120,"./_user-agent":136}],284:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

},{"./_export":49,"./_string-pad":120,"./_user-agent":136}],285:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

},{"./_string-trim":122}],286:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

},{"./_string-trim":122}],287:[function(require,module,exports){
require('./_wks-define')('asyncIterator');

},{"./_wks-define":138}],288:[function(require,module,exports){
var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./_global":57,"./_hide":59,"./_iterators":75,"./_object-keys":95,"./_redefine":106,"./_wks":140,"./es6.array.iterator":152}],289:[function(require,module,exports){
var $export = require('./_export');
var $task = require('./_task');
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

},{"./_export":49,"./_task":124}],290:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global = require('./_global');
var $export = require('./_export');
var userAgent = require('./_user-agent');
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

},{"./_export":49,"./_global":57,"./_user-agent":136}],291:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}]},{},[20]);
